# This is a basic workflow to help you get started with Actions

name: CI_LINUX

# Controls when the action will run. Triggers the workflow after CI_WINDOWS workflow is completed
# only for the master branch
on:
  workflow_run:
    workflows: ["CI_WINDOWS"]
    branches: [master]
    types: 
      - completed

# This workflow run is made of two jobs "check" and "build_linux"
jobs:
  check:
    name: Check changed files
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: check files
      id: check_files
      run: |
        echo "=============== list changed files ==============="
        git diff --name-only HEAD^ HEAD
        
        echo "run_job=false" >> $GITHUB_OUTPUT
        echo "========== check paths of changed files =========="
        git diff --name-only HEAD^ HEAD > files.txt
        while IFS= read -r file
        do
          echo $file
          if [[ $file == ".github/workflows/linux.yaml"* ]]; then
            echo "This file is under the directory '.github/workflows/linux.yaml'."
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
          if [[ $file == "src/jvm/src/"* ]]; then
            echo "This file is under the directory 'src/jvm/src'."
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
          if [[ $file == "tests/jvm/"* ]]; then
            echo "This file is under the directory 'tests/jvm/'."
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
        echo "This files are not in a source directory no action required"
        done < files.txt

  # This workflow contains a single job called "build"
  build_linux:
    needs: check
    if: needs.check.outputs.run_job == 'true' 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          fetch-depth: '1'

      # Runs a set of commands using the runners shell
      - name: Build JCOReflectorCLI
        run: dotnet build --no-incremental --framework net6.0 --configuration Release src/net/JCOReflectorCLI.sln

      - name: Build Java files
        run: dotnet bin/net6.0/MASES.JCOReflectorCLI.dll -JobType Build -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/build_linux.job

      - name: Build JAR files
        run: dotnet bin/net6.0/MASES.JCOReflectorCLI.dll -JobType CreateJars -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/createjars_net6.0_linux.job

      - name: Build JCOReflectorCLI
        run: dotnet build --no-incremental --framework net8.0 --configuration Release src/net/JCOReflectorCLI.sln

      - name: Build Java files
        run: dotnet bin/net8.0/MASES.JCOReflectorCLI.dll -JobType Build -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/build_linux.job

      - name: Build JAR files
        run: dotnet bin/net8.0/MASES.JCOReflectorCLI.dll -JobType CreateJars -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/createjars_net8.0_linux.job

      - name: Save JCOReflector bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_linux_bin_${{ github.run_id }}_${{ github.run_attempt }}


  execute_java_tests:
    needs: build_linux
    strategy:
      fail-fast: false
      matrix:
        framework: [ 'net6.0', 'net8.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle']
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11

    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          fetch-depth: '1'

      - name: Restore JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_linux_bin_${{ github.run_id }}_${{ github.run_attempt }}

      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
          cache: 'maven'

      - name: Prepare extra argument
        if: matrix.framework == 'net6.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRApp:Microsoft.NET6.App" >> $GITHUB_ENV

      - name: Build Java test source file
        run: javac -cp ./bin/${{ matrix.framework }}/JCOReflector.jar ./tests/jvm/java/src/hierarchy/*.java ./tests/jvm/java/src/mscorlib/*.java ./tests/jvm/java/src/nettest/*.java ./tests/jvm/java/src/refout/*.java

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloNET ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" nettest.HelloNETSocket -server 127.0.0.1 ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" nettest.HelloNETSocket -async -server 127.0.0.1 ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
        
          #java -cp "./bin/net6.0/JCOReflector.jar;./tests/jvm/java/src/" refout.HelloRefOutBase
          #java -cp "./bin/net6.0/JCOReflector.jar;./tests/jvm/java/src/" refout.HelloRefOut

  execute_scala_tests:
    needs: build_linux
    strategy:
      fail-fast: false
      matrix:
        framework: [ 'net6.0', 'net8.0' ]

    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          fetch-depth: '1'

      - name: Restore JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_linux_bin_${{ github.run_id }}_${{ github.run_attempt }}

      - name: Download and install Scala package
        run: |
          sudo apt update
          sudo apt-get install unzip
          sudo apt-get install zip
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install scala 2.13.5

      - name: Build Scala test source file
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          mkdir ./tests/jvm/scala/output
          scalac -cp "./bin/${{ matrix.framework }}/*" -d ./tests/jvm/scala/output ./tests/jvm/scala/src/main/scala/hierarchy/* ./tests/jvm/scala/src/main/scala/mscorlib/* ./tests/jvm/scala/src/main/scala/nettest/* ./tests/jvm/scala/src/main/scala/refout/*

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNet ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket -async ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true
        env:
          JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      - run: rm -rf ./tests/jvm/scala/output
