# This is a basic workflow to help you get started with Actions

name: CI_MAVEN

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_run:
    workflows: ["CI_LINUX"]
    branches: [master]
    types: 
      - completed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check:
    name: Check changed files
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: check files
      id: check_files
      run: |
        echo "=============== list changed files ==============="
        git diff --name-only HEAD^ HEAD
        
        echo "run_job=false" >> $GITHUB_OUTPUT
        echo "========== check paths of changed files =========="
        git diff --name-only HEAD^ HEAD > files.txt
        while IFS= read -r file
        do
          echo $file
          if [[ $file == ".github/workflows/maven.yaml"* ]]; then
            echo "A change in workflow was made, a run is requested"
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
          if [[ $file == "src/engine/JCOPOMJCOReflector.template"* ]]; then
            echo "A change in template was made, a run is requested"
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
          if [[ $file == "src/jvm/src/"* ]]; then
            echo "This file is under the directory 'src/jvm/src/'."
            echo "run_job=true" >> $GITHUB_OUTPUT
            break
          fi
        echo "This files are not in a source directory no action required"
        done < files.txt

  # This workflow contains a single job called "build"
  build_maven:
    needs: check
    if: needs.check.outputs.run_job == 'true' 
    # The type of runner that the job will run on
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        framework: [ 'net462', 'net6.0', 'net7.0', 'net8.0' ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
        shell: bash

      # Runs a set of commands using the runners shell
      - name: Build JCOReflectorCLI
        run: dotnet build --no-incremental --framework ${{ matrix.framework }} src\net\JCOReflectorCLI.sln

      # Runs a set of commands using the runners shell
      - name: Copy configuration file
        if: matrix.framework != 'net462'
        run: Copy-Item .github\workflows\JCOReflectorCLI_${{ matrix.framework }}.runtimeconfig.json -Destination bin\${{ matrix.framework }}\MASES.JCOReflectorCLI.runtimeconfig.json -Force

      - name: Build Maven POM files
        run: .\bin\${{ matrix.framework }}\MASES.JCOReflectorCLI -JobType CreatePOM -JobFile .github\workflows\createpom_win19.job

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Install local file to be used within Javadoc section of generated POM 
        shell: bash
        run: mvn install:install-file --no-transfer-progress -Dfile=../../../bin/${{ matrix.framework }}/JCOBridge.jar -DgroupId=JCOBridge -DartifactId=JCOBridge -Dversion=2.5.10 -Dpackaging=jar -f ./src/jvm/src/${{ matrix.framework }}.xml

      - name: Publish ${{ matrix.framework }} to Apache Maven Central
        shell: bash
        run: mvn --file ./src/jvm/src/${{ matrix.framework }}.xml --no-transfer-progress --batch-mode -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
