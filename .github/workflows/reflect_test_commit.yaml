# This is a basic workflow to help you get started with Actions

name: CI_REFLECT_TEST_COMMIT

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    paths-ignore:
      - 'docs/**'
   
  workflow_dispatch:
    inputs:
      ForceExecution:
        description: 'Force execution of workflow'
        required: false
        default: false
        type: boolean
      GeneratePR:
        description: 'Generate the PR at the end'
        required: false
        default: false
        type: boolean
      ExecuteSocketTest:
        description: 'Execute the test related to socket'
        required: false
        default: false
        type: boolean
      ExecuteScalaEventTest:
        description: 'Execute the test related to event under Scala'
        required: false
        default: false
        type: boolean

env:
    SCALARELEASE: 2.13.13

# This workflow contains two jobs called "check" and "build_windows"
jobs:
  # Verify if a build is needed
  check:
    if: ${{ github.repository_owner == 'masesgroup' || (github.repository_owner != 'masesgroup' && github.ref_name != 'master') }} #do not execute on master outside main repo
    name: Check changed files
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job || steps.force_execution.outputs.run_job }}
    runs-on: ubuntu-22.04
    steps:
      - id: force_execution
        if: ${{ inputs.GeneratePR == true || inputs.ForceExecution == true }}
        run: echo "run_job=true" >> $GITHUB_OUTPUT
        
      - id: get_changed_files
        if: ${{ inputs.GeneratePR == false && inputs.ForceExecution == false }}
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'

      - id: check_files
        if: ${{ inputs.GeneratePR == false && inputs.ForceExecution == false }}
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/reflect_test_commit.yaml"* ]]; then
                echo "$added_modified_file is under the directory '.github/workflows'."
                echo "run_job=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/jvm/src/JCOReflector/"* ]]; then
                echo "$added_modified_file is under the directory 'src/jvm/src/JCOReflector'."
                echo "run_job=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file is under the directory 'src/'."
                echo "run_job=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "tests/jvm/"* ]]; then
                echo "$added_modified_file is under the directory 'tests/jvm/'."
                echo "run_job=true" >> $GITHUB_OUTPUT
                break
              fi
          done

  # This workflow contains a single job called "build"
  build_windows:
    needs: check
    if: ${{ needs.check.outputs.run_job == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-2022' ]
        framework: [ 'net462', 'net8.0', 'net9.0' ]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      # Runs a set of commands using the runners shell
      - name: Build JCOReflectorCLI
        run: dotnet build --no-incremental --configuration Release --framework ${{ matrix.framework }} /p:Platform="Any CPU" src\net\JCOReflectorCLI.sln

      - uses: nuget/setup-nuget@v2.0.1
        with:
          nuget-version: '5.x'
          
      # Runs a set of commands using the runners shell
      - name: Copy configuration file
        if: ${{ matrix.framework != 'net462' }}
        run: Copy-Item .github\workflows\JCOReflectorCLI_${{ matrix.framework }}.runtimeconfig.json -Destination bin\${{ matrix.framework }}\MASES.JCOReflectorCLI.runtimeconfig.json -Force
          
      - name: Remove Java files
        run: Remove-Item .\src\jvm\src\${{ matrix.framework }} -Recurse -Force

      - name: Reflect ${{ matrix.framework }} Java files
        run: .\bin\${{ matrix.framework }}\MASES.JCOReflectorCLI -JobType Reflect -JobFile .github\workflows\reflect_${{ matrix.framework }}.job

      - name: Build Java files ${{ matrix.framework }}
        run: .\bin\${{ matrix.framework }}\MASES.JCOReflectorCLI -JobType Build -JobFile .github\workflows\build_win19.job -JDKFolder %JAVA_HOME_11_X64%
        shell: cmd

      - name: Build JAR files ${{ matrix.framework }}
        run: .\bin\${{ matrix.framework }}\MASES.JCOReflectorCLI -JobType CreateJars -JobFile .github\workflows\createjars_${{ matrix.framework }}_win19.job -JDKFolder %JAVA_HOME_11_X64%
        shell: cmd

      - name: Save ${{ matrix.framework }} JCOReflector source in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: |
              ./src/jvm/${{ matrix.framework }}.md
              ./src/jvm/statistics/${{ matrix.framework }}/
              ./src/jvm/src/${{ matrix.framework }}/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_source_${{ matrix.framework }}_${{ github.sha }}

      - name: Save JCOReflector bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_${{ matrix.framework }}_${{ github.sha }}

  # This workflow contains a single job called "build"
  build_windows_prepare_scala:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-2022' ]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Download Scala package
        run: C:\msys64\usr\bin\wget.exe https://downloads.lightbend.com/scala/${{ env.SCALARELEASE }}/scala-${{ env.SCALARELEASE }}.zip

      - name: Expand Scala package
        run: Expand-Archive -LiteralPath '.\scala-${{ env.SCALARELEASE }}.zip' -DestinationPath .\bin\ -Force

      - name: Save Scala bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_scala_${{ env.SCALARELEASE }}_${{ github.sha }}

  # This workflow contains a single job called "build"
  build_linux:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-22.04' ]
        framework: [ 'net8.0', 'net9.0' ]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x

      - name: Restore ${{ matrix.framework }} JCOReflector source from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./src/jvm/${{ matrix.framework }}.md
              ./src/jvm/statistics/${{ matrix.framework }}/
              ./src/jvm/src/${{ matrix.framework }}/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_source_${{ matrix.framework }}_${{ github.sha }}

      # Runs a set of commands using the runners shell
      - name: Build ${{ matrix.framework }} JCOReflectorCLI
        run: dotnet build --no-incremental --framework ${{ matrix.framework }} --configuration Release src/net/JCOReflectorCLI.sln

      - name: Build ${{ matrix.framework }} Java files
        run: dotnet bin/${{ matrix.framework }}/MASES.JCOReflectorCLI.dll -JobType Build -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/build_linux.job

      - name: Build JAR files
        run: dotnet bin/${{ matrix.framework }}/MASES.JCOReflectorCLI.dll -JobType CreateJars -JDKFolder $JAVA_HOME_11_X64 -JobFile .github/workflows/createjars_${{ matrix.framework }}_linux.job

      - name: Extract commit SHA
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

      - name: Save ${{ matrix.framework }} JCOReflector bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_linux_bin_${{ matrix.framework }}_${{ github.sha }}

  execute_java_tests_windows:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-2022' ]
        framework: [ 'net462', 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 17

    runs-on: ${{ matrix.os }}
    env:
      JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_3 }}
    
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - name: Restore ${{ matrix.framework }} JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_${{ matrix.framework }}_${{ github.sha }}
 
      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v5
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Java test source file for ${{ matrix.framework }}
        run: javac -cp ./bin/${{ matrix.framework }}/JCOReflector.jar ./tests/jvm/java/src/hierarchy/*.java ./tests/jvm/java/src/mscorlib/*.java ./tests/jvm/java/src/nettest/*.java ./tests/jvm/java/src/refout/*.java

      - name: Prepare extra argument
        if: matrix.framework == 'net9.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRVersion:9" >> $GITHUB_ENV

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" mscorlib.HelloNET ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" nettest.HelloNETSocket ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true
    
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" nettest.HelloNETSocket -async ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar;./tests/jvm/java/src/" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Errors_java_tests_windows_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ./**/hs_err_*
          retention-days: 1

  execute_scala_tests_windows:
    needs: build_windows_prepare_scala
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-2022' ]
        framework: [ 'net462', 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 17

    runs-on: ${{ matrix.os }}
    env:
      JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_3 }}
      
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - name: Restore ${{ matrix.framework }} JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_${{ matrix.framework }}_${{ github.sha }}

      - name: Restore Scala bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_scala_${{ env.SCALARELEASE }}_${{ github.sha }}

      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v5
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare extra argument
        if: matrix.framework == 'net9.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRVersion:9" >> $GITHUB_ENV

      - name: Build Scala test source file for ${{ matrix.framework }}
        shell: cmd
        run: |
          cd ./tests/jvm/scala
          mkdir output
          ..\..\..\bin\scala-${{ env.SCALARELEASE }}\bin\scalac -toolcp "../../../bin/${{ matrix.framework }}/*" -d ./output ./src/main/scala/hierarchy/* ./src/main/scala/mscorlib/* ./src/main/scala/nettest/* ./src/main/scala/refout/*
              
      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" mscorlib.HelloNet ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteScalaEventTest == true }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" nettest.HelloNETSocket ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        shell: cmd
        continue-on-error: true
    
      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" nettest.HelloNETSocket -async ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: .\bin\scala-${{ env.SCALARELEASE }}\bin\scala -toolcp "./bin/${{ matrix.framework }}/*;./tests/jvm/scala/output" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        shell: cmd
        continue-on-error: true

      - run: cd ./tests/jvm/scala && rmdir output /s /q
        shell: cmd
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Errors_scala_tests_windows_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ./**/hs_err_*
          retention-days: 1

  execute_java_tests_unix:
    needs: build_linux
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 17

    runs-on: ${{ matrix.os }}
    env:
      JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_3 }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - uses: actions/setup-dotnet@v4
        if: matrix.framework == 'net9.0'
        with:
          dotnet-version: |
            9.x

      - name: Restore ${{ matrix.framework }} JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_linux_bin_${{ matrix.framework }}_${{ github.sha }}

      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v5
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare extra argument
        if: matrix.framework == 'net9.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRVersion:9" >> $GITHUB_ENV

      - name: Build Java test source file
        run: javac -cp ./bin/${{ matrix.framework }}/JCOReflector.jar ./tests/jvm/java/src/hierarchy/*.java ./tests/jvm/java/src/mscorlib/*.java ./tests/jvm/java/src/nettest/*.java ./tests/jvm/java/src/refout/*.java

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloNET ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" nettest.HelloNETSocket -server 127.0.0.1 ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true
    
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" nettest.HelloNETSocket -async -server 127.0.0.1 ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true
  
      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: java -cp "./bin/${{ matrix.framework }}/JCOReflector.jar:./tests/jvm/java/src/" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Errors_java_tests_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ./**/hs_err_*
          retention-days: 1

  execute_scala_tests_linux:
    needs: build_linux
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 17

    runs-on: ${{ matrix.os }}
    env:
      JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_3 }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - uses: actions/setup-dotnet@v4
        if: matrix.framework == 'net9.0'
        with:
          dotnet-version: |
            9.x

      - name: Restore JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_linux_bin_${{ matrix.framework }}_${{ github.sha }}

      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v5
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and install Scala package
        run: |
          sudo apt update
          sudo apt-get install unzip
          sudo apt-get install zip
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install scala ${{ env.SCALARELEASE }}

      - name: Prepare extra argument
        if: matrix.framework == 'net9.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRVersion:9" >> $GITHUB_ENV

      - name: Build Scala test source file
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          mkdir ./tests/jvm/scala/output
          scalac -cp "./bin/${{ matrix.framework }}/*" -d ./tests/jvm/scala/output ./tests/jvm/scala/src/main/scala/hierarchy/* ./tests/jvm/scala/src/main/scala/mscorlib/* ./tests/jvm/scala/src/main/scala/nettest/* ./tests/jvm/scala/src/main/scala/refout/*

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNet ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteScalaEventTest == true }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}  
        continue-on-error: true
    
      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket -async ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: source "$HOME/.sdkman/bin/sdkman-init.sh" && scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: rm -rf ./tests/jvm/scala/output

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Errors_java_tests_linux_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ./**/hs_err_*
          retention-days: 1

  execute_scala_tests_mac:
    needs: build_linux
    strategy:
      fail-fast: false
      matrix:
        os: [ 'macos-latest' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle', 'graalvm' ]
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 11
          - jdk_vendor: graalvm
            jdk_version: 17

    runs-on: ${{ matrix.os }}
    env:
      JCOBRIDGE_SCOPEDON: JCOReflector|1.0.0
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_3 }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - uses: actions/setup-dotnet@v4
        if: matrix.framework == 'net9.0'
        with:
          dotnet-version: |
            9.x

      - name: Restore ${{ matrix.framework }} JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_linux_bin_${{ matrix.framework }}_${{ github.sha }}

      - name: Set up JDK distribution
        if: ${{ matrix.jdk_vendor != 'graalvm' }}
        uses: actions/setup-java@v5
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Set up GraalVM distribution
        if: ${{ matrix.jdk_vendor == 'graalvm' }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.jdk_version }}' # See 'Options' for more details
          distribution: 'graalvm' # See 'Supported distributions' for available options
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and install Scala package
        run: brew install scala@2.13

      - name: Export Scala root
        if: matrix.os == 'macos-13'
        run: |
          echo "SCALA_BIN=/usr/local/opt/scala@2.13/bin" >> $GITHUB_ENV
        shell: bash
        
      - name: Export Scala root
        if: matrix.os == 'macos-latest'
        run: |
          echo "SCALA_BIN=/opt/homebrew/opt/scala@2.13/bin" >> $GITHUB_ENV
        shell: bash

      - name: Prepare extra argument
        if: matrix.framework == 'net9.0'
        shell: bash
        run: echo "EXTRA_ARGUMENT=--CoreCLRVersion:9" >> $GITHUB_ENV

      - name: Build Scala test source file
        run: |
          mkdir ./tests/jvm/scala/output
          ${{ env.SCALA_BIN }}/scalac -cp "./bin/${{ matrix.framework }}/*" -d ./tests/jvm/scala/output ./tests/jvm/scala/src/main/scala/hierarchy/* ./tests/jvm/scala/src/main/scala/mscorlib/* ./tests/jvm/scala/src/main/scala/nettest/* ./tests/jvm/scala/src/main/scala/refout/*

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloLock ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNet ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloNETEvent ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteScalaEventTest == true }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" mscorlib.HelloIterator ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloHierarchy ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" hierarchy.HelloInterfaces ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true
    
      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" nettest.HelloNETSocket -async ${{ env.EXTRA_ARGUMENT }}
        if: ${{ inputs.ExecuteSocketTest == true }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOutBase ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: ${{ env.SCALA_BIN }}/scala -nobootcp -toolcp "./bin/${{ matrix.framework }}/*:./tests/jvm/scala/output" refout.HelloRefOut ${{ env.EXTRA_ARGUMENT }}
        continue-on-error: true

      - run: rm -rf ./tests/jvm/scala/output

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Errors_scala_tests_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ./**/hs_err_*
          retention-days: 1

  execute_finalize:
    needs: [execute_java_tests_windows, execute_scala_tests_windows, execute_java_tests_unix, execute_scala_tests_linux, execute_scala_tests_mac]

    runs-on: windows-2022
    steps:

      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with: 
          fetch-depth: '1'

      - name: Restore net462 JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_net462_${{ github.sha }}
   
      - name: Restore net8.0 JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_net8.0_${{ github.sha }}

      - name: Restore net9.0 JCOReflector bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_windows_bin_net9.0_${{ github.sha }}

      # Runs a set of commands using the runners shell
      - name: Build JCOReflectorCLI
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\JCOReflectorCLI.sln

      - run: nuget pack src\net\CLI\JCOReflectorCLI.nuspec -OutputDirectory .\bin

      - name: Restore net462 JCOReflector source from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./src/jvm/net462.md
              ./src/jvm/statistics/net462/
              ./src/jvm/src/net462/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_source_net462_${{ github.sha }}

      - name: Restore net8.0 JCOReflector source from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./src/jvm/net8.0.md
              ./src/jvm/statistics/net8.0/
              ./src/jvm/src/net8.0/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_source_net8.0_${{ github.sha }}

      - name: Restore net9.0 JCOReflector source from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: |
              ./src/jvm/net9.0.md
              ./src/jvm/statistics/net9.0/
              ./src/jvm/src/net9.0/
          key: JCOReflector_${{ github.run_number }}_${{ github.run_attempt }}_source_net9.0_${{ github.sha }}

      - name: Compress release files
        run: |
          Compress-Archive -Path .\bin\net8.0\* -DestinationPath .\bin\net8.0.zip
          Compress-Archive -Path .\bin\net9.0\* -DestinationPath .\bin\net9.0.zip
          Compress-Archive -Path .\bin\net462\* -DestinationPath .\bin\net462.zip

      - name: Extract commit SHA
        if: ${{ inputs.GeneratePR == true }}
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
        shell: bash

      - name: Request a PR to commit changes
        if: ${{ inputs.GeneratePR == true }}
        uses: peter-evans/create-pull-request@v7
        with:
          branch-suffix: short-commit-hash
          add-paths: |
            .\src\jvm\statistics\*.*
            .\src\jvm\README.md
            .\src\jvm\src\*.list
            .\src\jvm\src\*.java
          commit-message: Update JVM after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
          title: Update JVM after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
          body: Automated changes by GitHub action
          reviewers: masesdevelopers
          assignees: masesdevelopers
          labels: enhancement, java, .NET Framework, .NET 8, .NET 9

     # - name: Commit statistics changes
     #   if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
     #   uses: EndBug/add-and-commit@v9
     #   with:
     #     author_name: github-actions
     #     author_email: 41898282+github-actions[bot]@users.noreply.github.com
     #     add: '.\src\jvm\statistics\*.*'
     #     message: Update statistics after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
     #   env:
     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #     
     # - name: Commit report changes
     #   if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
     #   uses: EndBug/add-and-commit@v9
     #   with:
     #     author_name: github-actions
     #     author_email: 41898282+github-actions[bot]@users.noreply.github.com
     #     add: '.\src\jvm\README.md'
     #     message: Update README.md after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
     #   env:
     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #
     # - name: Commit source changes
     #   if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
     #   uses: EndBug/add-and-commit@v9
     #   with:
     #     author_name: github-actions
     #     author_email: 41898282+github-actions[bot]@users.noreply.github.com
     #     add: '.\src\jvm\src\*.list'
     #     message: Update assembly list after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
     #   env:
     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #
     # - name: Commit source changes
     #   if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
     #   uses: EndBug/add-and-commit@v9
     #   with:
     #     author_name: github-actions
     #     author_email: 41898282+github-actions[bot]@users.noreply.github.com
     #     add: '.\src\jvm\src\*.java'
     #     message: Update sources after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
     #   env:
     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v4
        with:
          name: JCOReflectorNuGet
          path: .\bin\*nupkg

      - uses: actions/upload-artifact@v4
        with:
          name: net8.0
          path: .\bin\net8.0.zip

      - uses: actions/upload-artifact@v4
        with:
          name: net9.0
          path: .\bin\net9.0.zip
        
      - uses: actions/upload-artifact@v4
        with:
          name: net462
          path: .\bin\net462.zip

  final_cleanup:
    needs: [ execute_finalize ]
    if: "always()"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'

      - name: Clear caches
        run: |
          gh extension install actions/gh-actions-cache
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list --key JCOReflector_${{ github.run_number }}_${{ github.run_attempt }} | cut -f 1 )
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
