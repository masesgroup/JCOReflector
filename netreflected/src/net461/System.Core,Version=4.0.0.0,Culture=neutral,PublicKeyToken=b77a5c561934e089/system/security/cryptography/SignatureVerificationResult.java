/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.cryptography;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing System.Security.Cryptography.SignatureVerificationResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Security.Cryptography.SignatureVerificationResult" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Security.Cryptography.SignatureVerificationResult</a>
 */
public class SignatureVerificationResult extends NetObject  {
    /**
     * Fully assembly qualified name: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.Core
     */
    public static final String assemblyShortName = "System.Core";
    /**
     * Qualified class name: System.Security.Cryptography.SignatureVerificationResult
     */
    public static final String className = "System.Security.Cryptography.SignatureVerificationResult";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SignatureVerificationResult(Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public SignatureVerificationResult() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static SignatureVerificationResult getFrom(JCEnum object, String value) {
        try {
            return new SignatureVerificationResult(object.fromValue(value));
        } catch (JCException e) {
            return new SignatureVerificationResult(object);
        }
    }

    // Enum fields section
    
    public static SignatureVerificationResult Valid = getFrom(enumReflected, "Valid");
    public static SignatureVerificationResult AssemblyIdentityMismatch = getFrom(enumReflected, "AssemblyIdentityMismatch");
    public static SignatureVerificationResult ContainingSignatureInvalid = getFrom(enumReflected, "ContainingSignatureInvalid");
    public static SignatureVerificationResult PublicKeyTokenMismatch = getFrom(enumReflected, "PublicKeyTokenMismatch");
    public static SignatureVerificationResult PublisherMismatch = getFrom(enumReflected, "PublisherMismatch");
    public static SignatureVerificationResult SystemError = getFrom(enumReflected, "SystemError");
    public static SignatureVerificationResult InvalidSignerCertificate = getFrom(enumReflected, "InvalidSignerCertificate");
    public static SignatureVerificationResult InvalidCountersignature = getFrom(enumReflected, "InvalidCountersignature");
    public static SignatureVerificationResult InvalidCertificateSignature = getFrom(enumReflected, "InvalidCertificateSignature");
    public static SignatureVerificationResult InvalidTimestamp = getFrom(enumReflected, "InvalidTimestamp");
    public static SignatureVerificationResult BadDigest = getFrom(enumReflected, "BadDigest");
    public static SignatureVerificationResult BasicConstraintsNotObserved = getFrom(enumReflected, "BasicConstraintsNotObserved");
    public static SignatureVerificationResult UnknownTrustProvider = getFrom(enumReflected, "UnknownTrustProvider");
    public static SignatureVerificationResult UnknownVerificationAction = getFrom(enumReflected, "UnknownVerificationAction");
    public static SignatureVerificationResult BadSignatureFormat = getFrom(enumReflected, "BadSignatureFormat");
    public static SignatureVerificationResult CertificateNotExplicitlyTrusted = getFrom(enumReflected, "CertificateNotExplicitlyTrusted");
    public static SignatureVerificationResult MissingSignature = getFrom(enumReflected, "MissingSignature");
    public static SignatureVerificationResult CertificateExpired = getFrom(enumReflected, "CertificateExpired");
    public static SignatureVerificationResult InvalidTimePeriodNesting = getFrom(enumReflected, "InvalidTimePeriodNesting");
    public static SignatureVerificationResult InvalidCertificateRole = getFrom(enumReflected, "InvalidCertificateRole");
    public static SignatureVerificationResult PathLengthConstraintViolated = getFrom(enumReflected, "PathLengthConstraintViolated");
    public static SignatureVerificationResult UnknownCriticalExtension = getFrom(enumReflected, "UnknownCriticalExtension");
    public static SignatureVerificationResult CertificateUsageNotAllowed = getFrom(enumReflected, "CertificateUsageNotAllowed");
    public static SignatureVerificationResult IssuerChainingError = getFrom(enumReflected, "IssuerChainingError");
    public static SignatureVerificationResult CertificateMalformed = getFrom(enumReflected, "CertificateMalformed");
    public static SignatureVerificationResult UntrustedRootCertificate = getFrom(enumReflected, "UntrustedRootCertificate");
    public static SignatureVerificationResult CouldNotBuildChain = getFrom(enumReflected, "CouldNotBuildChain");
    public static SignatureVerificationResult GenericTrustFailure = getFrom(enumReflected, "GenericTrustFailure");
    public static SignatureVerificationResult CertificateRevoked = getFrom(enumReflected, "CertificateRevoked");
    public static SignatureVerificationResult UntrustedTestRootCertificate = getFrom(enumReflected, "UntrustedTestRootCertificate");
    public static SignatureVerificationResult RevocationCheckFailure = getFrom(enumReflected, "RevocationCheckFailure");
    public static SignatureVerificationResult InvalidCertificateUsage = getFrom(enumReflected, "InvalidCertificateUsage");
    public static SignatureVerificationResult CertificateExplicitlyDistrusted = getFrom(enumReflected, "CertificateExplicitlyDistrusted");
    public static SignatureVerificationResult UntrustedCertificationAuthority = getFrom(enumReflected, "UntrustedCertificationAuthority");
    public static SignatureVerificationResult InvalidCertificatePolicy = getFrom(enumReflected, "InvalidCertificatePolicy");
    public static SignatureVerificationResult InvalidCertificateName = getFrom(enumReflected, "InvalidCertificateName");


    // Flags management section


}