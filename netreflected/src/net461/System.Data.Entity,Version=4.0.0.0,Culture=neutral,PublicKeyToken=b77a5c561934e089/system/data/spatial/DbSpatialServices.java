/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.data.spatial;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.spatial.DbGeometry;
import system.data.spatial.DbGeography;
import system.data.spatial.DbGeographyWellKnownValue;
import system.data.spatial.DbGeometryWellKnownValue;
import system.data.spatial.DbSpatialServices;


/**
 * The base .NET class managing System.Data.Spatial.DbSpatialServices, System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Data.Spatial.DbSpatialServices" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Data.Spatial.DbSpatialServices</a>
 */
public class DbSpatialServices extends NetObject  {
    /**
     * Fully assembly qualified name: System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.Data.Entity
     */
    public static final String assemblyShortName = "System.Data.Entity";
    /**
     * Qualified class name: System.Data.Spatial.DbSpatialServices
     */
    public static final String className = "System.Data.Spatial.DbSpatialServices";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbSpatialServices(Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link DbSpatialServices}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link DbSpatialServices} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static DbSpatialServices cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new DbSpatialServices(from.getJCOInstance());
    }

    // Constructors section
    
    public DbSpatialServices() throws Throwable {
    }

    
    // Methods section
    
    public boolean Contains(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Contains", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Crosses(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Crosses", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Disjoint(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Disjoint", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Disjoint", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean GetIsEmpty(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("GetIsEmpty", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean GetIsEmpty(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("GetIsEmpty", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean GetIsSimple(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("GetIsSimple", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean GetIsValid(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("GetIsValid", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Intersects(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Intersects", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Intersects(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Intersects", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Overlaps", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Relate(DbGeometry geometryValue, DbGeometry otherGeometry, java.lang.String matrix) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Relate", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance(), matrix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SpatialEquals(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("SpatialEquals", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("SpatialEquals", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Touches(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Touches", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Within(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Within", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] AsBinary(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("AsBinary", geographyValue == null ? null : geographyValue.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexAsBinary = 0; indexAsBinary < resultingArrayList.size(); indexAsBinary++ ) {
				resultingArray[indexAsBinary] = (byte)resultingArrayList.get(indexAsBinary);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] AsBinary(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("AsBinary", geometryValue == null ? null : geometryValue.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexAsBinary = 0; indexAsBinary < resultingArrayList.size(); indexAsBinary++ ) {
				resultingArray[indexAsBinary] = (byte)resultingArrayList.get(indexAsBinary);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double Distance(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("Distance", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double Distance(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("Distance", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetCoordinateSystemId(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetCoordinateSystemId", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetCoordinateSystemId(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetCoordinateSystemId", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetDimension(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetDimension", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetDimension(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetDimension", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography Buffer(DbGeography geographyValue, double distance) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", geographyValue == null ? null : geographyValue.getJCOInstance(), distance);
            return new DbGeography(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDifference = (JCObject)classInstance.Invoke("Difference", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
            return new DbGeography(objDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography ElementAt(DbGeography geographyValue, int index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objElementAt = (JCObject)classInstance.Invoke("ElementAt", geographyValue == null ? null : geographyValue.getJCOInstance(), index);
            return new DbGeography(objElementAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyCollectionFromBinary(byte[] geographyCollectionWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyCollectionFromBinary = (JCObject)classInstance.Invoke("GeographyCollectionFromBinary", geographyCollectionWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyCollectionFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyCollectionFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyCollectionFromBinary = (JCObject)classInstance.Invoke("GeographyCollectionFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyCollectionFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyCollectionFromText(java.lang.String geographyCollectionWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyCollectionFromText = (JCObject)classInstance.Invoke("GeographyCollectionFromText", geographyCollectionWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyCollectionFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromBinary(byte[] wellKnownBinary) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromBinary = (JCObject)classInstance.Invoke("GeographyFromBinary", (Object)wellKnownBinary);
            return new DbGeography(objGeographyFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromBinary(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromBinary = (JCObject)classInstance.Invoke("GeographyFromBinary", (Object)dupParam0.getJCRefOut());
            return new DbGeography(objGeographyFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromBinary(byte[] wellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromBinary = (JCObject)classInstance.Invoke("GeographyFromBinary", wellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromBinary = (JCObject)classInstance.Invoke("GeographyFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromGml(java.lang.String geographyMarkup) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromGml = (JCObject)classInstance.Invoke("GeographyFromGml", geographyMarkup);
            return new DbGeography(objGeographyFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromGml(java.lang.String geographyMarkup, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromGml = (JCObject)classInstance.Invoke("GeographyFromGml", geographyMarkup, coordinateSystemId);
            return new DbGeography(objGeographyFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromProviderValue(NetObject providerValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromProviderValue = (JCObject)classInstance.Invoke("GeographyFromProviderValue", providerValue == null ? null : providerValue.getJCOInstance());
            return new DbGeography(objGeographyFromProviderValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromText(java.lang.String wellKnownText) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromText = (JCObject)classInstance.Invoke("GeographyFromText", wellKnownText);
            return new DbGeography(objGeographyFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyFromText(java.lang.String wellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyFromText = (JCObject)classInstance.Invoke("GeographyFromText", wellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyLineFromBinary(byte[] lineWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyLineFromBinary = (JCObject)classInstance.Invoke("GeographyLineFromBinary", lineWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyLineFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyLineFromBinary = (JCObject)classInstance.Invoke("GeographyLineFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyLineFromText(java.lang.String lineWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyLineFromText = (JCObject)classInstance.Invoke("GeographyLineFromText", lineWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiLineFromBinary(byte[] multiLineWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiLineFromBinary = (JCObject)classInstance.Invoke("GeographyMultiLineFromBinary", multiLineWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyMultiLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiLineFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiLineFromBinary = (JCObject)classInstance.Invoke("GeographyMultiLineFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyMultiLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiLineFromText(java.lang.String multiLineWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiLineFromText = (JCObject)classInstance.Invoke("GeographyMultiLineFromText", multiLineWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyMultiLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPointFromBinary(byte[] multiPointWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPointFromBinary = (JCObject)classInstance.Invoke("GeographyMultiPointFromBinary", multiPointWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyMultiPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPointFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPointFromBinary = (JCObject)classInstance.Invoke("GeographyMultiPointFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyMultiPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPointFromText(java.lang.String multiPointWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPointFromText = (JCObject)classInstance.Invoke("GeographyMultiPointFromText", multiPointWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyMultiPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPolygonFromBinary(byte[] multiPolygonWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPolygonFromBinary = (JCObject)classInstance.Invoke("GeographyMultiPolygonFromBinary", multiPolygonWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyMultiPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPolygonFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPolygonFromBinary = (JCObject)classInstance.Invoke("GeographyMultiPolygonFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyMultiPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyMultiPolygonFromText(java.lang.String multiPolygonWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyMultiPolygonFromText = (JCObject)classInstance.Invoke("GeographyMultiPolygonFromText", multiPolygonWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyMultiPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPointFromBinary(byte[] pointWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPointFromBinary = (JCObject)classInstance.Invoke("GeographyPointFromBinary", pointWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPointFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPointFromBinary = (JCObject)classInstance.Invoke("GeographyPointFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPointFromText(java.lang.String pointWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPointFromText = (JCObject)classInstance.Invoke("GeographyPointFromText", pointWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPolygonFromBinary(byte[] polygonWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPolygonFromBinary = (JCObject)classInstance.Invoke("GeographyPolygonFromBinary", polygonWellKnownBinary, coordinateSystemId);
            return new DbGeography(objGeographyPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPolygonFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPolygonFromBinary = (JCObject)classInstance.Invoke("GeographyPolygonFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeography(objGeographyPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GeographyPolygonFromText(java.lang.String polygonWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeographyPolygonFromText = (JCObject)classInstance.Invoke("GeographyPolygonFromText", polygonWellKnownText, coordinateSystemId);
            return new DbGeography(objGeographyPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GetEndPoint(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetEndPoint = (JCObject)classInstance.Invoke("GetEndPoint", geographyValue == null ? null : geographyValue.getJCOInstance());
            return new DbGeography(objGetEndPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography GetStartPoint(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetStartPoint = (JCObject)classInstance.Invoke("GetStartPoint", geographyValue == null ? null : geographyValue.getJCOInstance());
            return new DbGeography(objGetStartPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIntersection = (JCObject)classInstance.Invoke("Intersection", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
            return new DbGeography(objIntersection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography PointAt(DbGeography geographyValue, int index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objPointAt = (JCObject)classInstance.Invoke("PointAt", geographyValue == null ? null : geographyValue.getJCOInstance(), index);
            return new DbGeography(objPointAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSymmetricDifference = (JCObject)classInstance.Invoke("SymmetricDifference", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
            return new DbGeography(objSymmetricDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeography Union(DbGeography geographyValue, DbGeography otherGeography) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnion = (JCObject)classInstance.Invoke("Union", geographyValue == null ? null : geographyValue.getJCOInstance(), otherGeography == null ? null : otherGeography.getJCOInstance());
            return new DbGeography(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateWellKnownValue = (JCObject)classInstance.Invoke("CreateWellKnownValue", geographyValue == null ? null : geographyValue.getJCOInstance());
            return new DbGeographyWellKnownValue(objCreateWellKnownValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Buffer(DbGeometry geometryValue, double distance) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", geometryValue == null ? null : geometryValue.getJCOInstance(), distance);
            return new DbGeometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDifference = (JCObject)classInstance.Invoke("Difference", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
            return new DbGeometry(objDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry ElementAt(DbGeometry geometryValue, int index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objElementAt = (JCObject)classInstance.Invoke("ElementAt", geometryValue == null ? null : geometryValue.getJCOInstance(), index);
            return new DbGeometry(objElementAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryCollectionFromBinary(byte[] geometryCollectionWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryCollectionFromBinary = (JCObject)classInstance.Invoke("GeometryCollectionFromBinary", geometryCollectionWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryCollectionFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryCollectionFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryCollectionFromBinary = (JCObject)classInstance.Invoke("GeometryCollectionFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryCollectionFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryCollectionFromText(java.lang.String geometryCollectionWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryCollectionFromText = (JCObject)classInstance.Invoke("GeometryCollectionFromText", geometryCollectionWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryCollectionFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromBinary(byte[] wellKnownBinary) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromBinary = (JCObject)classInstance.Invoke("GeometryFromBinary", (Object)wellKnownBinary);
            return new DbGeometry(objGeometryFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromBinary(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromBinary = (JCObject)classInstance.Invoke("GeometryFromBinary", (Object)dupParam0.getJCRefOut());
            return new DbGeometry(objGeometryFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromBinary(byte[] wellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromBinary = (JCObject)classInstance.Invoke("GeometryFromBinary", wellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromBinary = (JCObject)classInstance.Invoke("GeometryFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromGml(java.lang.String geometryMarkup) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromGml = (JCObject)classInstance.Invoke("GeometryFromGml", geometryMarkup);
            return new DbGeometry(objGeometryFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromGml(java.lang.String geometryMarkup, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromGml = (JCObject)classInstance.Invoke("GeometryFromGml", geometryMarkup, coordinateSystemId);
            return new DbGeometry(objGeometryFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromProviderValue(NetObject providerValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromProviderValue = (JCObject)classInstance.Invoke("GeometryFromProviderValue", providerValue == null ? null : providerValue.getJCOInstance());
            return new DbGeometry(objGeometryFromProviderValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromText(java.lang.String wellKnownText) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromText = (JCObject)classInstance.Invoke("GeometryFromText", wellKnownText);
            return new DbGeometry(objGeometryFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryFromText(java.lang.String wellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryFromText = (JCObject)classInstance.Invoke("GeometryFromText", wellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryLineFromBinary(byte[] lineWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryLineFromBinary = (JCObject)classInstance.Invoke("GeometryLineFromBinary", lineWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryLineFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryLineFromBinary = (JCObject)classInstance.Invoke("GeometryLineFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryLineFromText(java.lang.String lineWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryLineFromText = (JCObject)classInstance.Invoke("GeometryLineFromText", lineWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiLineFromBinary(byte[] multiLineWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiLineFromBinary = (JCObject)classInstance.Invoke("GeometryMultiLineFromBinary", multiLineWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryMultiLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiLineFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiLineFromBinary = (JCObject)classInstance.Invoke("GeometryMultiLineFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryMultiLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiLineFromText(java.lang.String multiLineWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiLineFromText = (JCObject)classInstance.Invoke("GeometryMultiLineFromText", multiLineWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryMultiLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPointFromBinary(byte[] multiPointWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPointFromBinary = (JCObject)classInstance.Invoke("GeometryMultiPointFromBinary", multiPointWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryMultiPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPointFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPointFromBinary = (JCObject)classInstance.Invoke("GeometryMultiPointFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryMultiPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPointFromText(java.lang.String multiPointWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPointFromText = (JCObject)classInstance.Invoke("GeometryMultiPointFromText", multiPointWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryMultiPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPolygonFromBinary(byte[] multiPolygonWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPolygonFromBinary = (JCObject)classInstance.Invoke("GeometryMultiPolygonFromBinary", multiPolygonWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryMultiPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPolygonFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPolygonFromBinary = (JCObject)classInstance.Invoke("GeometryMultiPolygonFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryMultiPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryMultiPolygonFromText(java.lang.String multiPolygonKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryMultiPolygonFromText = (JCObject)classInstance.Invoke("GeometryMultiPolygonFromText", multiPolygonKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryMultiPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPointFromBinary(byte[] pointWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPointFromBinary = (JCObject)classInstance.Invoke("GeometryPointFromBinary", pointWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPointFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPointFromBinary = (JCObject)classInstance.Invoke("GeometryPointFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPointFromText(java.lang.String pointWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPointFromText = (JCObject)classInstance.Invoke("GeometryPointFromText", pointWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPolygonFromBinary(byte[] polygonWellKnownBinary, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPolygonFromBinary = (JCObject)classInstance.Invoke("GeometryPolygonFromBinary", polygonWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPolygonFromBinary(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPolygonFromBinary = (JCObject)classInstance.Invoke("GeometryPolygonFromBinary", dupParam0.getJCRefOut(), dupParam1);
            return new DbGeometry(objGeometryPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GeometryPolygonFromText(java.lang.String polygonWellKnownText, int coordinateSystemId) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGeometryPolygonFromText = (JCObject)classInstance.Invoke("GeometryPolygonFromText", polygonWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetBoundary(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetBoundary = (JCObject)classInstance.Invoke("GetBoundary", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetBoundary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetCentroid(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetCentroid = (JCObject)classInstance.Invoke("GetCentroid", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetCentroid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetConvexHull(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetConvexHull = (JCObject)classInstance.Invoke("GetConvexHull", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetConvexHull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetEndPoint(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetEndPoint = (JCObject)classInstance.Invoke("GetEndPoint", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetEndPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetEnvelope(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetEnvelope = (JCObject)classInstance.Invoke("GetEnvelope", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetEnvelope);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetExteriorRing(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetExteriorRing = (JCObject)classInstance.Invoke("GetExteriorRing", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetExteriorRing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetPointOnSurface(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetPointOnSurface = (JCObject)classInstance.Invoke("GetPointOnSurface", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetPointOnSurface);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry GetStartPoint(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetStartPoint = (JCObject)classInstance.Invoke("GetStartPoint", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometry(objGetStartPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry InteriorRingAt(DbGeometry geometryValue, int index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objInteriorRingAt = (JCObject)classInstance.Invoke("InteriorRingAt", geometryValue == null ? null : geometryValue.getJCOInstance(), index);
            return new DbGeometry(objInteriorRingAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIntersection = (JCObject)classInstance.Invoke("Intersection", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
            return new DbGeometry(objIntersection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry PointAt(DbGeometry geometryValue, int index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objPointAt = (JCObject)classInstance.Invoke("PointAt", geometryValue == null ? null : geometryValue.getJCOInstance(), index);
            return new DbGeometry(objPointAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSymmetricDifference = (JCObject)classInstance.Invoke("SymmetricDifference", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
            return new DbGeometry(objSymmetricDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnion = (JCObject)classInstance.Invoke("Union", geometryValue == null ? null : geometryValue.getJCOInstance(), otherGeometry == null ? null : otherGeometry.getJCOInstance());
            return new DbGeometry(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateWellKnownValue = (JCObject)classInstance.Invoke("CreateWellKnownValue", geometryValue == null ? null : geometryValue.getJCOInstance());
            return new DbGeometryWellKnownValue(objCreateWellKnownValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateProviderValue(DbGeographyWellKnownValue wellKnownValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateProviderValue = (JCObject)classInstance.Invoke("CreateProviderValue", wellKnownValue == null ? null : wellKnownValue.getJCOInstance());
            return new NetObject(objCreateProviderValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateProviderValue(DbGeometryWellKnownValue wellKnownValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateProviderValue = (JCObject)classInstance.Invoke("CreateProviderValue", wellKnownValue == null ? null : wellKnownValue.getJCOInstance());
            return new NetObject(objCreateProviderValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsGml(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsGml", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsGml(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsGml", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsText(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsText", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsText(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsText", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsTextIncludingElevationAndMeasure(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsTextIncludingElevationAndMeasure", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsTextIncludingElevationAndMeasure(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsTextIncludingElevationAndMeasure", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetSpatialTypeName(DbGeography geographyValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("GetSpatialTypeName", geographyValue == null ? null : geographyValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetSpatialTypeName(DbGeometry geometryValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("GetSpatialTypeName", geometryValue == null ? null : geometryValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public static DbSpatialServices getDefault() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("Default");
            return new DbSpatialServices(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}