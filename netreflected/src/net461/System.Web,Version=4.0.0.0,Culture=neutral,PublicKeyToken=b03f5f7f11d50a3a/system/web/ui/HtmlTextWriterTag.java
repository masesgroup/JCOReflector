/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing System.Web.UI.HtmlTextWriterTag, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Web.UI.HtmlTextWriterTag" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Web.UI.HtmlTextWriterTag</a>
 */
public class HtmlTextWriterTag extends NetObject  {
    /**
     * Fully assembly qualified name: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Web
     */
    public static final String assemblyShortName = "System.Web";
    /**
     * Qualified class name: System.Web.UI.HtmlTextWriterTag
     */
    public static final String className = "System.Web.UI.HtmlTextWriterTag";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlTextWriterTag(Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public HtmlTextWriterTag() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static HtmlTextWriterTag getFrom(JCEnum object, String value) {
        try {
            return new HtmlTextWriterTag(object.fromValue(value));
        } catch (JCException e) {
            return new HtmlTextWriterTag(object);
        }
    }

    // Enum fields section
    
    public static HtmlTextWriterTag Unknown = getFrom(enumReflected, "Unknown");
    public static HtmlTextWriterTag A = getFrom(enumReflected, "A");
    public static HtmlTextWriterTag Acronym = getFrom(enumReflected, "Acronym");
    public static HtmlTextWriterTag Address = getFrom(enumReflected, "Address");
    public static HtmlTextWriterTag Area = getFrom(enumReflected, "Area");
    public static HtmlTextWriterTag B = getFrom(enumReflected, "B");
    public static HtmlTextWriterTag Base = getFrom(enumReflected, "Base");
    public static HtmlTextWriterTag Basefont = getFrom(enumReflected, "Basefont");
    public static HtmlTextWriterTag Bdo = getFrom(enumReflected, "Bdo");
    public static HtmlTextWriterTag Bgsound = getFrom(enumReflected, "Bgsound");
    public static HtmlTextWriterTag Big = getFrom(enumReflected, "Big");
    public static HtmlTextWriterTag Blockquote = getFrom(enumReflected, "Blockquote");
    public static HtmlTextWriterTag Body = getFrom(enumReflected, "Body");
    public static HtmlTextWriterTag Br = getFrom(enumReflected, "Br");
    public static HtmlTextWriterTag Button = getFrom(enumReflected, "Button");
    public static HtmlTextWriterTag Caption = getFrom(enumReflected, "Caption");
    public static HtmlTextWriterTag Center = getFrom(enumReflected, "Center");
    public static HtmlTextWriterTag Cite = getFrom(enumReflected, "Cite");
    public static HtmlTextWriterTag Code = getFrom(enumReflected, "Code");
    public static HtmlTextWriterTag Col = getFrom(enumReflected, "Col");
    public static HtmlTextWriterTag Colgroup = getFrom(enumReflected, "Colgroup");
    public static HtmlTextWriterTag Dd = getFrom(enumReflected, "Dd");
    public static HtmlTextWriterTag Del = getFrom(enumReflected, "Del");
    public static HtmlTextWriterTag Dfn = getFrom(enumReflected, "Dfn");
    public static HtmlTextWriterTag Dir = getFrom(enumReflected, "Dir");
    public static HtmlTextWriterTag Div = getFrom(enumReflected, "Div");
    public static HtmlTextWriterTag Dl = getFrom(enumReflected, "Dl");
    public static HtmlTextWriterTag Dt = getFrom(enumReflected, "Dt");
    public static HtmlTextWriterTag Em = getFrom(enumReflected, "Em");
    public static HtmlTextWriterTag Embed = getFrom(enumReflected, "Embed");
    public static HtmlTextWriterTag Fieldset = getFrom(enumReflected, "Fieldset");
    public static HtmlTextWriterTag Font = getFrom(enumReflected, "Font");
    public static HtmlTextWriterTag Form = getFrom(enumReflected, "Form");
    public static HtmlTextWriterTag Frame = getFrom(enumReflected, "Frame");
    public static HtmlTextWriterTag Frameset = getFrom(enumReflected, "Frameset");
    public static HtmlTextWriterTag H1 = getFrom(enumReflected, "H1");
    public static HtmlTextWriterTag H2 = getFrom(enumReflected, "H2");
    public static HtmlTextWriterTag H3 = getFrom(enumReflected, "H3");
    public static HtmlTextWriterTag H4 = getFrom(enumReflected, "H4");
    public static HtmlTextWriterTag H5 = getFrom(enumReflected, "H5");
    public static HtmlTextWriterTag H6 = getFrom(enumReflected, "H6");
    public static HtmlTextWriterTag Head = getFrom(enumReflected, "Head");
    public static HtmlTextWriterTag Hr = getFrom(enumReflected, "Hr");
    public static HtmlTextWriterTag Html = getFrom(enumReflected, "Html");
    public static HtmlTextWriterTag I = getFrom(enumReflected, "I");
    public static HtmlTextWriterTag Iframe = getFrom(enumReflected, "Iframe");
    public static HtmlTextWriterTag Img = getFrom(enumReflected, "Img");
    public static HtmlTextWriterTag Input = getFrom(enumReflected, "Input");
    public static HtmlTextWriterTag Ins = getFrom(enumReflected, "Ins");
    public static HtmlTextWriterTag Isindex = getFrom(enumReflected, "Isindex");
    public static HtmlTextWriterTag Kbd = getFrom(enumReflected, "Kbd");
    public static HtmlTextWriterTag Label = getFrom(enumReflected, "Label");
    public static HtmlTextWriterTag Legend = getFrom(enumReflected, "Legend");
    public static HtmlTextWriterTag Li = getFrom(enumReflected, "Li");
    public static HtmlTextWriterTag Link = getFrom(enumReflected, "Link");
    public static HtmlTextWriterTag Map = getFrom(enumReflected, "Map");
    public static HtmlTextWriterTag Marquee = getFrom(enumReflected, "Marquee");
    public static HtmlTextWriterTag Menu = getFrom(enumReflected, "Menu");
    public static HtmlTextWriterTag Meta = getFrom(enumReflected, "Meta");
    public static HtmlTextWriterTag Nobr = getFrom(enumReflected, "Nobr");
    public static HtmlTextWriterTag Noframes = getFrom(enumReflected, "Noframes");
    public static HtmlTextWriterTag Noscript = getFrom(enumReflected, "Noscript");
    public static HtmlTextWriterTag Object = getFrom(enumReflected, "Object");
    public static HtmlTextWriterTag Ol = getFrom(enumReflected, "Ol");
    public static HtmlTextWriterTag Option = getFrom(enumReflected, "Option");
    public static HtmlTextWriterTag P = getFrom(enumReflected, "P");
    public static HtmlTextWriterTag Param = getFrom(enumReflected, "Param");
    public static HtmlTextWriterTag Pre = getFrom(enumReflected, "Pre");
    public static HtmlTextWriterTag Q = getFrom(enumReflected, "Q");
    public static HtmlTextWriterTag Rt = getFrom(enumReflected, "Rt");
    public static HtmlTextWriterTag Ruby = getFrom(enumReflected, "Ruby");
    public static HtmlTextWriterTag S = getFrom(enumReflected, "S");
    public static HtmlTextWriterTag Samp = getFrom(enumReflected, "Samp");
    public static HtmlTextWriterTag Script = getFrom(enumReflected, "Script");
    public static HtmlTextWriterTag Select = getFrom(enumReflected, "Select");
    public static HtmlTextWriterTag Small = getFrom(enumReflected, "Small");
    public static HtmlTextWriterTag Span = getFrom(enumReflected, "Span");
    public static HtmlTextWriterTag Strike = getFrom(enumReflected, "Strike");
    public static HtmlTextWriterTag Strong = getFrom(enumReflected, "Strong");
    public static HtmlTextWriterTag Style = getFrom(enumReflected, "Style");
    public static HtmlTextWriterTag Sub = getFrom(enumReflected, "Sub");
    public static HtmlTextWriterTag Sup = getFrom(enumReflected, "Sup");
    public static HtmlTextWriterTag Table = getFrom(enumReflected, "Table");
    public static HtmlTextWriterTag Tbody = getFrom(enumReflected, "Tbody");
    public static HtmlTextWriterTag Td = getFrom(enumReflected, "Td");
    public static HtmlTextWriterTag Textarea = getFrom(enumReflected, "Textarea");
    public static HtmlTextWriterTag Tfoot = getFrom(enumReflected, "Tfoot");
    public static HtmlTextWriterTag Th = getFrom(enumReflected, "Th");
    public static HtmlTextWriterTag Thead = getFrom(enumReflected, "Thead");
    public static HtmlTextWriterTag Title = getFrom(enumReflected, "Title");
    public static HtmlTextWriterTag Tr = getFrom(enumReflected, "Tr");
    public static HtmlTextWriterTag Tt = getFrom(enumReflected, "Tt");
    public static HtmlTextWriterTag U = getFrom(enumReflected, "U");
    public static HtmlTextWriterTag Ul = getFrom(enumReflected, "Ul");
    public static HtmlTextWriterTag Var = getFrom(enumReflected, "Var");
    public static HtmlTextWriterTag Wbr = getFrom(enumReflected, "Wbr");
    public static HtmlTextWriterTag Xml = getFrom(enumReflected, "Xml");


    // Flags management section


}