/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.jscript.vsa;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing Microsoft.JScript.Vsa.JSVsaError, Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.JScript.Vsa.JSVsaError" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.JScript.Vsa.JSVsaError</a>
 */
public class JSVsaError extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: Microsoft.JScript
     */
    public static final String assemblyShortName = "Microsoft.JScript";
    /**
     * Qualified class name: Microsoft.JScript.Vsa.JSVsaError
     */
    public static final String className = "Microsoft.JScript.Vsa.JSVsaError";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public JSVsaError(Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public JSVsaError() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static JSVsaError getFrom(JCEnum object, String value) {
        try {
            return new JSVsaError(object.fromValue(value));
        } catch (JCException e) {
            return new JSVsaError(object);
        }
    }

    // Enum fields section
    
    public static JSVsaError AppDomainCannotBeSet = getFrom(enumReflected, "AppDomainCannotBeSet");
    public static JSVsaError AppDomainInvalid = getFrom(enumReflected, "AppDomainInvalid");
    public static JSVsaError ApplicationBaseCannotBeSet = getFrom(enumReflected, "ApplicationBaseCannotBeSet");
    public static JSVsaError ApplicationBaseInvalid = getFrom(enumReflected, "ApplicationBaseInvalid");
    public static JSVsaError AssemblyExpected = getFrom(enumReflected, "AssemblyExpected");
    public static JSVsaError AssemblyNameInvalid = getFrom(enumReflected, "AssemblyNameInvalid");
    public static JSVsaError BadAssembly = getFrom(enumReflected, "BadAssembly");
    public static JSVsaError CachedAssemblyInvalid = getFrom(enumReflected, "CachedAssemblyInvalid");
    public static JSVsaError CallbackUnexpected = getFrom(enumReflected, "CallbackUnexpected");
    public static JSVsaError CodeDOMNotAvailable = getFrom(enumReflected, "CodeDOMNotAvailable");
    public static JSVsaError CompiledStateNotFound = getFrom(enumReflected, "CompiledStateNotFound");
    public static JSVsaError DebugInfoNotSupported = getFrom(enumReflected, "DebugInfoNotSupported");
    public static JSVsaError ElementNameInvalid = getFrom(enumReflected, "ElementNameInvalid");
    public static JSVsaError ElementNotFound = getFrom(enumReflected, "ElementNotFound");
    public static JSVsaError EngineBusy = getFrom(enumReflected, "EngineBusy");
    public static JSVsaError EngineCannotClose = getFrom(enumReflected, "EngineCannotClose");
    public static JSVsaError EngineCannotReset = getFrom(enumReflected, "EngineCannotReset");
    public static JSVsaError EngineClosed = getFrom(enumReflected, "EngineClosed");
    public static JSVsaError EngineEmpty = getFrom(enumReflected, "EngineEmpty");
    public static JSVsaError EngineInitialized = getFrom(enumReflected, "EngineInitialized");
    public static JSVsaError EngineNameInUse = getFrom(enumReflected, "EngineNameInUse");
    public static JSVsaError EngineNotCompiled = getFrom(enumReflected, "EngineNotCompiled");
    public static JSVsaError EngineNotInitialized = getFrom(enumReflected, "EngineNotInitialized");
    public static JSVsaError EngineNotRunning = getFrom(enumReflected, "EngineNotRunning");
    public static JSVsaError EngineRunning = getFrom(enumReflected, "EngineRunning");
    public static JSVsaError EventSourceInvalid = getFrom(enumReflected, "EventSourceInvalid");
    public static JSVsaError EventSourceNameInUse = getFrom(enumReflected, "EventSourceNameInUse");
    public static JSVsaError EventSourceNameInvalid = getFrom(enumReflected, "EventSourceNameInvalid");
    public static JSVsaError EventSourceNotFound = getFrom(enumReflected, "EventSourceNotFound");
    public static JSVsaError EventSourceTypeInvalid = getFrom(enumReflected, "EventSourceTypeInvalid");
    public static JSVsaError GetCompiledStateFailed = getFrom(enumReflected, "GetCompiledStateFailed");
    public static JSVsaError GlobalInstanceInvalid = getFrom(enumReflected, "GlobalInstanceInvalid");
    public static JSVsaError GlobalInstanceTypeInvalid = getFrom(enumReflected, "GlobalInstanceTypeInvalid");
    public static JSVsaError InternalCompilerError = getFrom(enumReflected, "InternalCompilerError");
    public static JSVsaError ItemCannotBeRemoved = getFrom(enumReflected, "ItemCannotBeRemoved");
    public static JSVsaError ItemFlagNotSupported = getFrom(enumReflected, "ItemFlagNotSupported");
    public static JSVsaError ItemNameInUse = getFrom(enumReflected, "ItemNameInUse");
    public static JSVsaError ItemNameInvalid = getFrom(enumReflected, "ItemNameInvalid");
    public static JSVsaError ItemNotFound = getFrom(enumReflected, "ItemNotFound");
    public static JSVsaError ItemTypeNotSupported = getFrom(enumReflected, "ItemTypeNotSupported");
    public static JSVsaError LCIDNotSupported = getFrom(enumReflected, "LCIDNotSupported");
    public static JSVsaError LoadElementFailed = getFrom(enumReflected, "LoadElementFailed");
    public static JSVsaError NotificationInvalid = getFrom(enumReflected, "NotificationInvalid");
    public static JSVsaError OptionInvalid = getFrom(enumReflected, "OptionInvalid");
    public static JSVsaError OptionNotSupported = getFrom(enumReflected, "OptionNotSupported");
    public static JSVsaError RevokeFailed = getFrom(enumReflected, "RevokeFailed");
    public static JSVsaError RootMonikerAlreadySet = getFrom(enumReflected, "RootMonikerAlreadySet");
    public static JSVsaError RootMonikerInUse = getFrom(enumReflected, "RootMonikerInUse");
    public static JSVsaError RootMonikerInvalid = getFrom(enumReflected, "RootMonikerInvalid");
    public static JSVsaError RootMonikerNotSet = getFrom(enumReflected, "RootMonikerNotSet");
    public static JSVsaError RootMonikerProtocolInvalid = getFrom(enumReflected, "RootMonikerProtocolInvalid");
    public static JSVsaError RootNamespaceInvalid = getFrom(enumReflected, "RootNamespaceInvalid");
    public static JSVsaError RootNamespaceNotSet = getFrom(enumReflected, "RootNamespaceNotSet");
    public static JSVsaError SaveCompiledStateFailed = getFrom(enumReflected, "SaveCompiledStateFailed");
    public static JSVsaError SaveElementFailed = getFrom(enumReflected, "SaveElementFailed");
    public static JSVsaError SiteAlreadySet = getFrom(enumReflected, "SiteAlreadySet");
    public static JSVsaError SiteInvalid = getFrom(enumReflected, "SiteInvalid");
    public static JSVsaError SiteNotSet = getFrom(enumReflected, "SiteNotSet");
    public static JSVsaError SourceItemNotAvailable = getFrom(enumReflected, "SourceItemNotAvailable");
    public static JSVsaError SourceMonikerNotAvailable = getFrom(enumReflected, "SourceMonikerNotAvailable");
    public static JSVsaError URLInvalid = getFrom(enumReflected, "URLInvalid");
    public static JSVsaError BrowserNotExist = getFrom(enumReflected, "BrowserNotExist");
    public static JSVsaError DebuggeeNotStarted = getFrom(enumReflected, "DebuggeeNotStarted");
    public static JSVsaError EngineNameInvalid = getFrom(enumReflected, "EngineNameInvalid");
    public static JSVsaError EngineNotExist = getFrom(enumReflected, "EngineNotExist");
    public static JSVsaError FileFormatUnsupported = getFrom(enumReflected, "FileFormatUnsupported");
    public static JSVsaError FileTypeUnknown = getFrom(enumReflected, "FileTypeUnknown");
    public static JSVsaError ItemCannotBeRenamed = getFrom(enumReflected, "ItemCannotBeRenamed");
    public static JSVsaError MissingSource = getFrom(enumReflected, "MissingSource");
    public static JSVsaError NotInitCompleted = getFrom(enumReflected, "NotInitCompleted");
    public static JSVsaError NameTooLong = getFrom(enumReflected, "NameTooLong");
    public static JSVsaError ProcNameInUse = getFrom(enumReflected, "ProcNameInUse");
    public static JSVsaError ProcNameInvalid = getFrom(enumReflected, "ProcNameInvalid");
    public static JSVsaError VsaServerDown = getFrom(enumReflected, "VsaServerDown");
    public static JSVsaError MissingPdb = getFrom(enumReflected, "MissingPdb");
    public static JSVsaError NotClientSideAndNoUrl = getFrom(enumReflected, "NotClientSideAndNoUrl");
    public static JSVsaError CannotAttachToWebServer = getFrom(enumReflected, "CannotAttachToWebServer");
    public static JSVsaError EngineNameNotSet = getFrom(enumReflected, "EngineNameNotSet");
    public static JSVsaError UnknownError = getFrom(enumReflected, "UnknownError");


    // Flags management section


}