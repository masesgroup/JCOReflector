/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.drawing.imaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing System.Drawing.Imaging.EmfPlusRecordType, System.Drawing.Common, Version=5.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.EmfPlusRecordType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.EmfPlusRecordType</a>
 */
public class EmfPlusRecordType extends NetObject  {
    /**
     * Fully assembly qualified name: System.Drawing.Common, Version=5.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
     */
    public static final String assemblyFullName = "System.Drawing.Common, Version=5.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
    /**
     * Assembly name: System.Drawing.Common
     */
    public static final String assemblyShortName = "System.Drawing.Common";
    /**
     * Qualified class name: System.Drawing.Imaging.EmfPlusRecordType
     */
    public static final String className = "System.Drawing.Imaging.EmfPlusRecordType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EmfPlusRecordType(Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public EmfPlusRecordType() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static EmfPlusRecordType getFrom(JCEnum object, String value) {
        try {
            return new EmfPlusRecordType(object.fromValue(value));
        } catch (JCException e) {
            return new EmfPlusRecordType(object);
        }
    }

    // Enum fields section
    
    public static EmfPlusRecordType EmfMin = getFrom(enumReflected, "EmfMin");
    public static EmfPlusRecordType EmfHeader = getFrom(enumReflected, "EmfHeader");
    public static EmfPlusRecordType EmfPolyBezier = getFrom(enumReflected, "EmfPolyBezier");
    public static EmfPlusRecordType EmfPolygon = getFrom(enumReflected, "EmfPolygon");
    public static EmfPlusRecordType EmfPolyline = getFrom(enumReflected, "EmfPolyline");
    public static EmfPlusRecordType EmfPolyBezierTo = getFrom(enumReflected, "EmfPolyBezierTo");
    public static EmfPlusRecordType EmfPolyLineTo = getFrom(enumReflected, "EmfPolyLineTo");
    public static EmfPlusRecordType EmfPolyPolyline = getFrom(enumReflected, "EmfPolyPolyline");
    public static EmfPlusRecordType EmfPolyPolygon = getFrom(enumReflected, "EmfPolyPolygon");
    public static EmfPlusRecordType EmfSetWindowExtEx = getFrom(enumReflected, "EmfSetWindowExtEx");
    public static EmfPlusRecordType EmfSetWindowOrgEx = getFrom(enumReflected, "EmfSetWindowOrgEx");
    public static EmfPlusRecordType EmfSetViewportExtEx = getFrom(enumReflected, "EmfSetViewportExtEx");
    public static EmfPlusRecordType EmfSetViewportOrgEx = getFrom(enumReflected, "EmfSetViewportOrgEx");
    public static EmfPlusRecordType EmfSetBrushOrgEx = getFrom(enumReflected, "EmfSetBrushOrgEx");
    public static EmfPlusRecordType EmfEof = getFrom(enumReflected, "EmfEof");
    public static EmfPlusRecordType EmfSetPixelV = getFrom(enumReflected, "EmfSetPixelV");
    public static EmfPlusRecordType EmfSetMapperFlags = getFrom(enumReflected, "EmfSetMapperFlags");
    public static EmfPlusRecordType EmfSetMapMode = getFrom(enumReflected, "EmfSetMapMode");
    public static EmfPlusRecordType EmfSetBkMode = getFrom(enumReflected, "EmfSetBkMode");
    public static EmfPlusRecordType EmfSetPolyFillMode = getFrom(enumReflected, "EmfSetPolyFillMode");
    public static EmfPlusRecordType EmfSetROP2 = getFrom(enumReflected, "EmfSetROP2");
    public static EmfPlusRecordType EmfSetStretchBltMode = getFrom(enumReflected, "EmfSetStretchBltMode");
    public static EmfPlusRecordType EmfSetTextAlign = getFrom(enumReflected, "EmfSetTextAlign");
    public static EmfPlusRecordType EmfSetColorAdjustment = getFrom(enumReflected, "EmfSetColorAdjustment");
    public static EmfPlusRecordType EmfSetTextColor = getFrom(enumReflected, "EmfSetTextColor");
    public static EmfPlusRecordType EmfSetBkColor = getFrom(enumReflected, "EmfSetBkColor");
    public static EmfPlusRecordType EmfOffsetClipRgn = getFrom(enumReflected, "EmfOffsetClipRgn");
    public static EmfPlusRecordType EmfMoveToEx = getFrom(enumReflected, "EmfMoveToEx");
    public static EmfPlusRecordType EmfSetMetaRgn = getFrom(enumReflected, "EmfSetMetaRgn");
    public static EmfPlusRecordType EmfExcludeClipRect = getFrom(enumReflected, "EmfExcludeClipRect");
    public static EmfPlusRecordType EmfIntersectClipRect = getFrom(enumReflected, "EmfIntersectClipRect");
    public static EmfPlusRecordType EmfScaleViewportExtEx = getFrom(enumReflected, "EmfScaleViewportExtEx");
    public static EmfPlusRecordType EmfScaleWindowExtEx = getFrom(enumReflected, "EmfScaleWindowExtEx");
    public static EmfPlusRecordType EmfSaveDC = getFrom(enumReflected, "EmfSaveDC");
    public static EmfPlusRecordType EmfRestoreDC = getFrom(enumReflected, "EmfRestoreDC");
    public static EmfPlusRecordType EmfSetWorldTransform = getFrom(enumReflected, "EmfSetWorldTransform");
    public static EmfPlusRecordType EmfModifyWorldTransform = getFrom(enumReflected, "EmfModifyWorldTransform");
    public static EmfPlusRecordType EmfSelectObject = getFrom(enumReflected, "EmfSelectObject");
    public static EmfPlusRecordType EmfCreatePen = getFrom(enumReflected, "EmfCreatePen");
    public static EmfPlusRecordType EmfCreateBrushIndirect = getFrom(enumReflected, "EmfCreateBrushIndirect");
    public static EmfPlusRecordType EmfDeleteObject = getFrom(enumReflected, "EmfDeleteObject");
    public static EmfPlusRecordType EmfAngleArc = getFrom(enumReflected, "EmfAngleArc");
    public static EmfPlusRecordType EmfEllipse = getFrom(enumReflected, "EmfEllipse");
    public static EmfPlusRecordType EmfRectangle = getFrom(enumReflected, "EmfRectangle");
    public static EmfPlusRecordType EmfRoundRect = getFrom(enumReflected, "EmfRoundRect");
    public static EmfPlusRecordType EmfRoundArc = getFrom(enumReflected, "EmfRoundArc");
    public static EmfPlusRecordType EmfChord = getFrom(enumReflected, "EmfChord");
    public static EmfPlusRecordType EmfPie = getFrom(enumReflected, "EmfPie");
    public static EmfPlusRecordType EmfSelectPalette = getFrom(enumReflected, "EmfSelectPalette");
    public static EmfPlusRecordType EmfCreatePalette = getFrom(enumReflected, "EmfCreatePalette");
    public static EmfPlusRecordType EmfSetPaletteEntries = getFrom(enumReflected, "EmfSetPaletteEntries");
    public static EmfPlusRecordType EmfResizePalette = getFrom(enumReflected, "EmfResizePalette");
    public static EmfPlusRecordType EmfRealizePalette = getFrom(enumReflected, "EmfRealizePalette");
    public static EmfPlusRecordType EmfExtFloodFill = getFrom(enumReflected, "EmfExtFloodFill");
    public static EmfPlusRecordType EmfLineTo = getFrom(enumReflected, "EmfLineTo");
    public static EmfPlusRecordType EmfArcTo = getFrom(enumReflected, "EmfArcTo");
    public static EmfPlusRecordType EmfPolyDraw = getFrom(enumReflected, "EmfPolyDraw");
    public static EmfPlusRecordType EmfSetArcDirection = getFrom(enumReflected, "EmfSetArcDirection");
    public static EmfPlusRecordType EmfSetMiterLimit = getFrom(enumReflected, "EmfSetMiterLimit");
    public static EmfPlusRecordType EmfBeginPath = getFrom(enumReflected, "EmfBeginPath");
    public static EmfPlusRecordType EmfEndPath = getFrom(enumReflected, "EmfEndPath");
    public static EmfPlusRecordType EmfCloseFigure = getFrom(enumReflected, "EmfCloseFigure");
    public static EmfPlusRecordType EmfFillPath = getFrom(enumReflected, "EmfFillPath");
    public static EmfPlusRecordType EmfStrokeAndFillPath = getFrom(enumReflected, "EmfStrokeAndFillPath");
    public static EmfPlusRecordType EmfStrokePath = getFrom(enumReflected, "EmfStrokePath");
    public static EmfPlusRecordType EmfFlattenPath = getFrom(enumReflected, "EmfFlattenPath");
    public static EmfPlusRecordType EmfWidenPath = getFrom(enumReflected, "EmfWidenPath");
    public static EmfPlusRecordType EmfSelectClipPath = getFrom(enumReflected, "EmfSelectClipPath");
    public static EmfPlusRecordType EmfAbortPath = getFrom(enumReflected, "EmfAbortPath");
    public static EmfPlusRecordType EmfReserved069 = getFrom(enumReflected, "EmfReserved069");
    public static EmfPlusRecordType EmfGdiComment = getFrom(enumReflected, "EmfGdiComment");
    public static EmfPlusRecordType EmfFillRgn = getFrom(enumReflected, "EmfFillRgn");
    public static EmfPlusRecordType EmfFrameRgn = getFrom(enumReflected, "EmfFrameRgn");
    public static EmfPlusRecordType EmfInvertRgn = getFrom(enumReflected, "EmfInvertRgn");
    public static EmfPlusRecordType EmfPaintRgn = getFrom(enumReflected, "EmfPaintRgn");
    public static EmfPlusRecordType EmfExtSelectClipRgn = getFrom(enumReflected, "EmfExtSelectClipRgn");
    public static EmfPlusRecordType EmfBitBlt = getFrom(enumReflected, "EmfBitBlt");
    public static EmfPlusRecordType EmfStretchBlt = getFrom(enumReflected, "EmfStretchBlt");
    public static EmfPlusRecordType EmfMaskBlt = getFrom(enumReflected, "EmfMaskBlt");
    public static EmfPlusRecordType EmfPlgBlt = getFrom(enumReflected, "EmfPlgBlt");
    public static EmfPlusRecordType EmfSetDIBitsToDevice = getFrom(enumReflected, "EmfSetDIBitsToDevice");
    public static EmfPlusRecordType EmfStretchDIBits = getFrom(enumReflected, "EmfStretchDIBits");
    public static EmfPlusRecordType EmfExtCreateFontIndirect = getFrom(enumReflected, "EmfExtCreateFontIndirect");
    public static EmfPlusRecordType EmfExtTextOutA = getFrom(enumReflected, "EmfExtTextOutA");
    public static EmfPlusRecordType EmfExtTextOutW = getFrom(enumReflected, "EmfExtTextOutW");
    public static EmfPlusRecordType EmfPolyBezier16 = getFrom(enumReflected, "EmfPolyBezier16");
    public static EmfPlusRecordType EmfPolygon16 = getFrom(enumReflected, "EmfPolygon16");
    public static EmfPlusRecordType EmfPolyline16 = getFrom(enumReflected, "EmfPolyline16");
    public static EmfPlusRecordType EmfPolyBezierTo16 = getFrom(enumReflected, "EmfPolyBezierTo16");
    public static EmfPlusRecordType EmfPolylineTo16 = getFrom(enumReflected, "EmfPolylineTo16");
    public static EmfPlusRecordType EmfPolyPolyline16 = getFrom(enumReflected, "EmfPolyPolyline16");
    public static EmfPlusRecordType EmfPolyPolygon16 = getFrom(enumReflected, "EmfPolyPolygon16");
    public static EmfPlusRecordType EmfPolyDraw16 = getFrom(enumReflected, "EmfPolyDraw16");
    public static EmfPlusRecordType EmfCreateMonoBrush = getFrom(enumReflected, "EmfCreateMonoBrush");
    public static EmfPlusRecordType EmfCreateDibPatternBrushPt = getFrom(enumReflected, "EmfCreateDibPatternBrushPt");
    public static EmfPlusRecordType EmfExtCreatePen = getFrom(enumReflected, "EmfExtCreatePen");
    public static EmfPlusRecordType EmfPolyTextOutA = getFrom(enumReflected, "EmfPolyTextOutA");
    public static EmfPlusRecordType EmfPolyTextOutW = getFrom(enumReflected, "EmfPolyTextOutW");
    public static EmfPlusRecordType EmfSetIcmMode = getFrom(enumReflected, "EmfSetIcmMode");
    public static EmfPlusRecordType EmfCreateColorSpace = getFrom(enumReflected, "EmfCreateColorSpace");
    public static EmfPlusRecordType EmfSetColorSpace = getFrom(enumReflected, "EmfSetColorSpace");
    public static EmfPlusRecordType EmfDeleteColorSpace = getFrom(enumReflected, "EmfDeleteColorSpace");
    public static EmfPlusRecordType EmfGlsRecord = getFrom(enumReflected, "EmfGlsRecord");
    public static EmfPlusRecordType EmfGlsBoundedRecord = getFrom(enumReflected, "EmfGlsBoundedRecord");
    public static EmfPlusRecordType EmfPixelFormat = getFrom(enumReflected, "EmfPixelFormat");
    public static EmfPlusRecordType EmfDrawEscape = getFrom(enumReflected, "EmfDrawEscape");
    public static EmfPlusRecordType EmfExtEscape = getFrom(enumReflected, "EmfExtEscape");
    public static EmfPlusRecordType EmfStartDoc = getFrom(enumReflected, "EmfStartDoc");
    public static EmfPlusRecordType EmfSmallTextOut = getFrom(enumReflected, "EmfSmallTextOut");
    public static EmfPlusRecordType EmfForceUfiMapping = getFrom(enumReflected, "EmfForceUfiMapping");
    public static EmfPlusRecordType EmfNamedEscpae = getFrom(enumReflected, "EmfNamedEscpae");
    public static EmfPlusRecordType EmfColorCorrectPalette = getFrom(enumReflected, "EmfColorCorrectPalette");
    public static EmfPlusRecordType EmfSetIcmProfileA = getFrom(enumReflected, "EmfSetIcmProfileA");
    public static EmfPlusRecordType EmfSetIcmProfileW = getFrom(enumReflected, "EmfSetIcmProfileW");
    public static EmfPlusRecordType EmfAlphaBlend = getFrom(enumReflected, "EmfAlphaBlend");
    public static EmfPlusRecordType EmfSetLayout = getFrom(enumReflected, "EmfSetLayout");
    public static EmfPlusRecordType EmfTransparentBlt = getFrom(enumReflected, "EmfTransparentBlt");
    public static EmfPlusRecordType EmfReserved117 = getFrom(enumReflected, "EmfReserved117");
    public static EmfPlusRecordType EmfGradientFill = getFrom(enumReflected, "EmfGradientFill");
    public static EmfPlusRecordType EmfSetLinkedUfis = getFrom(enumReflected, "EmfSetLinkedUfis");
    public static EmfPlusRecordType EmfSetTextJustification = getFrom(enumReflected, "EmfSetTextJustification");
    public static EmfPlusRecordType EmfColorMatchToTargetW = getFrom(enumReflected, "EmfColorMatchToTargetW");
    public static EmfPlusRecordType EmfCreateColorSpaceW = getFrom(enumReflected, "EmfCreateColorSpaceW");
    public static EmfPlusRecordType EmfMax = getFrom(enumReflected, "EmfMax");
    public static EmfPlusRecordType Invalid = getFrom(enumReflected, "Invalid");
    public static EmfPlusRecordType EmfPlusRecordBase = getFrom(enumReflected, "EmfPlusRecordBase");
    public static EmfPlusRecordType Header = getFrom(enumReflected, "Header");
    public static EmfPlusRecordType Min = getFrom(enumReflected, "Min");
    public static EmfPlusRecordType EndOfFile = getFrom(enumReflected, "EndOfFile");
    public static EmfPlusRecordType Comment = getFrom(enumReflected, "Comment");
    public static EmfPlusRecordType GetDC = getFrom(enumReflected, "GetDC");
    public static EmfPlusRecordType MultiFormatStart = getFrom(enumReflected, "MultiFormatStart");
    public static EmfPlusRecordType MultiFormatSection = getFrom(enumReflected, "MultiFormatSection");
    public static EmfPlusRecordType MultiFormatEnd = getFrom(enumReflected, "MultiFormatEnd");
    public static EmfPlusRecordType Object = getFrom(enumReflected, "Object");
    public static EmfPlusRecordType Clear = getFrom(enumReflected, "Clear");
    public static EmfPlusRecordType FillRects = getFrom(enumReflected, "FillRects");
    public static EmfPlusRecordType DrawRects = getFrom(enumReflected, "DrawRects");
    public static EmfPlusRecordType FillPolygon = getFrom(enumReflected, "FillPolygon");
    public static EmfPlusRecordType DrawLines = getFrom(enumReflected, "DrawLines");
    public static EmfPlusRecordType FillEllipse = getFrom(enumReflected, "FillEllipse");
    public static EmfPlusRecordType DrawEllipse = getFrom(enumReflected, "DrawEllipse");
    public static EmfPlusRecordType FillPie = getFrom(enumReflected, "FillPie");
    public static EmfPlusRecordType DrawPie = getFrom(enumReflected, "DrawPie");
    public static EmfPlusRecordType DrawArc = getFrom(enumReflected, "DrawArc");
    public static EmfPlusRecordType FillRegion = getFrom(enumReflected, "FillRegion");
    public static EmfPlusRecordType FillPath = getFrom(enumReflected, "FillPath");
    public static EmfPlusRecordType DrawPath = getFrom(enumReflected, "DrawPath");
    public static EmfPlusRecordType FillClosedCurve = getFrom(enumReflected, "FillClosedCurve");
    public static EmfPlusRecordType DrawClosedCurve = getFrom(enumReflected, "DrawClosedCurve");
    public static EmfPlusRecordType DrawCurve = getFrom(enumReflected, "DrawCurve");
    public static EmfPlusRecordType DrawBeziers = getFrom(enumReflected, "DrawBeziers");
    public static EmfPlusRecordType DrawImage = getFrom(enumReflected, "DrawImage");
    public static EmfPlusRecordType DrawImagePoints = getFrom(enumReflected, "DrawImagePoints");
    public static EmfPlusRecordType DrawString = getFrom(enumReflected, "DrawString");
    public static EmfPlusRecordType SetRenderingOrigin = getFrom(enumReflected, "SetRenderingOrigin");
    public static EmfPlusRecordType SetAntiAliasMode = getFrom(enumReflected, "SetAntiAliasMode");
    public static EmfPlusRecordType SetTextRenderingHint = getFrom(enumReflected, "SetTextRenderingHint");
    public static EmfPlusRecordType SetTextContrast = getFrom(enumReflected, "SetTextContrast");
    public static EmfPlusRecordType SetInterpolationMode = getFrom(enumReflected, "SetInterpolationMode");
    public static EmfPlusRecordType SetPixelOffsetMode = getFrom(enumReflected, "SetPixelOffsetMode");
    public static EmfPlusRecordType SetCompositingMode = getFrom(enumReflected, "SetCompositingMode");
    public static EmfPlusRecordType SetCompositingQuality = getFrom(enumReflected, "SetCompositingQuality");
    public static EmfPlusRecordType Save = getFrom(enumReflected, "Save");
    public static EmfPlusRecordType Restore = getFrom(enumReflected, "Restore");
    public static EmfPlusRecordType BeginContainer = getFrom(enumReflected, "BeginContainer");
    public static EmfPlusRecordType BeginContainerNoParams = getFrom(enumReflected, "BeginContainerNoParams");
    public static EmfPlusRecordType EndContainer = getFrom(enumReflected, "EndContainer");
    public static EmfPlusRecordType SetWorldTransform = getFrom(enumReflected, "SetWorldTransform");
    public static EmfPlusRecordType ResetWorldTransform = getFrom(enumReflected, "ResetWorldTransform");
    public static EmfPlusRecordType MultiplyWorldTransform = getFrom(enumReflected, "MultiplyWorldTransform");
    public static EmfPlusRecordType TranslateWorldTransform = getFrom(enumReflected, "TranslateWorldTransform");
    public static EmfPlusRecordType ScaleWorldTransform = getFrom(enumReflected, "ScaleWorldTransform");
    public static EmfPlusRecordType RotateWorldTransform = getFrom(enumReflected, "RotateWorldTransform");
    public static EmfPlusRecordType SetPageTransform = getFrom(enumReflected, "SetPageTransform");
    public static EmfPlusRecordType ResetClip = getFrom(enumReflected, "ResetClip");
    public static EmfPlusRecordType SetClipRect = getFrom(enumReflected, "SetClipRect");
    public static EmfPlusRecordType SetClipPath = getFrom(enumReflected, "SetClipPath");
    public static EmfPlusRecordType SetClipRegion = getFrom(enumReflected, "SetClipRegion");
    public static EmfPlusRecordType OffsetClip = getFrom(enumReflected, "OffsetClip");
    public static EmfPlusRecordType Max = getFrom(enumReflected, "Max");
    public static EmfPlusRecordType DrawDriverString = getFrom(enumReflected, "DrawDriverString");
    public static EmfPlusRecordType Total = getFrom(enumReflected, "Total");
    public static EmfPlusRecordType WmfRecordBase = getFrom(enumReflected, "WmfRecordBase");
    public static EmfPlusRecordType WmfSaveDC = getFrom(enumReflected, "WmfSaveDC");
    public static EmfPlusRecordType WmfRealizePalette = getFrom(enumReflected, "WmfRealizePalette");
    public static EmfPlusRecordType WmfSetPalEntries = getFrom(enumReflected, "WmfSetPalEntries");
    public static EmfPlusRecordType WmfCreatePalette = getFrom(enumReflected, "WmfCreatePalette");
    public static EmfPlusRecordType WmfSetBkMode = getFrom(enumReflected, "WmfSetBkMode");
    public static EmfPlusRecordType WmfSetMapMode = getFrom(enumReflected, "WmfSetMapMode");
    public static EmfPlusRecordType WmfSetROP2 = getFrom(enumReflected, "WmfSetROP2");
    public static EmfPlusRecordType WmfSetRelAbs = getFrom(enumReflected, "WmfSetRelAbs");
    public static EmfPlusRecordType WmfSetPolyFillMode = getFrom(enumReflected, "WmfSetPolyFillMode");
    public static EmfPlusRecordType WmfSetStretchBltMode = getFrom(enumReflected, "WmfSetStretchBltMode");
    public static EmfPlusRecordType WmfSetTextCharExtra = getFrom(enumReflected, "WmfSetTextCharExtra");
    public static EmfPlusRecordType WmfRestoreDC = getFrom(enumReflected, "WmfRestoreDC");
    public static EmfPlusRecordType WmfInvertRegion = getFrom(enumReflected, "WmfInvertRegion");
    public static EmfPlusRecordType WmfPaintRegion = getFrom(enumReflected, "WmfPaintRegion");
    public static EmfPlusRecordType WmfSelectClipRegion = getFrom(enumReflected, "WmfSelectClipRegion");
    public static EmfPlusRecordType WmfSelectObject = getFrom(enumReflected, "WmfSelectObject");
    public static EmfPlusRecordType WmfSetTextAlign = getFrom(enumReflected, "WmfSetTextAlign");
    public static EmfPlusRecordType WmfResizePalette = getFrom(enumReflected, "WmfResizePalette");
    public static EmfPlusRecordType WmfDibCreatePatternBrush = getFrom(enumReflected, "WmfDibCreatePatternBrush");
    public static EmfPlusRecordType WmfSetLayout = getFrom(enumReflected, "WmfSetLayout");
    public static EmfPlusRecordType WmfDeleteObject = getFrom(enumReflected, "WmfDeleteObject");
    public static EmfPlusRecordType WmfCreatePatternBrush = getFrom(enumReflected, "WmfCreatePatternBrush");
    public static EmfPlusRecordType WmfSetBkColor = getFrom(enumReflected, "WmfSetBkColor");
    public static EmfPlusRecordType WmfSetTextColor = getFrom(enumReflected, "WmfSetTextColor");
    public static EmfPlusRecordType WmfSetTextJustification = getFrom(enumReflected, "WmfSetTextJustification");
    public static EmfPlusRecordType WmfSetWindowOrg = getFrom(enumReflected, "WmfSetWindowOrg");
    public static EmfPlusRecordType WmfSetWindowExt = getFrom(enumReflected, "WmfSetWindowExt");
    public static EmfPlusRecordType WmfSetViewportOrg = getFrom(enumReflected, "WmfSetViewportOrg");
    public static EmfPlusRecordType WmfSetViewportExt = getFrom(enumReflected, "WmfSetViewportExt");
    public static EmfPlusRecordType WmfOffsetWindowOrg = getFrom(enumReflected, "WmfOffsetWindowOrg");
    public static EmfPlusRecordType WmfOffsetViewportOrg = getFrom(enumReflected, "WmfOffsetViewportOrg");
    public static EmfPlusRecordType WmfLineTo = getFrom(enumReflected, "WmfLineTo");
    public static EmfPlusRecordType WmfMoveTo = getFrom(enumReflected, "WmfMoveTo");
    public static EmfPlusRecordType WmfOffsetCilpRgn = getFrom(enumReflected, "WmfOffsetCilpRgn");
    public static EmfPlusRecordType WmfFillRegion = getFrom(enumReflected, "WmfFillRegion");
    public static EmfPlusRecordType WmfSetMapperFlags = getFrom(enumReflected, "WmfSetMapperFlags");
    public static EmfPlusRecordType WmfSelectPalette = getFrom(enumReflected, "WmfSelectPalette");
    public static EmfPlusRecordType WmfCreatePenIndirect = getFrom(enumReflected, "WmfCreatePenIndirect");
    public static EmfPlusRecordType WmfCreateFontIndirect = getFrom(enumReflected, "WmfCreateFontIndirect");
    public static EmfPlusRecordType WmfCreateBrushIndirect = getFrom(enumReflected, "WmfCreateBrushIndirect");
    public static EmfPlusRecordType WmfPolygon = getFrom(enumReflected, "WmfPolygon");
    public static EmfPlusRecordType WmfPolyline = getFrom(enumReflected, "WmfPolyline");
    public static EmfPlusRecordType WmfScaleWindowExt = getFrom(enumReflected, "WmfScaleWindowExt");
    public static EmfPlusRecordType WmfScaleViewportExt = getFrom(enumReflected, "WmfScaleViewportExt");
    public static EmfPlusRecordType WmfExcludeClipRect = getFrom(enumReflected, "WmfExcludeClipRect");
    public static EmfPlusRecordType WmfIntersectClipRect = getFrom(enumReflected, "WmfIntersectClipRect");
    public static EmfPlusRecordType WmfEllipse = getFrom(enumReflected, "WmfEllipse");
    public static EmfPlusRecordType WmfFloodFill = getFrom(enumReflected, "WmfFloodFill");
    public static EmfPlusRecordType WmfRectangle = getFrom(enumReflected, "WmfRectangle");
    public static EmfPlusRecordType WmfSetPixel = getFrom(enumReflected, "WmfSetPixel");
    public static EmfPlusRecordType WmfFrameRegion = getFrom(enumReflected, "WmfFrameRegion");
    public static EmfPlusRecordType WmfAnimatePalette = getFrom(enumReflected, "WmfAnimatePalette");
    public static EmfPlusRecordType WmfTextOut = getFrom(enumReflected, "WmfTextOut");
    public static EmfPlusRecordType WmfPolyPolygon = getFrom(enumReflected, "WmfPolyPolygon");
    public static EmfPlusRecordType WmfExtFloodFill = getFrom(enumReflected, "WmfExtFloodFill");
    public static EmfPlusRecordType WmfRoundRect = getFrom(enumReflected, "WmfRoundRect");
    public static EmfPlusRecordType WmfPatBlt = getFrom(enumReflected, "WmfPatBlt");
    public static EmfPlusRecordType WmfEscape = getFrom(enumReflected, "WmfEscape");
    public static EmfPlusRecordType WmfCreateRegion = getFrom(enumReflected, "WmfCreateRegion");
    public static EmfPlusRecordType WmfArc = getFrom(enumReflected, "WmfArc");
    public static EmfPlusRecordType WmfPie = getFrom(enumReflected, "WmfPie");
    public static EmfPlusRecordType WmfChord = getFrom(enumReflected, "WmfChord");
    public static EmfPlusRecordType WmfBitBlt = getFrom(enumReflected, "WmfBitBlt");
    public static EmfPlusRecordType WmfDibBitBlt = getFrom(enumReflected, "WmfDibBitBlt");
    public static EmfPlusRecordType WmfExtTextOut = getFrom(enumReflected, "WmfExtTextOut");
    public static EmfPlusRecordType WmfStretchBlt = getFrom(enumReflected, "WmfStretchBlt");
    public static EmfPlusRecordType WmfDibStretchBlt = getFrom(enumReflected, "WmfDibStretchBlt");
    public static EmfPlusRecordType WmfSetDibToDev = getFrom(enumReflected, "WmfSetDibToDev");
    public static EmfPlusRecordType WmfStretchDib = getFrom(enumReflected, "WmfStretchDib");


    // Flags management section


}