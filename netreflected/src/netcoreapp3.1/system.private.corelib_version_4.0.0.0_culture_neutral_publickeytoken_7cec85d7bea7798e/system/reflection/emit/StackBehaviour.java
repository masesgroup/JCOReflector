/*
 *  MIT License
 *
 *  Copyright (c) 2021 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.emit;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing System.Reflection.Emit.StackBehaviour, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.StackBehaviour" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.StackBehaviour</a>
 */
public class StackBehaviour extends NetObject  {
    /**
     * Fully assembly qualified name: System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
     */
    public static final String assemblyFullName = "System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e";
    /**
     * Assembly name: System.Private.CoreLib
     */
    public static final String assemblyShortName = "System.Private.CoreLib";
    /**
     * Qualified class name: System.Reflection.Emit.StackBehaviour
     */
    public static final String className = "System.Reflection.Emit.StackBehaviour";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StackBehaviour(Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public StackBehaviour() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static StackBehaviour getFrom(JCEnum object, String value) {
        try {
            return new StackBehaviour(object.fromValue(value));
        } catch (JCException e) {
            return new StackBehaviour(object);
        }
    }

    // Enum fields section
    
    public static StackBehaviour Pop0 = getFrom(enumReflected, "Pop0");
    public static StackBehaviour Pop1 = getFrom(enumReflected, "Pop1");
    public static StackBehaviour Pop1_pop1 = getFrom(enumReflected, "Pop1_pop1");
    public static StackBehaviour Popi = getFrom(enumReflected, "Popi");
    public static StackBehaviour Popi_pop1 = getFrom(enumReflected, "Popi_pop1");
    public static StackBehaviour Popi_popi = getFrom(enumReflected, "Popi_popi");
    public static StackBehaviour Popi_popi8 = getFrom(enumReflected, "Popi_popi8");
    public static StackBehaviour Popi_popi_popi = getFrom(enumReflected, "Popi_popi_popi");
    public static StackBehaviour Popi_popr4 = getFrom(enumReflected, "Popi_popr4");
    public static StackBehaviour Popi_popr8 = getFrom(enumReflected, "Popi_popr8");
    public static StackBehaviour Popref = getFrom(enumReflected, "Popref");
    public static StackBehaviour Popref_pop1 = getFrom(enumReflected, "Popref_pop1");
    public static StackBehaviour Popref_popi = getFrom(enumReflected, "Popref_popi");
    public static StackBehaviour Popref_popi_popi = getFrom(enumReflected, "Popref_popi_popi");
    public static StackBehaviour Popref_popi_popi8 = getFrom(enumReflected, "Popref_popi_popi8");
    public static StackBehaviour Popref_popi_popr4 = getFrom(enumReflected, "Popref_popi_popr4");
    public static StackBehaviour Popref_popi_popr8 = getFrom(enumReflected, "Popref_popi_popr8");
    public static StackBehaviour Popref_popi_popref = getFrom(enumReflected, "Popref_popi_popref");
    public static StackBehaviour Push0 = getFrom(enumReflected, "Push0");
    public static StackBehaviour Push1 = getFrom(enumReflected, "Push1");
    public static StackBehaviour Push1_push1 = getFrom(enumReflected, "Push1_push1");
    public static StackBehaviour Pushi = getFrom(enumReflected, "Pushi");
    public static StackBehaviour Pushi8 = getFrom(enumReflected, "Pushi8");
    public static StackBehaviour Pushr4 = getFrom(enumReflected, "Pushr4");
    public static StackBehaviour Pushr8 = getFrom(enumReflected, "Pushr8");
    public static StackBehaviour Pushref = getFrom(enumReflected, "Pushref");
    public static StackBehaviour Varpop = getFrom(enumReflected, "Varpop");
    public static StackBehaviour Varpush = getFrom(enumReflected, "Varpush");
    public static StackBehaviour Popref_popi_pop1 = getFrom(enumReflected, "Popref_popi_pop1");


    // Flags management section


}