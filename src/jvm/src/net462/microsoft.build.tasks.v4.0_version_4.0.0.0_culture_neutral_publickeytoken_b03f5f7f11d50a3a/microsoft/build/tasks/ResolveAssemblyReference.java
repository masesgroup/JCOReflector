/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.build.tasks;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.build.tasks.TaskExtension;
import microsoft.build.framework.ITaskItem;
import microsoft.build.framework.ITaskItemImplementation;


/**
 * The base .NET class managing Microsoft.Build.Tasks.ResolveAssemblyReference, Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Build.Tasks.ResolveAssemblyReference" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Build.Tasks.ResolveAssemblyReference</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class ResolveAssemblyReference extends TaskExtension  {
    /**
     * Fully assembly qualified name: Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: Microsoft.Build.Tasks.v4.0
     */
    public static final String assemblyShortName = "Microsoft.Build.Tasks.v4.0";
    /**
     * Qualified class name: Microsoft.Build.Tasks.ResolveAssemblyReference
     */
    public static final String className = "Microsoft.Build.Tasks.ResolveAssemblyReference";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public ResolveAssemblyReference(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link ResolveAssemblyReference}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link ResolveAssemblyReference} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static ResolveAssemblyReference cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new ResolveAssemblyReference(from.getJCOInstance());
    }

    // Constructors section
    
    public ResolveAssemblyReference() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public boolean Execute() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.NullReferenceException, system.OutOfMemoryException, system.MissingMethodException, system.reflection.TargetInvocationException, system.AccessViolationException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.security.SecurityException, system.io.EndOfStreamException, system.collections.generic.KeyNotFoundException, system.runtime.serialization.SerializationException, system.RankException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExecute = null;
        try {
            retObjectExecute = classInstance.Invoke("Execute");
            return (boolean)retObjectExecute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectExecute != null ? retObjectExecute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getAutoUnify() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAutoUnify = null;
        try {
            retObjectAutoUnify = classInstance.Get("AutoUnify");
            return (boolean)retObjectAutoUnify;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectAutoUnify != null ? retObjectAutoUnify.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoUnify(boolean AutoUnify) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AutoUnify", AutoUnify);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCopyLocalDependenciesWhenParentReferenceInGac() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCopyLocalDependenciesWhenParentReferenceInGac = null;
        try {
            retObjectCopyLocalDependenciesWhenParentReferenceInGac = classInstance.Get("CopyLocalDependenciesWhenParentReferenceInGac");
            return (boolean)retObjectCopyLocalDependenciesWhenParentReferenceInGac;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCopyLocalDependenciesWhenParentReferenceInGac != null ? retObjectCopyLocalDependenciesWhenParentReferenceInGac.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCopyLocalDependenciesWhenParentReferenceInGac(boolean CopyLocalDependenciesWhenParentReferenceInGac) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CopyLocalDependenciesWhenParentReferenceInGac", CopyLocalDependenciesWhenParentReferenceInGac);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindDependencies() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFindDependencies = null;
        try {
            retObjectFindDependencies = classInstance.Get("FindDependencies");
            return (boolean)retObjectFindDependencies;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectFindDependencies != null ? retObjectFindDependencies.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindDependencies(boolean FindDependencies) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FindDependencies", FindDependencies);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindRelatedFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFindRelatedFiles = null;
        try {
            retObjectFindRelatedFiles = classInstance.Get("FindRelatedFiles");
            return (boolean)retObjectFindRelatedFiles;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectFindRelatedFiles != null ? retObjectFindRelatedFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindRelatedFiles(boolean FindRelatedFiles) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FindRelatedFiles", FindRelatedFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindSatellites() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFindSatellites = null;
        try {
            retObjectFindSatellites = classInstance.Get("FindSatellites");
            return (boolean)retObjectFindSatellites;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectFindSatellites != null ? retObjectFindSatellites.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindSatellites(boolean FindSatellites) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FindSatellites", FindSatellites);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindSerializationAssemblies() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFindSerializationAssemblies = null;
        try {
            retObjectFindSerializationAssemblies = classInstance.Get("FindSerializationAssemblies");
            return (boolean)retObjectFindSerializationAssemblies;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectFindSerializationAssemblies != null ? retObjectFindSerializationAssemblies.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindSerializationAssemblies(boolean FindSerializationAssemblies) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FindSerializationAssemblies", FindSerializationAssemblies);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreDefaultInstalledAssemblySubsetTables() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIgnoreDefaultInstalledAssemblySubsetTables = null;
        try {
            retObjectIgnoreDefaultInstalledAssemblySubsetTables = classInstance.Get("IgnoreDefaultInstalledAssemblySubsetTables");
            return (boolean)retObjectIgnoreDefaultInstalledAssemblySubsetTables;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIgnoreDefaultInstalledAssemblySubsetTables != null ? retObjectIgnoreDefaultInstalledAssemblySubsetTables.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreDefaultInstalledAssemblySubsetTables(boolean IgnoreDefaultInstalledAssemblySubsetTables) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreDefaultInstalledAssemblySubsetTables", IgnoreDefaultInstalledAssemblySubsetTables);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreDefaultInstalledAssemblyTables() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIgnoreDefaultInstalledAssemblyTables = null;
        try {
            retObjectIgnoreDefaultInstalledAssemblyTables = classInstance.Get("IgnoreDefaultInstalledAssemblyTables");
            return (boolean)retObjectIgnoreDefaultInstalledAssemblyTables;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIgnoreDefaultInstalledAssemblyTables != null ? retObjectIgnoreDefaultInstalledAssemblyTables.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreDefaultInstalledAssemblyTables(boolean IgnoreDefaultInstalledAssemblyTables) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreDefaultInstalledAssemblyTables", IgnoreDefaultInstalledAssemblyTables);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreTargetFrameworkAttributeVersionMismatch() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIgnoreTargetFrameworkAttributeVersionMismatch = null;
        try {
            retObjectIgnoreTargetFrameworkAttributeVersionMismatch = classInstance.Get("IgnoreTargetFrameworkAttributeVersionMismatch");
            return (boolean)retObjectIgnoreTargetFrameworkAttributeVersionMismatch;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIgnoreTargetFrameworkAttributeVersionMismatch != null ? retObjectIgnoreTargetFrameworkAttributeVersionMismatch.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreTargetFrameworkAttributeVersionMismatch(boolean IgnoreTargetFrameworkAttributeVersionMismatch) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreTargetFrameworkAttributeVersionMismatch", IgnoreTargetFrameworkAttributeVersionMismatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreVersionForFrameworkReferences() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIgnoreVersionForFrameworkReferences = null;
        try {
            retObjectIgnoreVersionForFrameworkReferences = classInstance.Get("IgnoreVersionForFrameworkReferences");
            return (boolean)retObjectIgnoreVersionForFrameworkReferences;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIgnoreVersionForFrameworkReferences != null ? retObjectIgnoreVersionForFrameworkReferences.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreVersionForFrameworkReferences(boolean IgnoreVersionForFrameworkReferences) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreVersionForFrameworkReferences", IgnoreVersionForFrameworkReferences);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSilent() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSilent = null;
        try {
            retObjectSilent = classInstance.Get("Silent");
            return (boolean)retObjectSilent;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSilent != null ? retObjectSilent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSilent(boolean Silent) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Silent", Silent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getAssemblies() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAssemblies = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectAssemblies = classInstance.Get("Assemblies");
            JCObject resultingObjects = (JCObject)retObjectAssemblies;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAssemblies != null ? retObjectAssemblies.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAssemblies(ITaskItem[] Assemblies) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Assemblies", toObjectFromArray(Assemblies));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getAssemblyFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAssemblyFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectAssemblyFiles = classInstance.Get("AssemblyFiles");
            JCObject resultingObjects = (JCObject)retObjectAssemblyFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAssemblyFiles != null ? retObjectAssemblyFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAssemblyFiles(ITaskItem[] AssemblyFiles) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AssemblyFiles", toObjectFromArray(AssemblyFiles));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getCopyLocalFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCopyLocalFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectCopyLocalFiles = classInstance.Get("CopyLocalFiles");
            JCObject resultingObjects = (JCObject)retObjectCopyLocalFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCopyLocalFiles != null ? retObjectCopyLocalFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getFilesWritten() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFilesWritten = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectFilesWritten = classInstance.Get("FilesWritten");
            JCObject resultingObjects = (JCObject)retObjectFilesWritten;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFilesWritten != null ? retObjectFilesWritten.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilesWritten(ITaskItem[] FilesWritten) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FilesWritten", toObjectFromArray(FilesWritten));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getFullFrameworkAssemblyTables() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFullFrameworkAssemblyTables = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectFullFrameworkAssemblyTables = classInstance.Get("FullFrameworkAssemblyTables");
            JCObject resultingObjects = (JCObject)retObjectFullFrameworkAssemblyTables;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFullFrameworkAssemblyTables != null ? retObjectFullFrameworkAssemblyTables.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullFrameworkAssemblyTables(ITaskItem[] FullFrameworkAssemblyTables) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FullFrameworkAssemblyTables", toObjectFromArray(FullFrameworkAssemblyTables));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getInstalledAssemblySubsetTables() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectInstalledAssemblySubsetTables = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectInstalledAssemblySubsetTables = classInstance.Get("InstalledAssemblySubsetTables");
            JCObject resultingObjects = (JCObject)retObjectInstalledAssemblySubsetTables;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectInstalledAssemblySubsetTables != null ? retObjectInstalledAssemblySubsetTables.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInstalledAssemblySubsetTables(ITaskItem[] InstalledAssemblySubsetTables) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InstalledAssemblySubsetTables", toObjectFromArray(InstalledAssemblySubsetTables));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getInstalledAssemblyTables() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectInstalledAssemblyTables = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectInstalledAssemblyTables = classInstance.Get("InstalledAssemblyTables");
            JCObject resultingObjects = (JCObject)retObjectInstalledAssemblyTables;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectInstalledAssemblyTables != null ? retObjectInstalledAssemblyTables.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInstalledAssemblyTables(ITaskItem[] InstalledAssemblyTables) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InstalledAssemblyTables", toObjectFromArray(InstalledAssemblyTables));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getRelatedFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRelatedFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectRelatedFiles = classInstance.Get("RelatedFiles");
            JCObject resultingObjects = (JCObject)retObjectRelatedFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectRelatedFiles != null ? retObjectRelatedFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getResolvedDependencyFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResolvedDependencyFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectResolvedDependencyFiles = classInstance.Get("ResolvedDependencyFiles");
            JCObject resultingObjects = (JCObject)retObjectResolvedDependencyFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvedDependencyFiles != null ? retObjectResolvedDependencyFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getResolvedFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResolvedFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectResolvedFiles = classInstance.Get("ResolvedFiles");
            JCObject resultingObjects = (JCObject)retObjectResolvedFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvedFiles != null ? retObjectResolvedFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getResolvedSDKReferences() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResolvedSDKReferences = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectResolvedSDKReferences = classInstance.Get("ResolvedSDKReferences");
            JCObject resultingObjects = (JCObject)retObjectResolvedSDKReferences;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvedSDKReferences != null ? retObjectResolvedSDKReferences.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResolvedSDKReferences(ITaskItem[] ResolvedSDKReferences) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ResolvedSDKReferences", toObjectFromArray(ResolvedSDKReferences));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getSatelliteFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSatelliteFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectSatelliteFiles = classInstance.Get("SatelliteFiles");
            JCObject resultingObjects = (JCObject)retObjectSatelliteFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSatelliteFiles != null ? retObjectSatelliteFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getScatterFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectScatterFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectScatterFiles = classInstance.Get("ScatterFiles");
            JCObject resultingObjects = (JCObject)retObjectScatterFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectScatterFiles != null ? retObjectScatterFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getSerializationAssemblyFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSerializationAssemblyFiles = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectSerializationAssemblyFiles = classInstance.Get("SerializationAssemblyFiles");
            JCObject resultingObjects = (JCObject)retObjectSerializationAssemblyFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSerializationAssemblyFiles != null ? retObjectSerializationAssemblyFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final ITaskItem[] getSuggestedRedirects() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSuggestedRedirects = null;
        try {
            ArrayList<ITaskItem> resultingArrayList = new ArrayList<ITaskItem>();
            retObjectSuggestedRedirects = classInstance.Get("SuggestedRedirects");
            JCObject resultingObjects = (JCObject)retObjectSuggestedRedirects;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ITaskItemImplementation(resultingObject));
            }
            ITaskItem[] resultingArray = new ITaskItem[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSuggestedRedirects != null ? retObjectSuggestedRedirects.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAppConfigFile() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAppConfigFile = null;
        try {
            retObjectAppConfigFile = classInstance.Get("AppConfigFile");
            return (java.lang.String)retObjectAppConfigFile;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectAppConfigFile != null ? retObjectAppConfigFile.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppConfigFile(java.lang.String AppConfigFile) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AppConfigFile", AppConfigFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProfileName() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectProfileName = null;
        try {
            retObjectProfileName = classInstance.Get("ProfileName");
            return (java.lang.String)retObjectProfileName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectProfileName != null ? retObjectProfileName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProfileName(java.lang.String ProfileName) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ProfileName", ProfileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStateFile() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStateFile = null;
        try {
            retObjectStateFile = classInstance.Get("StateFile");
            return (java.lang.String)retObjectStateFile;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectStateFile != null ? retObjectStateFile.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStateFile(java.lang.String StateFile) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("StateFile", StateFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetedRuntimeVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetedRuntimeVersion = null;
        try {
            retObjectTargetedRuntimeVersion = classInstance.Get("TargetedRuntimeVersion");
            return (java.lang.String)retObjectTargetedRuntimeVersion;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectTargetedRuntimeVersion != null ? retObjectTargetedRuntimeVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetedRuntimeVersion(java.lang.String TargetedRuntimeVersion) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetedRuntimeVersion", TargetedRuntimeVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkMoniker() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetFrameworkMoniker = null;
        try {
            retObjectTargetFrameworkMoniker = classInstance.Get("TargetFrameworkMoniker");
            return (java.lang.String)retObjectTargetFrameworkMoniker;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectTargetFrameworkMoniker != null ? retObjectTargetFrameworkMoniker.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkMoniker(java.lang.String TargetFrameworkMoniker) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetFrameworkMoniker", TargetFrameworkMoniker);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkMonikerDisplayName() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetFrameworkMonikerDisplayName = null;
        try {
            retObjectTargetFrameworkMonikerDisplayName = classInstance.Get("TargetFrameworkMonikerDisplayName");
            return (java.lang.String)retObjectTargetFrameworkMonikerDisplayName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectTargetFrameworkMonikerDisplayName != null ? retObjectTargetFrameworkMonikerDisplayName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkMonikerDisplayName(java.lang.String TargetFrameworkMonikerDisplayName) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetFrameworkMonikerDisplayName", TargetFrameworkMonikerDisplayName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetFrameworkVersion = null;
        try {
            retObjectTargetFrameworkVersion = classInstance.Get("TargetFrameworkVersion");
            return (java.lang.String)retObjectTargetFrameworkVersion;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectTargetFrameworkVersion != null ? retObjectTargetFrameworkVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkVersion(java.lang.String TargetFrameworkVersion) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetFrameworkVersion", TargetFrameworkVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetProcessorArchitecture() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetProcessorArchitecture = null;
        try {
            retObjectTargetProcessorArchitecture = classInstance.Get("TargetProcessorArchitecture");
            return (java.lang.String)retObjectTargetProcessorArchitecture;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectTargetProcessorArchitecture != null ? retObjectTargetProcessorArchitecture.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetProcessorArchitecture(java.lang.String TargetProcessorArchitecture) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetProcessorArchitecture", TargetProcessorArchitecture);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getWarnOrErrorOnTargetArchitectureMismatch() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWarnOrErrorOnTargetArchitectureMismatch = null;
        try {
            retObjectWarnOrErrorOnTargetArchitectureMismatch = classInstance.Get("WarnOrErrorOnTargetArchitectureMismatch");
            return (java.lang.String)retObjectWarnOrErrorOnTargetArchitectureMismatch;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectWarnOrErrorOnTargetArchitectureMismatch != null ? retObjectWarnOrErrorOnTargetArchitectureMismatch.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWarnOrErrorOnTargetArchitectureMismatch(java.lang.String WarnOrErrorOnTargetArchitectureMismatch) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.InvalidCastException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.NullReferenceException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("WarnOrErrorOnTargetArchitectureMismatch", WarnOrErrorOnTargetArchitectureMismatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAllowedAssemblyExtensions() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowedAssemblyExtensions = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectAllowedAssemblyExtensions = classInstance.Get("AllowedAssemblyExtensions");
            JCObject resultingObjects = (JCObject)retObjectAllowedAssemblyExtensions;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAllowedAssemblyExtensions = 0; indexAllowedAssemblyExtensions < resultingArrayList.size(); indexAllowedAssemblyExtensions++ ) {
				resultingArray[indexAllowedAssemblyExtensions] = (java.lang.String)resultingArrayList.get(indexAllowedAssemblyExtensions);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectAllowedAssemblyExtensions != null ? retObjectAllowedAssemblyExtensions.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowedAssemblyExtensions(java.lang.String[] AllowedAssemblyExtensions) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AllowedAssemblyExtensions", AllowedAssemblyExtensions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAllowedRelatedFileExtensions() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowedRelatedFileExtensions = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectAllowedRelatedFileExtensions = classInstance.Get("AllowedRelatedFileExtensions");
            JCObject resultingObjects = (JCObject)retObjectAllowedRelatedFileExtensions;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAllowedRelatedFileExtensions = 0; indexAllowedRelatedFileExtensions < resultingArrayList.size(); indexAllowedRelatedFileExtensions++ ) {
				resultingArray[indexAllowedRelatedFileExtensions] = (java.lang.String)resultingArrayList.get(indexAllowedRelatedFileExtensions);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectAllowedRelatedFileExtensions != null ? retObjectAllowedRelatedFileExtensions.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowedRelatedFileExtensions(java.lang.String[] AllowedRelatedFileExtensions) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AllowedRelatedFileExtensions", AllowedRelatedFileExtensions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getCandidateAssemblyFiles() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCandidateAssemblyFiles = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectCandidateAssemblyFiles = classInstance.Get("CandidateAssemblyFiles");
            JCObject resultingObjects = (JCObject)retObjectCandidateAssemblyFiles;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexCandidateAssemblyFiles = 0; indexCandidateAssemblyFiles < resultingArrayList.size(); indexCandidateAssemblyFiles++ ) {
				resultingArray[indexCandidateAssemblyFiles] = (java.lang.String)resultingArrayList.get(indexCandidateAssemblyFiles);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectCandidateAssemblyFiles != null ? retObjectCandidateAssemblyFiles.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCandidateAssemblyFiles(java.lang.String[] CandidateAssemblyFiles) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CandidateAssemblyFiles", CandidateAssemblyFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getFullFrameworkFolders() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFullFrameworkFolders = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectFullFrameworkFolders = classInstance.Get("FullFrameworkFolders");
            JCObject resultingObjects = (JCObject)retObjectFullFrameworkFolders;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexFullFrameworkFolders = 0; indexFullFrameworkFolders < resultingArrayList.size(); indexFullFrameworkFolders++ ) {
				resultingArray[indexFullFrameworkFolders] = (java.lang.String)resultingArrayList.get(indexFullFrameworkFolders);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectFullFrameworkFolders != null ? retObjectFullFrameworkFolders.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullFrameworkFolders(java.lang.String[] FullFrameworkFolders) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FullFrameworkFolders", FullFrameworkFolders);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getFullTargetFrameworkSubsetNames() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFullTargetFrameworkSubsetNames = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectFullTargetFrameworkSubsetNames = classInstance.Get("FullTargetFrameworkSubsetNames");
            JCObject resultingObjects = (JCObject)retObjectFullTargetFrameworkSubsetNames;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexFullTargetFrameworkSubsetNames = 0; indexFullTargetFrameworkSubsetNames < resultingArrayList.size(); indexFullTargetFrameworkSubsetNames++ ) {
				resultingArray[indexFullTargetFrameworkSubsetNames] = (java.lang.String)resultingArrayList.get(indexFullTargetFrameworkSubsetNames);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectFullTargetFrameworkSubsetNames != null ? retObjectFullTargetFrameworkSubsetNames.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullTargetFrameworkSubsetNames(java.lang.String[] FullTargetFrameworkSubsetNames) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("FullTargetFrameworkSubsetNames", FullTargetFrameworkSubsetNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getLatestTargetFrameworkDirectories() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLatestTargetFrameworkDirectories = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectLatestTargetFrameworkDirectories = classInstance.Get("LatestTargetFrameworkDirectories");
            JCObject resultingObjects = (JCObject)retObjectLatestTargetFrameworkDirectories;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexLatestTargetFrameworkDirectories = 0; indexLatestTargetFrameworkDirectories < resultingArrayList.size(); indexLatestTargetFrameworkDirectories++ ) {
				resultingArray[indexLatestTargetFrameworkDirectories] = (java.lang.String)resultingArrayList.get(indexLatestTargetFrameworkDirectories);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectLatestTargetFrameworkDirectories != null ? retObjectLatestTargetFrameworkDirectories.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLatestTargetFrameworkDirectories(java.lang.String[] LatestTargetFrameworkDirectories) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LatestTargetFrameworkDirectories", LatestTargetFrameworkDirectories);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getSearchPaths() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSearchPaths = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectSearchPaths = classInstance.Get("SearchPaths");
            JCObject resultingObjects = (JCObject)retObjectSearchPaths;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexSearchPaths = 0; indexSearchPaths < resultingArrayList.size(); indexSearchPaths++ ) {
				resultingArray[indexSearchPaths] = (java.lang.String)resultingArrayList.get(indexSearchPaths);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectSearchPaths != null ? retObjectSearchPaths.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSearchPaths(java.lang.String[] SearchPaths) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SearchPaths", SearchPaths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getTargetFrameworkDirectories() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetFrameworkDirectories = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectTargetFrameworkDirectories = classInstance.Get("TargetFrameworkDirectories");
            JCObject resultingObjects = (JCObject)retObjectTargetFrameworkDirectories;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexTargetFrameworkDirectories = 0; indexTargetFrameworkDirectories < resultingArrayList.size(); indexTargetFrameworkDirectories++ ) {
				resultingArray[indexTargetFrameworkDirectories] = (java.lang.String)resultingArrayList.get(indexTargetFrameworkDirectories);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectTargetFrameworkDirectories != null ? retObjectTargetFrameworkDirectories.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkDirectories(java.lang.String[] TargetFrameworkDirectories) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetFrameworkDirectories", TargetFrameworkDirectories);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getTargetFrameworkSubsets() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTargetFrameworkSubsets = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectTargetFrameworkSubsets = classInstance.Get("TargetFrameworkSubsets");
            JCObject resultingObjects = (JCObject)retObjectTargetFrameworkSubsets;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexTargetFrameworkSubsets = 0; indexTargetFrameworkSubsets < resultingArrayList.size(); indexTargetFrameworkSubsets++ ) {
				resultingArray[indexTargetFrameworkSubsets] = (java.lang.String)resultingArrayList.get(indexTargetFrameworkSubsets);
			}
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into JCObject", retObjectTargetFrameworkSubsets != null ? retObjectTargetFrameworkSubsets.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkSubsets(java.lang.String[] TargetFrameworkSubsets) throws Throwable, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TargetFrameworkSubsets", TargetFrameworkSubsets);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}