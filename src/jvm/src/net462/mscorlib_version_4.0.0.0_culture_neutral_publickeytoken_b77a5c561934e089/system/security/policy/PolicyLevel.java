/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.policy;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.NamedPermissionSet;
import system.security.PermissionSet;
import system.security.policy.CodeGroup;
import system.security.policy.Evidence;
import system.security.policy.PolicyLevel;
import system.security.policy.PolicyStatement;
import system.security.SecurityElement;
import system.security.policy.StrongName;
import system.security.policy.StrongNameMembershipCondition;
import system.collections.IList;
import system.collections.IListImplementation;
import system.security.PolicyLevelType;


/**
 * The base .NET class managing System.Security.Policy.PolicyLevel, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Security.Policy.PolicyLevel" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Security.Policy.PolicyLevel</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class PolicyLevel extends NetObject  {
    /**
     * Fully assembly qualified name: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: mscorlib
     */
    public static final String assemblyShortName = "mscorlib";
    /**
     * Qualified class name: System.Security.Policy.PolicyLevel
     */
    public static final String className = "System.Security.Policy.PolicyLevel";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PolicyLevel(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PolicyLevel}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PolicyLevel} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PolicyLevel cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PolicyLevel(from.getJCOInstance());
    }

    // Constructors section
    
    public PolicyLevel() throws Throwable {
    }



    
    // Methods section
    
    public NamedPermissionSet ChangeNamedPermissionSet(java.lang.String name, PermissionSet pSet) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.security.SecurityException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.XmlSyntaxException, system.RankException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectChangeNamedPermissionSet = null;
        try {
            retObjectChangeNamedPermissionSet = classInstance.Invoke("ChangeNamedPermissionSet", name, pSet == null ? null : pSet.getJCOInstance());
            JCObject objChangeNamedPermissionSet = (JCObject)retObjectChangeNamedPermissionSet;
            return new NamedPermissionSet(objChangeNamedPermissionSet);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectChangeNamedPermissionSet != null ? retObjectChangeNamedPermissionSet.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet GetNamedPermissionSet(java.lang.String name) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.NullReferenceException, system.security.XmlSyntaxException, system.ObjectDisposedException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetNamedPermissionSet = null;
        try {
            retObjectGetNamedPermissionSet = classInstance.Invoke("GetNamedPermissionSet", name);
            JCObject objGetNamedPermissionSet = (JCObject)retObjectGetNamedPermissionSet;
            return new NamedPermissionSet(objGetNamedPermissionSet);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetNamedPermissionSet != null ? retObjectGetNamedPermissionSet.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet RemoveNamedPermissionSet(NamedPermissionSet permSet) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.NullReferenceException, system.security.XmlSyntaxException, system.ObjectDisposedException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRemoveNamedPermissionSet = null;
        try {
            retObjectRemoveNamedPermissionSet = classInstance.Invoke("RemoveNamedPermissionSet", permSet == null ? null : permSet.getJCOInstance());
            JCObject objRemoveNamedPermissionSet = (JCObject)retObjectRemoveNamedPermissionSet;
            return new NamedPermissionSet(objRemoveNamedPermissionSet);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectRemoveNamedPermissionSet != null ? retObjectRemoveNamedPermissionSet.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet RemoveNamedPermissionSet(java.lang.String name) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRemoveNamedPermissionSet = null;
        try {
            retObjectRemoveNamedPermissionSet = classInstance.Invoke("RemoveNamedPermissionSet", name);
            JCObject objRemoveNamedPermissionSet = (JCObject)retObjectRemoveNamedPermissionSet;
            return new NamedPermissionSet(objRemoveNamedPermissionSet);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectRemoveNamedPermissionSet != null ? retObjectRemoveNamedPermissionSet.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeGroup ResolveMatchingCodeGroups(Evidence evidence) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.NullReferenceException, system.security.XmlSyntaxException, system.ObjectDisposedException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResolveMatchingCodeGroups = null;
        try {
            retObjectResolveMatchingCodeGroups = classInstance.Invoke("ResolveMatchingCodeGroups", evidence == null ? null : evidence.getJCOInstance());
            JCObject objResolveMatchingCodeGroups = (JCObject)retObjectResolveMatchingCodeGroups;
            return new CodeGroup(objResolveMatchingCodeGroups);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolveMatchingCodeGroups != null ? retObjectResolveMatchingCodeGroups.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PolicyLevel CreateAppDomainLevel() throws Throwable, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreateAppDomainLevel = null;
        try {
            retObjectCreateAppDomainLevel = classType.Invoke("CreateAppDomainLevel");
            JCObject objCreateAppDomainLevel = (JCObject)retObjectCreateAppDomainLevel;
            return new PolicyLevel(objCreateAppDomainLevel);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateAppDomainLevel != null ? retObjectCreateAppDomainLevel.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PolicyStatement Resolve(Evidence evidence) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.security.XmlSyntaxException, system.ArgumentException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException, system.InvalidCastException, system.NotSupportedException, system.security.SecurityException, system.reflection.TargetParameterCountException, system.security.policy.PolicyException, system.runtime.serialization.SerializationException, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResolve = null;
        try {
            retObjectResolve = classInstance.Invoke("Resolve", evidence == null ? null : evidence.getJCOInstance());
            JCObject objResolve = (JCObject)retObjectResolve;
            return new PolicyStatement(objResolve);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolve != null ? retObjectResolve.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityElement ToXml() throws Throwable, system.ArgumentException, system.security.SecurityException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectToXml = null;
        try {
            retObjectToXml = classInstance.Invoke("ToXml");
            JCObject objToXml = (JCObject)retObjectToXml;
            return new SecurityElement(objToXml);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectToXml != null ? retObjectToXml.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFullTrustAssembly(StrongName sn) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.security.XmlSyntaxException, system.ObjectDisposedException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFullTrustAssembly", sn == null ? null : sn.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFullTrustAssembly(StrongNameMembershipCondition snMC) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFullTrustAssembly", snMC == null ? null : snMC.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddNamedPermissionSet(NamedPermissionSet permSet) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddNamedPermissionSet", permSet == null ? null : permSet.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void FromXml(SecurityElement e) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException, system.NullReferenceException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.RankException, system.security.XmlSyntaxException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("FromXml", e == null ? null : e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Recover() throws Throwable, system.security.policy.PolicyException, system.ArgumentException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Recover");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveFullTrustAssembly(StrongName sn) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.security.XmlSyntaxException, system.ObjectDisposedException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RemoveFullTrustAssembly", sn == null ? null : sn.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveFullTrustAssembly(StrongNameMembershipCondition snMC) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RemoveFullTrustAssembly", snMC == null ? null : snMC.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Reset() throws Throwable, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotImplementedException, system.security.SecurityException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Reset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public IList getFullTrustAssemblies() throws Throwable, system.ArgumentException, system.security.SecurityException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFullTrustAssemblies = null;
        try {
            retObjectFullTrustAssemblies = classInstance.Get("FullTrustAssemblies");
            JCObject val = (JCObject)retObjectFullTrustAssemblies;
            return new IListImplementation(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFullTrustAssemblies != null ? retObjectFullTrustAssemblies.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IList getNamedPermissionSets() throws Throwable, system.ArgumentException, system.security.SecurityException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNamedPermissionSets = null;
        try {
            retObjectNamedPermissionSets = classInstance.Get("NamedPermissionSets");
            JCObject val = (JCObject)retObjectNamedPermissionSets;
            return new IListImplementation(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNamedPermissionSets != null ? retObjectNamedPermissionSets.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeGroup getRootCodeGroup() throws Throwable, system.ArgumentException, system.security.SecurityException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRootCodeGroup = null;
        try {
            retObjectRootCodeGroup = classInstance.Get("RootCodeGroup");
            JCObject val = (JCObject)retObjectRootCodeGroup;
            return new CodeGroup(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectRootCodeGroup != null ? retObjectRootCodeGroup.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRootCodeGroup(CodeGroup RootCodeGroup) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.NullReferenceException, system.security.XmlSyntaxException, system.OutOfMemoryException, system.RankException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RootCodeGroup", RootCodeGroup == null ? null : RootCodeGroup.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PolicyLevelType getType() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectType = null;
        try {
            retObjectType = classInstance.Get("Type");
            JCObject val = (JCObject)retObjectType;
            return new PolicyLevelType(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectType != null ? retObjectType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLabel() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLabel = null;
        try {
            retObjectLabel = classInstance.Get("Label");
            return (java.lang.String)retObjectLabel;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectLabel != null ? retObjectLabel.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStoreLocation() throws Throwable, system.InvalidOperationException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStoreLocation = null;
        try {
            retObjectStoreLocation = classInstance.Get("StoreLocation");
            return (java.lang.String)retObjectStoreLocation;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectStoreLocation != null ? retObjectStoreLocation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}