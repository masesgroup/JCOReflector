/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.controls;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.DependencyObject;
import system.windows.FrameworkElement;
import system.windows.controls.DataGridRow;
import system.windows.controls.DataGridLength;
import system.windows.controls.DataTemplateSelector;
import system.windows.data.BindingBase;
import system.windows.DataTemplate;
import system.windows.Style;
import system.windows.Visibility;


/**
 * The base .NET class managing System.Windows.Controls.DataGridColumn, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Controls.DataGridColumn" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Controls.DataGridColumn</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class DataGridColumn extends DependencyObject  {
    /**
     * Fully assembly qualified name: PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: PresentationFramework
     */
    public static final String assemblyShortName = "PresentationFramework";
    /**
     * Qualified class name: System.Windows.Controls.DataGridColumn
     */
    public static final String className = "System.Windows.Controls.DataGridColumn";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DataGridColumn(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link DataGridColumn}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link DataGridColumn} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static DataGridColumn cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new DataGridColumn(from.getJCOInstance());
    }

    // Constructors section
    
    public DataGridColumn() throws Throwable {
    }

    
    // Methods section
    
    public NetObject OnCopyingCellClipboardContent(NetObject item) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOnCopyingCellClipboardContent = null;
        try {
            retObjectOnCopyingCellClipboardContent = classInstance.Invoke("OnCopyingCellClipboardContent", item == null ? null : item.getJCOInstance());
            JCObject objOnCopyingCellClipboardContent = (JCObject)retObjectOnCopyingCellClipboardContent;
            return new NetObject(objOnCopyingCellClipboardContent);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectOnCopyingCellClipboardContent != null ? retObjectOnCopyingCellClipboardContent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FrameworkElement GetCellContent(NetObject dataItem) throws Throwable, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCellContent = null;
        try {
            retObjectGetCellContent = classInstance.Invoke("GetCellContent", dataItem == null ? null : dataItem.getJCOInstance());
            JCObject objGetCellContent = (JCObject)retObjectGetCellContent;
            return new FrameworkElement(objGetCellContent);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCellContent != null ? retObjectGetCellContent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FrameworkElement GetCellContent(DataGridRow dataGridRow) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCellContent = null;
        try {
            retObjectGetCellContent = classInstance.Invoke("GetCellContent", dataGridRow == null ? null : dataGridRow.getJCOInstance());
            JCObject objGetCellContent = (JCObject)retObjectGetCellContent;
            return new FrameworkElement(objGetCellContent);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCellContent != null ? retObjectGetCellContent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnPastingCellClipboardContent(NetObject item, NetObject cellContent) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.componentmodel.Win32Exception, system.InvalidCastException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnPastingCellClipboardContent", item == null ? null : item.getJCOInstance(), cellContent == null ? null : cellContent.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getCanUserReorder() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCanUserReorder = null;
        try {
            retObjectCanUserReorder = classInstance.Get("CanUserReorder");
            return (boolean)retObjectCanUserReorder;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCanUserReorder != null ? retObjectCanUserReorder.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCanUserReorder(boolean CanUserReorder) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CanUserReorder", CanUserReorder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCanUserResize() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCanUserResize = null;
        try {
            retObjectCanUserResize = classInstance.Get("CanUserResize");
            return (boolean)retObjectCanUserResize;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCanUserResize != null ? retObjectCanUserResize.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCanUserResize(boolean CanUserResize) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CanUserResize", CanUserResize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCanUserSort() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCanUserSort = null;
        try {
            retObjectCanUserSort = classInstance.Get("CanUserSort");
            return (boolean)retObjectCanUserSort;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCanUserSort != null ? retObjectCanUserSort.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCanUserSort(boolean CanUserSort) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CanUserSort", CanUserSort);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsAutoGenerated() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsAutoGenerated = null;
        try {
            retObjectIsAutoGenerated = classInstance.Get("IsAutoGenerated");
            return (boolean)retObjectIsAutoGenerated;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsAutoGenerated != null ? retObjectIsAutoGenerated.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsAutoGenerated(boolean IsAutoGenerated) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsAutoGenerated", IsAutoGenerated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFrozen() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsFrozen = null;
        try {
            retObjectIsFrozen = classInstance.Get("IsFrozen");
            return (boolean)retObjectIsFrozen;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsFrozen != null ? retObjectIsFrozen.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsFrozen(boolean IsFrozen) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsFrozen", IsFrozen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsReadOnly() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsReadOnly = null;
        try {
            retObjectIsReadOnly = classInstance.Get("IsReadOnly");
            return (boolean)retObjectIsReadOnly;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsReadOnly != null ? retObjectIsReadOnly.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsReadOnly(boolean IsReadOnly) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsReadOnly", IsReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getActualWidth() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectActualWidth = null;
        try {
            retObjectActualWidth = classInstance.Get("ActualWidth");
            return (double)retObjectActualWidth;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectActualWidth_ToString = retObjectActualWidth == null ? "null" : retObjectActualWidth.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectActualWidthNumber = (java.lang.Number)retObjectActualWidth;
                return retObjectActualWidthNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectActualWidth != null ? retObjectActualWidth.getClass() : "null", retObjectActualWidth_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActualWidth(double ActualWidth) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ActualWidth", ActualWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getMaxWidth() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMaxWidth = null;
        try {
            retObjectMaxWidth = classInstance.Get("MaxWidth");
            return (double)retObjectMaxWidth;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMaxWidth_ToString = retObjectMaxWidth == null ? "null" : retObjectMaxWidth.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMaxWidthNumber = (java.lang.Number)retObjectMaxWidth;
                return retObjectMaxWidthNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectMaxWidth != null ? retObjectMaxWidth.getClass() : "null", retObjectMaxWidth_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxWidth(double MaxWidth) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MaxWidth", MaxWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getMinWidth() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMinWidth = null;
        try {
            retObjectMinWidth = classInstance.Get("MinWidth");
            return (double)retObjectMinWidth;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMinWidth_ToString = retObjectMinWidth == null ? "null" : retObjectMinWidth.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMinWidthNumber = (java.lang.Number)retObjectMinWidth;
                return retObjectMinWidthNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectMinWidth != null ? retObjectMinWidth.getClass() : "null", retObjectMinWidth_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinWidth(double MinWidth) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MinWidth", MinWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDisplayIndex() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDisplayIndex = null;
        try {
            retObjectDisplayIndex = classInstance.Get("DisplayIndex");
            return (int)retObjectDisplayIndex;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectDisplayIndex_ToString = retObjectDisplayIndex == null ? "null" : retObjectDisplayIndex.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectDisplayIndexNumber = (java.lang.Number)retObjectDisplayIndex;
                return retObjectDisplayIndexNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectDisplayIndex != null ? retObjectDisplayIndex.getClass() : "null", retObjectDisplayIndex_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisplayIndex(int DisplayIndex) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisplayIndex", DisplayIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getHeader() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeader = null;
        try {
            retObjectHeader = classInstance.Get("Header");
            JCObject val = (JCObject)retObjectHeader;
            return new NetObject(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeader != null ? retObjectHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeader(NetObject Header) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Header", Header == null ? null : Header.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getHeaderStringFormat() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaderStringFormat = null;
        try {
            retObjectHeaderStringFormat = classInstance.Get("HeaderStringFormat");
            return (java.lang.String)retObjectHeaderStringFormat;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectHeaderStringFormat != null ? retObjectHeaderStringFormat.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderStringFormat(java.lang.String HeaderStringFormat) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HeaderStringFormat", HeaderStringFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSortMemberPath() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSortMemberPath = null;
        try {
            retObjectSortMemberPath = classInstance.Get("SortMemberPath");
            return (java.lang.String)retObjectSortMemberPath;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectSortMemberPath != null ? retObjectSortMemberPath.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSortMemberPath(java.lang.String SortMemberPath) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SortMemberPath", SortMemberPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridLength getWidth() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWidth = null;
        try {
            retObjectWidth = classInstance.Get("Width");
            JCObject val = (JCObject)retObjectWidth;
            return new DataGridLength(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectWidth != null ? retObjectWidth.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWidth(DataGridLength Width) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Width", Width == null ? null : Width.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataTemplateSelector getHeaderTemplateSelector() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaderTemplateSelector = null;
        try {
            retObjectHeaderTemplateSelector = classInstance.Get("HeaderTemplateSelector");
            JCObject val = (JCObject)retObjectHeaderTemplateSelector;
            return new DataTemplateSelector(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeaderTemplateSelector != null ? retObjectHeaderTemplateSelector.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderTemplateSelector(DataTemplateSelector HeaderTemplateSelector) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HeaderTemplateSelector", HeaderTemplateSelector == null ? null : HeaderTemplateSelector.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BindingBase getClipboardContentBinding() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectClipboardContentBinding = null;
        try {
            retObjectClipboardContentBinding = classInstance.Get("ClipboardContentBinding");
            JCObject val = (JCObject)retObjectClipboardContentBinding;
            return new BindingBase(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectClipboardContentBinding != null ? retObjectClipboardContentBinding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClipboardContentBinding(BindingBase ClipboardContentBinding) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ClipboardContentBinding", ClipboardContentBinding == null ? null : ClipboardContentBinding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataTemplate getHeaderTemplate() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaderTemplate = null;
        try {
            retObjectHeaderTemplate = classInstance.Get("HeaderTemplate");
            JCObject val = (JCObject)retObjectHeaderTemplate;
            return new DataTemplate(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeaderTemplate != null ? retObjectHeaderTemplate.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderTemplate(DataTemplate HeaderTemplate) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HeaderTemplate", HeaderTemplate == null ? null : HeaderTemplate.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Style getCellStyle() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCellStyle = null;
        try {
            retObjectCellStyle = classInstance.Get("CellStyle");
            JCObject val = (JCObject)retObjectCellStyle;
            return new Style(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCellStyle != null ? retObjectCellStyle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCellStyle(Style CellStyle) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CellStyle", CellStyle == null ? null : CellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Style getDragIndicatorStyle() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDragIndicatorStyle = null;
        try {
            retObjectDragIndicatorStyle = classInstance.Get("DragIndicatorStyle");
            JCObject val = (JCObject)retObjectDragIndicatorStyle;
            return new Style(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDragIndicatorStyle != null ? retObjectDragIndicatorStyle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDragIndicatorStyle(Style DragIndicatorStyle) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DragIndicatorStyle", DragIndicatorStyle == null ? null : DragIndicatorStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Style getHeaderStyle() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaderStyle = null;
        try {
            retObjectHeaderStyle = classInstance.Get("HeaderStyle");
            JCObject val = (JCObject)retObjectHeaderStyle;
            return new Style(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeaderStyle != null ? retObjectHeaderStyle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderStyle(Style HeaderStyle) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HeaderStyle", HeaderStyle == null ? null : HeaderStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Visibility getVisibility() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectVisibility = null;
        try {
            retObjectVisibility = classInstance.Get("Visibility");
            JCObject val = (JCObject)retObjectVisibility;
            return new Visibility(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectVisibility != null ? retObjectVisibility.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVisibility(Visibility Visibility) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Visibility", Visibility == null ? null : Visibility.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    


}