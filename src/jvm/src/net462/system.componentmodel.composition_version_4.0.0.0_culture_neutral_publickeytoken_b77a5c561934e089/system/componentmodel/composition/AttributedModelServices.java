/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.componentmodel.composition;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.componentmodel.composition.primitives.ComposablePartDefinition;
import system.componentmodel.composition.primitives.ImportCardinality;
import system.componentmodel.composition.primitives.ComposablePart;
import system.componentmodel.composition.hosting.CompositionBatch;
import system.reflection.ReflectionContext;
import system.componentmodel.composition.ICompositionService;
import system.componentmodel.composition.ICompositionServiceImplementation;
import system.componentmodel.composition.primitives.ICompositionElement;
import system.componentmodel.composition.primitives.ICompositionElementImplementation;
import system.reflection.MethodInfo;
import system.componentmodel.composition.hosting.CompositionContainer;


/**
 * The base .NET class managing System.ComponentModel.Composition.AttributedModelServices, System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.ComponentModel.Composition.AttributedModelServices" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.ComponentModel.Composition.AttributedModelServices</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class AttributedModelServices extends NetObject  {
    /**
     * Fully assembly qualified name: System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.ComponentModel.Composition
     */
    public static final String assemblyShortName = "System.ComponentModel.Composition";
    /**
     * Qualified class name: System.ComponentModel.Composition.AttributedModelServices
     */
    public static final String className = "System.ComponentModel.Composition.AttributedModelServices";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public AttributedModelServices(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link AttributedModelServices}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link AttributedModelServices} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static AttributedModelServices cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new AttributedModelServices(from.getJCOInstance());
    }

    // Constructors section
    
    public AttributedModelServices() throws Throwable {
    }

    
    // Methods section
    
    public static boolean Exports(ComposablePartDefinition part, NetType contractType) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.NotSupportedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectExports = null;
        try {
            retObjectExports = classType.Invoke("Exports", part == null ? null : part.getJCOInstance(), contractType == null ? null : contractType.getJCOInstance());
            return (boolean)retObjectExports;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectExports != null ? retObjectExports.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Imports(ComposablePartDefinition part, NetType contractType) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.NotSupportedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectImports = null;
        try {
            retObjectImports = classType.Invoke("Imports", part == null ? null : part.getJCOInstance(), contractType == null ? null : contractType.getJCOInstance());
            return (boolean)retObjectImports;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectImports != null ? retObjectImports.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Imports(ComposablePartDefinition part, NetType contractType, ImportCardinality importCardinality) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.NotSupportedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectImports = null;
        try {
            retObjectImports = classType.Invoke("Imports", part == null ? null : part.getJCOInstance(), contractType == null ? null : contractType.getJCOInstance(), importCardinality == null ? null : importCardinality.getJCOInstance());
            return (boolean)retObjectImports;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectImports != null ? retObjectImports.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart AddPart(CompositionBatch batch, NetObject attributedPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectAddPart = null;
        try {
            retObjectAddPart = classType.Invoke("AddPart", batch == null ? null : batch.getJCOInstance(), attributedPart == null ? null : attributedPart.getJCOInstance());
            JCObject objAddPart = (JCObject)retObjectAddPart;
            return new ComposablePart(objAddPart);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddPart != null ? retObjectAddPart.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart CreatePart(ComposablePartDefinition partDefinition, NetObject attributedPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreatePart = null;
        try {
            retObjectCreatePart = classType.Invoke("CreatePart", partDefinition == null ? null : partDefinition.getJCOInstance(), attributedPart == null ? null : attributedPart.getJCOInstance());
            JCObject objCreatePart = (JCObject)retObjectCreatePart;
            return new ComposablePart(objCreatePart);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreatePart != null ? retObjectCreatePart.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart CreatePart(NetObject attributedPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreatePart = null;
        try {
            retObjectCreatePart = classType.Invoke("CreatePart", attributedPart == null ? null : attributedPart.getJCOInstance());
            JCObject objCreatePart = (JCObject)retObjectCreatePart;
            return new ComposablePart(objCreatePart);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreatePart != null ? retObjectCreatePart.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart CreatePart(NetObject attributedPart, ReflectionContext reflectionContext) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotImplementedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreatePart = null;
        try {
            retObjectCreatePart = classType.Invoke("CreatePart", attributedPart == null ? null : attributedPart.getJCOInstance(), reflectionContext == null ? null : reflectionContext.getJCOInstance());
            JCObject objCreatePart = (JCObject)retObjectCreatePart;
            return new ComposablePart(objCreatePart);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreatePart != null ? retObjectCreatePart.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, NetObject attributedPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSatisfyImportsOnce = null;
        try {
            retObjectSatisfyImportsOnce = classType.Invoke("SatisfyImportsOnce", compositionService == null ? null : compositionService.getJCOInstance(), attributedPart == null ? null : attributedPart.getJCOInstance());
            JCObject objSatisfyImportsOnce = (JCObject)retObjectSatisfyImportsOnce;
            return new ComposablePart(objSatisfyImportsOnce);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSatisfyImportsOnce != null ? retObjectSatisfyImportsOnce.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, NetObject attributedPart, ReflectionContext reflectionContext) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.NotImplementedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSatisfyImportsOnce = null;
        try {
            retObjectSatisfyImportsOnce = classType.Invoke("SatisfyImportsOnce", compositionService == null ? null : compositionService.getJCOInstance(), attributedPart == null ? null : attributedPart.getJCOInstance(), reflectionContext == null ? null : reflectionContext.getJCOInstance());
            JCObject objSatisfyImportsOnce = (JCObject)retObjectSatisfyImportsOnce;
            return new ComposablePart(objSatisfyImportsOnce);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSatisfyImportsOnce != null ? retObjectSatisfyImportsOnce.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePartDefinition CreatePartDefinition(NetType type, ICompositionElement origin) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreatePartDefinition = null;
        try {
            retObjectCreatePartDefinition = classType.Invoke("CreatePartDefinition", type == null ? null : type.getJCOInstance(), origin == null ? null : origin.getJCOInstance());
            JCObject objCreatePartDefinition = (JCObject)retObjectCreatePartDefinition;
            return new ComposablePartDefinition(objCreatePartDefinition);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreatePartDefinition != null ? retObjectCreatePartDefinition.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ComposablePartDefinition CreatePartDefinition(NetType type, ICompositionElement origin, boolean ensureIsDiscoverable) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreatePartDefinition = null;
        try {
            retObjectCreatePartDefinition = classType.Invoke("CreatePartDefinition", type == null ? null : type.getJCOInstance(), origin == null ? null : origin.getJCOInstance(), ensureIsDiscoverable);
            JCObject objCreatePartDefinition = (JCObject)retObjectCreatePartDefinition;
            return new ComposablePartDefinition(objCreatePartDefinition);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreatePartDefinition != null ? retObjectCreatePartDefinition.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetContractName(NetType type) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.NotSupportedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetContractName = null;
        try {
            retObjectGetContractName = classType.Invoke("GetContractName", type == null ? null : type.getJCOInstance());
            return (java.lang.String)retObjectGetContractName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetContractName != null ? retObjectGetContractName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetTypeIdentity(MethodInfo method) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.OutOfMemoryException, system.NotSupportedException, system.InvalidOperationException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetTypeIdentity = null;
        try {
            retObjectGetTypeIdentity = classType.Invoke("GetTypeIdentity", method == null ? null : method.getJCOInstance());
            return (java.lang.String)retObjectGetTypeIdentity;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetTypeIdentity != null ? retObjectGetTypeIdentity.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetTypeIdentity(NetType type) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.OutOfMemoryException, system.NotSupportedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetTypeIdentity = null;
        try {
            retObjectGetTypeIdentity = classType.Invoke("GetTypeIdentity", type == null ? null : type.getJCOInstance());
            return (java.lang.String)retObjectGetTypeIdentity;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetTypeIdentity != null ? retObjectGetTypeIdentity.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ComposeParts(CompositionContainer container, NetObject... attributedParts) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.InvalidOperationException, system.NotImplementedException, system.componentmodel.composition.CompositionException, system.componentmodel.composition.ChangeRejectedException, system.MulticastNotSupportedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ComposeParts", container == null ? null : container.getJCOInstance(), toObjectFromArray(attributedParts));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}