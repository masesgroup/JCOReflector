/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.data.metadata.edm;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.metadata.edm.EnumType;
import system.data.metadata.edm.StructuralType;
import system.data.metadata.edm.DataSpace;
import system.data.metadata.edm.EntityContainer;
import system.data.metadata.edm.ItemCollection;
import system.data.metadata.edm.EdmType;
import system.data.common.commandtrees.DbQueryCommandTree;
import system.data.common.commandtrees.DbExpression;
import system.data.common.entitysql.EntitySqlParser;
import system.reflection.Assembly;


/**
 * The base .NET class managing System.Data.Metadata.Edm.MetadataWorkspace, System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Data.Metadata.Edm.MetadataWorkspace" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Data.Metadata.Edm.MetadataWorkspace</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class MetadataWorkspace extends NetObject  {
    /**
     * Fully assembly qualified name: System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.Data.Entity
     */
    public static final String assemblyShortName = "System.Data.Entity";
    /**
     * Qualified class name: System.Data.Metadata.Edm.MetadataWorkspace
     */
    public static final String className = "System.Data.Metadata.Edm.MetadataWorkspace";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public MetadataWorkspace(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link MetadataWorkspace}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link MetadataWorkspace} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static MetadataWorkspace cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new MetadataWorkspace(from.getJCOInstance());
    }

    // Constructors section
    
    public MetadataWorkspace() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public boolean TryGetEdmSpaceType(EnumType objectSpaceType, JCORefOut<EnumType> edmSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetEdmSpaceType = null;
        try {
            retObjectTryGetEdmSpaceType = classInstance.Invoke("TryGetEdmSpaceType", objectSpaceType == null ? null : objectSpaceType.getJCOInstance(), edmSpaceType.getJCRefOut());
            return (boolean)retObjectTryGetEdmSpaceType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetEdmSpaceType != null ? retObjectTryGetEdmSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetEdmSpaceType(StructuralType objectSpaceType, JCORefOut<StructuralType> edmSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetEdmSpaceType = null;
        try {
            retObjectTryGetEdmSpaceType = classInstance.Invoke("TryGetEdmSpaceType", objectSpaceType == null ? null : objectSpaceType.getJCOInstance(), edmSpaceType.getJCRefOut());
            return (boolean)retObjectTryGetEdmSpaceType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetEdmSpaceType != null ? retObjectTryGetEdmSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetEntityContainer(java.lang.String name, boolean ignoreCase, DataSpace dataSpace, JCORefOut<EntityContainer> entityContainer) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetEntityContainer = null;
        try {
            retObjectTryGetEntityContainer = classInstance.Invoke("TryGetEntityContainer", name, ignoreCase, dataSpace == null ? null : dataSpace.getJCOInstance(), entityContainer.getJCRefOut());
            return (boolean)retObjectTryGetEntityContainer;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetEntityContainer != null ? retObjectTryGetEntityContainer.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetEntityContainer(java.lang.String name, DataSpace dataSpace, JCORefOut<EntityContainer> entityContainer) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetEntityContainer = null;
        try {
            retObjectTryGetEntityContainer = classInstance.Invoke("TryGetEntityContainer", name, dataSpace == null ? null : dataSpace.getJCOInstance(), entityContainer.getJCRefOut());
            return (boolean)retObjectTryGetEntityContainer;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetEntityContainer != null ? retObjectTryGetEntityContainer.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetItemCollection(DataSpace dataSpace, JCORefOut<ItemCollection> collection) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetItemCollection = null;
        try {
            retObjectTryGetItemCollection = classInstance.Invoke("TryGetItemCollection", dataSpace == null ? null : dataSpace.getJCOInstance(), collection.getJCRefOut());
            return (boolean)retObjectTryGetItemCollection;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetItemCollection != null ? retObjectTryGetItemCollection.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetObjectSpaceType(EnumType edmSpaceType, JCORefOut<EnumType> objectSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetObjectSpaceType = null;
        try {
            retObjectTryGetObjectSpaceType = classInstance.Invoke("TryGetObjectSpaceType", edmSpaceType == null ? null : edmSpaceType.getJCOInstance(), objectSpaceType.getJCRefOut());
            return (boolean)retObjectTryGetObjectSpaceType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetObjectSpaceType != null ? retObjectTryGetObjectSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetObjectSpaceType(StructuralType edmSpaceType, JCORefOut<StructuralType> objectSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetObjectSpaceType = null;
        try {
            retObjectTryGetObjectSpaceType = classInstance.Invoke("TryGetObjectSpaceType", edmSpaceType == null ? null : edmSpaceType.getJCOInstance(), objectSpaceType.getJCRefOut());
            return (boolean)retObjectTryGetObjectSpaceType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetObjectSpaceType != null ? retObjectTryGetObjectSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetType(java.lang.String name, java.lang.String namespaceName, boolean ignoreCase, DataSpace dataSpace, JCORefOut<EdmType> type) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetType = null;
        try {
            retObjectTryGetType = classInstance.Invoke("TryGetType", name, namespaceName, ignoreCase, dataSpace == null ? null : dataSpace.getJCOInstance(), type.getJCRefOut());
            return (boolean)retObjectTryGetType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetType != null ? retObjectTryGetType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryGetType(java.lang.String name, java.lang.String namespaceName, DataSpace dataSpace, JCORefOut<EdmType> type) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetType = null;
        try {
            retObjectTryGetType = classInstance.Invoke("TryGetType", name, namespaceName, dataSpace == null ? null : dataSpace.getJCOInstance(), type.getJCRefOut());
            return (boolean)retObjectTryGetType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetType != null ? retObjectTryGetType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbQueryCommandTree CreateQueryCommandTree(DbExpression query) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.data.MappingException, system.data.MetadataException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCreateQueryCommandTree = null;
        try {
            retObjectCreateQueryCommandTree = classInstance.Invoke("CreateQueryCommandTree", query == null ? null : query.getJCOInstance());
            JCObject objCreateQueryCommandTree = (JCObject)retObjectCreateQueryCommandTree;
            return new DbQueryCommandTree(objCreateQueryCommandTree);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateQueryCommandTree != null ? retObjectCreateQueryCommandTree.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntitySqlParser CreateEntitySqlParser() throws Throwable, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCreateEntitySqlParser = null;
        try {
            retObjectCreateEntitySqlParser = classInstance.Invoke("CreateEntitySqlParser");
            JCObject objCreateEntitySqlParser = (JCObject)retObjectCreateEntitySqlParser;
            return new EntitySqlParser(objCreateEntitySqlParser);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateEntitySqlParser != null ? retObjectCreateEntitySqlParser.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EdmType GetType(java.lang.String name, java.lang.String namespaceName, boolean ignoreCase, DataSpace dataSpace) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetType = null;
        try {
            retObjectGetType = classInstance.Invoke("GetType", name, namespaceName, ignoreCase, dataSpace == null ? null : dataSpace.getJCOInstance());
            JCObject objGetType = (JCObject)retObjectGetType;
            return new EdmType(objGetType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetType != null ? retObjectGetType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EdmType GetType(java.lang.String name, java.lang.String namespaceName, DataSpace dataSpace) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetType = null;
        try {
            retObjectGetType = classInstance.Invoke("GetType", name, namespaceName, dataSpace == null ? null : dataSpace.getJCOInstance());
            JCObject objGetType = (JCObject)retObjectGetType;
            return new EdmType(objGetType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetType != null ? retObjectGetType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityContainer GetEntityContainer(java.lang.String name, boolean ignoreCase, DataSpace dataSpace) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetEntityContainer = null;
        try {
            retObjectGetEntityContainer = classInstance.Invoke("GetEntityContainer", name, ignoreCase, dataSpace == null ? null : dataSpace.getJCOInstance());
            JCObject objGetEntityContainer = (JCObject)retObjectGetEntityContainer;
            return new EntityContainer(objGetEntityContainer);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetEntityContainer != null ? retObjectGetEntityContainer.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityContainer GetEntityContainer(java.lang.String name, DataSpace dataSpace) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetEntityContainer = null;
        try {
            retObjectGetEntityContainer = classInstance.Invoke("GetEntityContainer", name, dataSpace == null ? null : dataSpace.getJCOInstance());
            JCObject objGetEntityContainer = (JCObject)retObjectGetEntityContainer;
            return new EntityContainer(objGetEntityContainer);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetEntityContainer != null ? retObjectGetEntityContainer.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EnumType GetEdmSpaceType(EnumType objectSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetEdmSpaceType = null;
        try {
            retObjectGetEdmSpaceType = classInstance.Invoke("GetEdmSpaceType", objectSpaceType == null ? null : objectSpaceType.getJCOInstance());
            JCObject objGetEdmSpaceType = (JCObject)retObjectGetEdmSpaceType;
            return new EnumType(objGetEdmSpaceType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetEdmSpaceType != null ? retObjectGetEdmSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EnumType GetObjectSpaceType(EnumType edmSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetObjectSpaceType = null;
        try {
            retObjectGetObjectSpaceType = classInstance.Invoke("GetObjectSpaceType", edmSpaceType == null ? null : edmSpaceType.getJCOInstance());
            JCObject objGetObjectSpaceType = (JCObject)retObjectGetObjectSpaceType;
            return new EnumType(objGetObjectSpaceType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetObjectSpaceType != null ? retObjectGetObjectSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ItemCollection GetItemCollection(DataSpace dataSpace) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.data.MappingException, system.OutOfMemoryException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetItemCollection = null;
        try {
            retObjectGetItemCollection = classInstance.Invoke("GetItemCollection", dataSpace == null ? null : dataSpace.getJCOInstance());
            JCObject objGetItemCollection = (JCObject)retObjectGetItemCollection;
            return new ItemCollection(objGetItemCollection);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetItemCollection != null ? retObjectGetItemCollection.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StructuralType GetEdmSpaceType(StructuralType objectSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetEdmSpaceType = null;
        try {
            retObjectGetEdmSpaceType = classInstance.Invoke("GetEdmSpaceType", objectSpaceType == null ? null : objectSpaceType.getJCOInstance());
            JCObject objGetEdmSpaceType = (JCObject)retObjectGetEdmSpaceType;
            return new StructuralType(objGetEdmSpaceType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetEdmSpaceType != null ? retObjectGetEdmSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StructuralType GetObjectSpaceType(StructuralType edmSpaceType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.data.MappingException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetObjectSpaceType = null;
        try {
            retObjectGetObjectSpaceType = classInstance.Invoke("GetObjectSpaceType", edmSpaceType == null ? null : edmSpaceType.getJCOInstance());
            JCObject objGetObjectSpaceType = (JCObject)retObjectGetObjectSpaceType;
            return new StructuralType(objGetObjectSpaceType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetObjectSpaceType != null ? retObjectGetObjectSpaceType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ClearCache() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.data.MetadataException, system.NotSupportedException, system.io.FileNotFoundException, system.NotImplementedException, system.NullReferenceException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ClearCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void LoadFromAssembly(Assembly assembly) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.IndexOutOfRangeException, system.data.MappingException, system.InvalidOperationException, system.data.MetadataException, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("LoadFromAssembly", assembly == null ? null : assembly.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RegisterItemCollection(ItemCollection collection) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.data.MetadataException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RegisterItemCollection", collection == null ? null : collection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}