/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.identitymodel;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.xml.XmlDictionaryReader;
import system.xml.UniqueId;
import system.xml.ReadState;
import system.xml.XmlNameTable;
import system.xml.XmlNodeType;
import system.xml.XmlSpace;


/**
 * The base .NET class managing System.IdentityModel.DelegatingXmlDictionaryReader, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.IdentityModel.DelegatingXmlDictionaryReader" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.IdentityModel.DelegatingXmlDictionaryReader</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class DelegatingXmlDictionaryReader extends XmlDictionaryReader  {
    /**
     * Fully assembly qualified name: System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.IdentityModel
     */
    public static final String assemblyShortName = "System.IdentityModel";
    /**
     * Qualified class name: System.IdentityModel.DelegatingXmlDictionaryReader
     */
    public static final String className = "System.IdentityModel.DelegatingXmlDictionaryReader";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DelegatingXmlDictionaryReader(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link DelegatingXmlDictionaryReader}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link DelegatingXmlDictionaryReader} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static DelegatingXmlDictionaryReader cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new DelegatingXmlDictionaryReader(from.getJCOInstance());
    }

    // Constructors section
    
    public DelegatingXmlDictionaryReader() throws Throwable {
    }



    
    // Methods section
    
    public boolean MoveToAttribute(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMoveToAttribute = null;
        try {
            retObjectMoveToAttribute = classInstance.Invoke("MoveToAttribute", name);
            return (boolean)retObjectMoveToAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMoveToAttribute != null ? retObjectMoveToAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToAttribute(java.lang.String name, java.lang.String ns) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMoveToAttribute = null;
        try {
            retObjectMoveToAttribute = classInstance.Invoke("MoveToAttribute", name, ns);
            return (boolean)retObjectMoveToAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMoveToAttribute != null ? retObjectMoveToAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToElement() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMoveToElement = null;
        try {
            retObjectMoveToElement = classInstance.Invoke("MoveToElement");
            return (boolean)retObjectMoveToElement;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMoveToElement != null ? retObjectMoveToElement.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFirstAttribute() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMoveToFirstAttribute = null;
        try {
            retObjectMoveToFirstAttribute = classInstance.Invoke("MoveToFirstAttribute");
            return (boolean)retObjectMoveToFirstAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMoveToFirstAttribute != null ? retObjectMoveToFirstAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToNextAttribute() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMoveToNextAttribute = null;
        try {
            retObjectMoveToNextAttribute = classInstance.Invoke("MoveToNextAttribute");
            return (boolean)retObjectMoveToNextAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMoveToNextAttribute != null ? retObjectMoveToNextAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Read() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRead = null;
        try {
            retObjectRead = classInstance.Invoke("Read");
            return (boolean)retObjectRead;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectRead != null ? retObjectRead.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ReadAttributeValue() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadAttributeValue = null;
        try {
            retObjectReadAttributeValue = classInstance.Invoke("ReadAttributeValue");
            return (boolean)retObjectReadAttributeValue;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectReadAttributeValue != null ? retObjectReadAttributeValue.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadContentAsBase64(byte[] buffer, int index, int count) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadContentAsBase64 = null;
        try {
            retObjectReadContentAsBase64 = classInstance.Invoke("ReadContentAsBase64", buffer, index, count);
            return (int)retObjectReadContentAsBase64;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadContentAsBase64_ToString = retObjectReadContentAsBase64 == null ? "null" : retObjectReadContentAsBase64.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadContentAsBase64Number = (java.lang.Number)retObjectReadContentAsBase64;
                return retObjectReadContentAsBase64Number.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadContentAsBase64 != null ? retObjectReadContentAsBase64.getClass() : "null", retObjectReadContentAsBase64_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadContentAsBase64(JCORefOut dupParam0, int dupParam1, int dupParam2) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadContentAsBase64 = null;
        try {
            retObjectReadContentAsBase64 = classInstance.Invoke("ReadContentAsBase64", dupParam0.getJCRefOut(), dupParam1, dupParam2);
            return (int)retObjectReadContentAsBase64;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadContentAsBase64_ToString = retObjectReadContentAsBase64 == null ? "null" : retObjectReadContentAsBase64.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadContentAsBase64Number = (java.lang.Number)retObjectReadContentAsBase64;
                return retObjectReadContentAsBase64Number.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadContentAsBase64 != null ? retObjectReadContentAsBase64.getClass() : "null", retObjectReadContentAsBase64_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadContentAsBinHex(byte[] buffer, int index, int count) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadContentAsBinHex = null;
        try {
            retObjectReadContentAsBinHex = classInstance.Invoke("ReadContentAsBinHex", buffer, index, count);
            return (int)retObjectReadContentAsBinHex;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadContentAsBinHex_ToString = retObjectReadContentAsBinHex == null ? "null" : retObjectReadContentAsBinHex.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadContentAsBinHexNumber = (java.lang.Number)retObjectReadContentAsBinHex;
                return retObjectReadContentAsBinHexNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadContentAsBinHex != null ? retObjectReadContentAsBinHex.getClass() : "null", retObjectReadContentAsBinHex_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadContentAsBinHex(JCORefOut dupParam0, int dupParam1, int dupParam2) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadContentAsBinHex = null;
        try {
            retObjectReadContentAsBinHex = classInstance.Invoke("ReadContentAsBinHex", dupParam0.getJCRefOut(), dupParam1, dupParam2);
            return (int)retObjectReadContentAsBinHex;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadContentAsBinHex_ToString = retObjectReadContentAsBinHex == null ? "null" : retObjectReadContentAsBinHex.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadContentAsBinHexNumber = (java.lang.Number)retObjectReadContentAsBinHex;
                return retObjectReadContentAsBinHexNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadContentAsBinHex != null ? retObjectReadContentAsBinHex.getClass() : "null", retObjectReadContentAsBinHex_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadValueChunk(char[] buffer, int index, int count) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadValueChunk = null;
        try {
            retObjectReadValueChunk = classInstance.Invoke("ReadValueChunk", buffer, index, count);
            return (int)retObjectReadValueChunk;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadValueChunk_ToString = retObjectReadValueChunk == null ? "null" : retObjectReadValueChunk.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadValueChunkNumber = (java.lang.Number)retObjectReadValueChunk;
                return retObjectReadValueChunkNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadValueChunk != null ? retObjectReadValueChunk.getClass() : "null", retObjectReadValueChunk_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadValueChunk(JCORefOut dupParam0, int dupParam1, int dupParam2) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.NotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadValueChunk = null;
        try {
            retObjectReadValueChunk = classInstance.Invoke("ReadValueChunk", dupParam0.getJCRefOut(), dupParam1, dupParam2);
            return (int)retObjectReadValueChunk;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadValueChunk_ToString = retObjectReadValueChunk == null ? "null" : retObjectReadValueChunk.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadValueChunkNumber = (java.lang.Number)retObjectReadValueChunk;
                return retObjectReadValueChunkNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadValueChunk != null ? retObjectReadValueChunk.getClass() : "null", retObjectReadValueChunk_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAttribute(int i) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetAttribute = null;
        try {
            retObjectGetAttribute = classInstance.Invoke("GetAttribute", i);
            return (java.lang.String)retObjectGetAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetAttribute != null ? retObjectGetAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAttribute(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetAttribute = null;
        try {
            retObjectGetAttribute = classInstance.Invoke("GetAttribute", name);
            return (java.lang.String)retObjectGetAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetAttribute != null ? retObjectGetAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAttribute(java.lang.String name, java.lang.String namespaceURI) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetAttribute = null;
        try {
            retObjectGetAttribute = classInstance.Invoke("GetAttribute", name, namespaceURI);
            return (java.lang.String)retObjectGetAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetAttribute != null ? retObjectGetAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String LookupNamespace(java.lang.String prefix) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLookupNamespace = null;
        try {
            retObjectLookupNamespace = classInstance.Invoke("LookupNamespace", prefix);
            return (java.lang.String)retObjectLookupNamespace;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectLookupNamespace != null ? retObjectLookupNamespace.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UniqueId ReadContentAsUniqueId() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadContentAsUniqueId = null;
        try {
            retObjectReadContentAsUniqueId = classInstance.Invoke("ReadContentAsUniqueId");
            JCObject objReadContentAsUniqueId = (JCObject)retObjectReadContentAsUniqueId;
            return new UniqueId(objReadContentAsUniqueId);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadContentAsUniqueId != null ? retObjectReadContentAsUniqueId.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Close() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Close");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void MoveToAttribute(int i) throws Throwable, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("MoveToAttribute", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResolveEntity() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ResolveEntity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}