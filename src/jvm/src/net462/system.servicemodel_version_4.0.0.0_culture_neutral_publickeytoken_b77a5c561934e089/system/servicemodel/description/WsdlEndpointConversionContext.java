/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.servicemodel.description;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.servicemodel.description.FaultDescription;
import system.web.services.description.FaultBinding;
import system.servicemodel.description.MessageDescription;
import system.web.services.description.MessageBinding;
import system.servicemodel.description.OperationDescription;
import system.web.services.description.OperationBinding;
import system.servicemodel.description.ServiceEndpoint;
import system.servicemodel.description.WsdlContractConversionContext;
import system.web.services.description.Port;


/**
 * The base .NET class managing System.ServiceModel.Description.WsdlEndpointConversionContext, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.ServiceModel.Description.WsdlEndpointConversionContext" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.ServiceModel.Description.WsdlEndpointConversionContext</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class WsdlEndpointConversionContext extends NetObject  {
    /**
     * Fully assembly qualified name: System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.ServiceModel
     */
    public static final String assemblyShortName = "System.ServiceModel";
    /**
     * Qualified class name: System.ServiceModel.Description.WsdlEndpointConversionContext
     */
    public static final String className = "System.ServiceModel.Description.WsdlEndpointConversionContext";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public WsdlEndpointConversionContext(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link WsdlEndpointConversionContext}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link WsdlEndpointConversionContext} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static WsdlEndpointConversionContext cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new WsdlEndpointConversionContext(from.getJCOInstance());
    }

    // Constructors section
    
    public WsdlEndpointConversionContext() throws Throwable {
    }



    
    // Methods section
    
    public FaultDescription GetFaultDescription(FaultBinding faultBinding) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetFaultDescription = null;
        try {
            retObjectGetFaultDescription = classInstance.Invoke("GetFaultDescription", faultBinding == null ? null : faultBinding.getJCOInstance());
            JCObject objGetFaultDescription = (JCObject)retObjectGetFaultDescription;
            return new FaultDescription(objGetFaultDescription);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetFaultDescription != null ? retObjectGetFaultDescription.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageDescription GetMessageDescription(MessageBinding messageBinding) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetMessageDescription = null;
        try {
            retObjectGetMessageDescription = classInstance.Invoke("GetMessageDescription", messageBinding == null ? null : messageBinding.getJCOInstance());
            JCObject objGetMessageDescription = (JCObject)retObjectGetMessageDescription;
            return new MessageDescription(objGetMessageDescription);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetMessageDescription != null ? retObjectGetMessageDescription.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OperationDescription GetOperationDescription(OperationBinding operationBinding) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOperationDescription = null;
        try {
            retObjectGetOperationDescription = classInstance.Invoke("GetOperationDescription", operationBinding == null ? null : operationBinding.getJCOInstance());
            JCObject objGetOperationDescription = (JCObject)retObjectGetOperationDescription;
            return new OperationDescription(objGetOperationDescription);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOperationDescription != null ? retObjectGetOperationDescription.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FaultBinding GetFaultBinding(FaultDescription fault) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetFaultBinding = null;
        try {
            retObjectGetFaultBinding = classInstance.Invoke("GetFaultBinding", fault == null ? null : fault.getJCOInstance());
            JCObject objGetFaultBinding = (JCObject)retObjectGetFaultBinding;
            return new FaultBinding(objGetFaultBinding);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetFaultBinding != null ? retObjectGetFaultBinding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageBinding GetMessageBinding(MessageDescription message) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetMessageBinding = null;
        try {
            retObjectGetMessageBinding = classInstance.Invoke("GetMessageBinding", message == null ? null : message.getJCOInstance());
            JCObject objGetMessageBinding = (JCObject)retObjectGetMessageBinding;
            return new MessageBinding(objGetMessageBinding);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetMessageBinding != null ? retObjectGetMessageBinding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OperationBinding GetOperationBinding(OperationDescription operation) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOperationBinding = null;
        try {
            retObjectGetOperationBinding = classInstance.Invoke("GetOperationBinding", operation == null ? null : operation.getJCOInstance());
            JCObject objGetOperationBinding = (JCObject)retObjectGetOperationBinding;
            return new OperationBinding(objGetOperationBinding);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOperationBinding != null ? retObjectGetOperationBinding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public ServiceEndpoint getEndpoint() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEndpoint = null;
        try {
            retObjectEndpoint = classInstance.Get("Endpoint");
            JCObject val = (JCObject)retObjectEndpoint;
            return new ServiceEndpoint(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectEndpoint != null ? retObjectEndpoint.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WsdlContractConversionContext getContractConversionContext() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectContractConversionContext = null;
        try {
            retObjectContractConversionContext = classInstance.Get("ContractConversionContext");
            JCObject val = (JCObject)retObjectContractConversionContext;
            return new WsdlContractConversionContext(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectContractConversionContext != null ? retObjectContractConversionContext.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public system.web.services.description.Binding getWsdlBinding() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWsdlBinding = null;
        try {
            retObjectWsdlBinding = classInstance.Get("WsdlBinding");
            JCObject val = (JCObject)retObjectWsdlBinding;
            return new system.web.services.description.Binding(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectWsdlBinding != null ? retObjectWsdlBinding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Port getWsdlPort() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWsdlPort = null;
        try {
            retObjectWsdlPort = classInstance.Get("WsdlPort");
            JCObject val = (JCObject)retObjectWsdlPort;
            return new Port(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectWsdlPort != null ? retObjectWsdlPort.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}