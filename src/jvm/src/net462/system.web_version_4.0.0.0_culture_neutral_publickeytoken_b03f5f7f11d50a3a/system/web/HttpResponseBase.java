/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.IAsyncResult;
import system.IAsyncResultImplementation;
import system.AsyncCallback;
import system.threading.tasks.Task;
import system.web.ISubscriptionToken;
import system.web.ISubscriptionTokenImplementation;
import system.web.caching.CacheDependency;
import system.web.HttpCookie;
import system.collections.specialized.NameValueCollection;
import system.web.routing.RouteValueDictionary;
import system.web.HttpResponseSubstitutionCallback;
import system.DateTime;
import system.io.Stream;
import system.io.TextWriter;
import system.text.Encoding;
import system.threading.CancellationToken;
import system.web.HttpCachePolicyBase;
import system.web.HttpCookieCollection;


/**
 * The base .NET class managing System.Web.HttpResponseBase, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Web.HttpResponseBase" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Web.HttpResponseBase</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class HttpResponseBase extends NetObject  {
    /**
     * Fully assembly qualified name: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Web
     */
    public static final String assemblyShortName = "System.Web";
    /**
     * Qualified class name: System.Web.HttpResponseBase
     */
    public static final String className = "System.Web.HttpResponseBase";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public HttpResponseBase(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link HttpResponseBase}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link HttpResponseBase} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static HttpResponseBase cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new HttpResponseBase(from.getJCOInstance());
    }

    // Constructors section
    
    public HttpResponseBase() throws Throwable {
    }

    
    // Methods section
    
    public IAsyncResult BeginFlush(AsyncCallback callback, NetObject state) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBeginFlush = null;
        try {
            retObjectBeginFlush = classInstance.Invoke("BeginFlush", callback, state == null ? null : state.getJCOInstance());
            JCObject objBeginFlush = (JCObject)retObjectBeginFlush;
            return new IAsyncResultImplementation(objBeginFlush);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBeginFlush != null ? retObjectBeginFlush.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ApplyAppPathModifier(java.lang.String virtualPath) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectApplyAppPathModifier = null;
        try {
            retObjectApplyAppPathModifier = classInstance.Invoke("ApplyAppPathModifier", virtualPath);
            return (java.lang.String)retObjectApplyAppPathModifier;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectApplyAppPathModifier != null ? retObjectApplyAppPathModifier.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task FlushAsync() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFlushAsync = null;
        try {
            retObjectFlushAsync = classInstance.Invoke("FlushAsync");
            JCObject objFlushAsync = (JCObject)retObjectFlushAsync;
            return new Task(objFlushAsync);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFlushAsync != null ? retObjectFlushAsync.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheDependency(CacheDependency... dependencies) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddCacheDependency", (java.lang.Object)toObjectFromArray(dependencies));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependencies(NetArrayList cacheKeys) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddCacheItemDependencies", cacheKeys == null ? null : cacheKeys.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependencies(java.lang.String[] cacheKeys) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddCacheItemDependencies", (java.lang.Object)cacheKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependencies(JCORefOut dupParam0) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddCacheItemDependencies", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependency(java.lang.String cacheKey) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddCacheItemDependency", cacheKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependencies(NetArrayList filenames) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFileDependencies", filenames == null ? null : filenames.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependencies(java.lang.String[] filenames) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFileDependencies", (java.lang.Object)filenames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependencies(JCORefOut dupParam0) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFileDependencies", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependency(java.lang.String filename) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFileDependency", filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddHeader(java.lang.String name, java.lang.String value) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddHeader", name, value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendCookie(HttpCookie cookie) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AppendCookie", cookie == null ? null : cookie.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendHeader(java.lang.String name, java.lang.String value) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AppendHeader", name, value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendToLog(java.lang.String param) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AppendToLog", param);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BinaryWrite(byte[] buffer) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BinaryWrite", (java.lang.Object)buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BinaryWrite(JCORefOut dupParam0) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BinaryWrite", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Clear() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Clear");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearContent() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ClearContent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearHeaders() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ClearHeaders");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Close() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Close");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DisableKernelCache() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("DisableKernelCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DisableUserCache() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("DisableUserCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void End() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("End");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void EndFlush(IAsyncResult asyncResult) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("EndFlush", asyncResult == null ? null : asyncResult.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Flush() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Flush");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Pics(java.lang.String value) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Pics", value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PushPromise(java.lang.String path) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("PushPromise", path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PushPromise(java.lang.String path, java.lang.String method, NameValueCollection headers) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("PushPromise", path, method, headers == null ? null : headers.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Redirect(java.lang.String url) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Redirect", url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Redirect(java.lang.String url, boolean endResponse) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Redirect", url, endResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectPermanent(java.lang.String url) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectPermanent", url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectPermanent(java.lang.String url, boolean endResponse) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectPermanent", url, endResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(NetObject routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoute", routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoute", routeName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName, NetObject routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoute", routeName, routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName, RouteValueDictionary routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoute", routeName, routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(RouteValueDictionary routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoute", routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(NetObject routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoutePermanent", routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoutePermanent", routeName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName, NetObject routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoutePermanent", routeName, routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName, RouteValueDictionary routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoutePermanent", routeName, routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(RouteValueDictionary routeValues) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RedirectToRoutePermanent", routeValues == null ? null : routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveOutputCacheItem(java.lang.String path) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RemoveOutputCacheItem", path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveOutputCacheItem(java.lang.String path, java.lang.String providerName) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RemoveOutputCacheItem", path, providerName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCookie(HttpCookie cookie) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetCookie", cookie == null ? null : cookie.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void TransmitFile(java.lang.String filename) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("TransmitFile", filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void TransmitFile(java.lang.String filename, long offset, long length) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("TransmitFile", filename, offset, length);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(char ch) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Write", ch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(char[] buffer, int index, int count) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Write", buffer, index, count);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(JCORefOut dupParam0, int dupParam1, int dupParam2) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Write", dupParam0.getJCRefOut(), dupParam1, dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(NetObject obj) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Write", obj == null ? null : obj.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(java.lang.String s) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Write", s);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("WriteFile", filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename, boolean readIntoMemory) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("WriteFile", filename, readIntoMemory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename, long offset, long size) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("WriteFile", filename, offset, size);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteSubstitution(HttpResponseSubstitutionCallback callback) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("WriteSubstitution", callback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getBuffer() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBuffer = null;
        try {
            retObjectBuffer = classInstance.Get("Buffer");
            return (boolean)retObjectBuffer;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectBuffer != null ? retObjectBuffer.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBuffer(boolean Buffer) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Buffer", Buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBufferOutput() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBufferOutput = null;
        try {
            retObjectBufferOutput = classInstance.Get("BufferOutput");
            return (boolean)retObjectBufferOutput;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectBufferOutput != null ? retObjectBufferOutput.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBufferOutput(boolean BufferOutput) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BufferOutput", BufferOutput);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHeadersWritten() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeadersWritten = null;
        try {
            retObjectHeadersWritten = classInstance.Get("HeadersWritten");
            return (boolean)retObjectHeadersWritten;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectHeadersWritten != null ? retObjectHeadersWritten.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsClientConnected() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsClientConnected = null;
        try {
            retObjectIsClientConnected = classInstance.Get("IsClientConnected");
            return (boolean)retObjectIsClientConnected;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsClientConnected != null ? retObjectIsClientConnected.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRequestBeingRedirected() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsRequestBeingRedirected = null;
        try {
            retObjectIsRequestBeingRedirected = classInstance.Get("IsRequestBeingRedirected");
            return (boolean)retObjectIsRequestBeingRedirected;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsRequestBeingRedirected != null ? retObjectIsRequestBeingRedirected.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSupportsAsyncFlush() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSupportsAsyncFlush = null;
        try {
            retObjectSupportsAsyncFlush = classInstance.Get("SupportsAsyncFlush");
            return (boolean)retObjectSupportsAsyncFlush;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSupportsAsyncFlush != null ? retObjectSupportsAsyncFlush.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressContent() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSuppressContent = null;
        try {
            retObjectSuppressContent = classInstance.Get("SuppressContent");
            return (boolean)retObjectSuppressContent;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSuppressContent != null ? retObjectSuppressContent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressContent(boolean SuppressContent) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SuppressContent", SuppressContent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressDefaultCacheControlHeader() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSuppressDefaultCacheControlHeader = null;
        try {
            retObjectSuppressDefaultCacheControlHeader = classInstance.Get("SuppressDefaultCacheControlHeader");
            return (boolean)retObjectSuppressDefaultCacheControlHeader;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSuppressDefaultCacheControlHeader != null ? retObjectSuppressDefaultCacheControlHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressDefaultCacheControlHeader(boolean SuppressDefaultCacheControlHeader) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SuppressDefaultCacheControlHeader", SuppressDefaultCacheControlHeader);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressFormsAuthenticationRedirect() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSuppressFormsAuthenticationRedirect = null;
        try {
            retObjectSuppressFormsAuthenticationRedirect = classInstance.Get("SuppressFormsAuthenticationRedirect");
            return (boolean)retObjectSuppressFormsAuthenticationRedirect;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSuppressFormsAuthenticationRedirect != null ? retObjectSuppressFormsAuthenticationRedirect.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressFormsAuthenticationRedirect(boolean SuppressFormsAuthenticationRedirect) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SuppressFormsAuthenticationRedirect", SuppressFormsAuthenticationRedirect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTrySkipIisCustomErrors() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTrySkipIisCustomErrors = null;
        try {
            retObjectTrySkipIisCustomErrors = classInstance.Get("TrySkipIisCustomErrors");
            return (boolean)retObjectTrySkipIisCustomErrors;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectTrySkipIisCustomErrors != null ? retObjectTrySkipIisCustomErrors.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTrySkipIisCustomErrors(boolean TrySkipIisCustomErrors) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TrySkipIisCustomErrors", TrySkipIisCustomErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getExpires() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExpires = null;
        try {
            retObjectExpires = classInstance.Get("Expires");
            return (int)retObjectExpires;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectExpires_ToString = retObjectExpires == null ? "null" : retObjectExpires.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectExpiresNumber = (java.lang.Number)retObjectExpires;
                return retObjectExpiresNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectExpires != null ? retObjectExpires.getClass() : "null", retObjectExpires_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpires(int Expires) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Expires", Expires);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getStatusCode() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStatusCode = null;
        try {
            retObjectStatusCode = classInstance.Get("StatusCode");
            return (int)retObjectStatusCode;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectStatusCode_ToString = retObjectStatusCode == null ? "null" : retObjectStatusCode.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectStatusCodeNumber = (java.lang.Number)retObjectStatusCode;
                return retObjectStatusCodeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectStatusCode != null ? retObjectStatusCode.getClass() : "null", retObjectStatusCode_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatusCode(int StatusCode) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("StatusCode", StatusCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSubStatusCode() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSubStatusCode = null;
        try {
            retObjectSubStatusCode = classInstance.Get("SubStatusCode");
            return (int)retObjectSubStatusCode;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSubStatusCode_ToString = retObjectSubStatusCode == null ? "null" : retObjectSubStatusCode.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSubStatusCodeNumber = (java.lang.Number)retObjectSubStatusCode;
                return retObjectSubStatusCodeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSubStatusCode != null ? retObjectSubStatusCode.getClass() : "null", retObjectSubStatusCode_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSubStatusCode(int SubStatusCode) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SubStatusCode", SubStatusCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NameValueCollection getHeaders() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaders = null;
        try {
            retObjectHeaders = classInstance.Get("Headers");
            JCObject val = (JCObject)retObjectHeaders;
            return new NameValueCollection(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeaders != null ? retObjectHeaders.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getExpiresAbsolute() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExpiresAbsolute = null;
        try {
            retObjectExpiresAbsolute = classInstance.Get("ExpiresAbsolute");
            JCObject val = (JCObject)retObjectExpiresAbsolute;
            return new DateTime(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExpiresAbsolute != null ? retObjectExpiresAbsolute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpiresAbsolute(DateTime ExpiresAbsolute) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ExpiresAbsolute", ExpiresAbsolute == null ? null : ExpiresAbsolute.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getFilter() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFilter = null;
        try {
            retObjectFilter = classInstance.Get("Filter");
            JCObject val = (JCObject)retObjectFilter;
            return new Stream(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFilter != null ? retObjectFilter.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilter(Stream Filter) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Filter", Filter == null ? null : Filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getOutputStream() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOutputStream = null;
        try {
            retObjectOutputStream = classInstance.Get("OutputStream");
            JCObject val = (JCObject)retObjectOutputStream;
            return new Stream(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectOutputStream != null ? retObjectOutputStream.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TextWriter getOutput() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOutput = null;
        try {
            retObjectOutput = classInstance.Get("Output");
            JCObject val = (JCObject)retObjectOutput;
            return new TextWriter(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectOutput != null ? retObjectOutput.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOutput(TextWriter Output) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Output", Output == null ? null : Output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCacheControl() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCacheControl = null;
        try {
            retObjectCacheControl = classInstance.Get("CacheControl");
            return (java.lang.String)retObjectCacheControl;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectCacheControl != null ? retObjectCacheControl.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheControl(java.lang.String CacheControl) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CacheControl", CacheControl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCharset() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCharset = null;
        try {
            retObjectCharset = classInstance.Get("Charset");
            return (java.lang.String)retObjectCharset;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectCharset != null ? retObjectCharset.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCharset(java.lang.String Charset) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Charset", Charset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getContentType() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectContentType = null;
        try {
            retObjectContentType = classInstance.Get("ContentType");
            return (java.lang.String)retObjectContentType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectContentType != null ? retObjectContentType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentType(java.lang.String ContentType) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ContentType", ContentType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRedirectLocation() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRedirectLocation = null;
        try {
            retObjectRedirectLocation = classInstance.Get("RedirectLocation");
            return (java.lang.String)retObjectRedirectLocation;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectRedirectLocation != null ? retObjectRedirectLocation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRedirectLocation(java.lang.String RedirectLocation) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RedirectLocation", RedirectLocation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStatus() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStatus = null;
        try {
            retObjectStatus = classInstance.Get("Status");
            return (java.lang.String)retObjectStatus;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectStatus != null ? retObjectStatus.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatus(java.lang.String Status) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Status", Status);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStatusDescription() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStatusDescription = null;
        try {
            retObjectStatusDescription = classInstance.Get("StatusDescription");
            return (java.lang.String)retObjectStatusDescription;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectStatusDescription != null ? retObjectStatusDescription.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatusDescription(java.lang.String StatusDescription) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("StatusDescription", StatusDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Encoding getContentEncoding() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectContentEncoding = null;
        try {
            retObjectContentEncoding = classInstance.Get("ContentEncoding");
            JCObject val = (JCObject)retObjectContentEncoding;
            return new Encoding(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectContentEncoding != null ? retObjectContentEncoding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentEncoding(Encoding ContentEncoding) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ContentEncoding", ContentEncoding == null ? null : ContentEncoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Encoding getHeaderEncoding() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeaderEncoding = null;
        try {
            retObjectHeaderEncoding = classInstance.Get("HeaderEncoding");
            JCObject val = (JCObject)retObjectHeaderEncoding;
            return new Encoding(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHeaderEncoding != null ? retObjectHeaderEncoding.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderEncoding(Encoding HeaderEncoding) throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HeaderEncoding", HeaderEncoding == null ? null : HeaderEncoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CancellationToken getClientDisconnectedToken() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectClientDisconnectedToken = null;
        try {
            retObjectClientDisconnectedToken = classInstance.Get("ClientDisconnectedToken");
            JCObject val = (JCObject)retObjectClientDisconnectedToken;
            return new CancellationToken(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectClientDisconnectedToken != null ? retObjectClientDisconnectedToken.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpCachePolicyBase getCache() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCache = null;
        try {
            retObjectCache = classInstance.Get("Cache");
            JCObject val = (JCObject)retObjectCache;
            return new HttpCachePolicyBase(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCache != null ? retObjectCache.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpCookieCollection getCookies() throws Throwable, system.NotImplementedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCookies = null;
        try {
            retObjectCookies = classInstance.Get("Cookies");
            JCObject val = (JCObject)retObjectCookies;
            return new HttpCookieCollection(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCookies != null ? retObjectCookies.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}