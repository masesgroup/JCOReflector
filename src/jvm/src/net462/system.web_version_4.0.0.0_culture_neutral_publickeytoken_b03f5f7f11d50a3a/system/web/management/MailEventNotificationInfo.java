/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.management;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.DateTime;
import system.net.mail.MailMessage;
import system.web.management.EventNotificationType;
import system.web.management.WebBaseEventCollection;


/**
 * The base .NET class managing System.Web.Management.MailEventNotificationInfo, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Web.Management.MailEventNotificationInfo" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Web.Management.MailEventNotificationInfo</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class MailEventNotificationInfo extends NetObject  {
    /**
     * Fully assembly qualified name: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Web
     */
    public static final String assemblyShortName = "System.Web";
    /**
     * Qualified class name: System.Web.Management.MailEventNotificationInfo
     */
    public static final String className = "System.Web.Management.MailEventNotificationInfo";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public MailEventNotificationInfo(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link MailEventNotificationInfo}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link MailEventNotificationInfo} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static MailEventNotificationInfo cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new MailEventNotificationInfo(from.getJCOInstance());
    }

    // Constructors section
    
    public MailEventNotificationInfo() throws Throwable {
    }



    
    // Methods section
    

    
    // Properties section
    
    public int getEventsDiscardedByBuffer() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEventsDiscardedByBuffer = null;
        try {
            retObjectEventsDiscardedByBuffer = classInstance.Get("EventsDiscardedByBuffer");
            return (int)retObjectEventsDiscardedByBuffer;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectEventsDiscardedByBuffer_ToString = retObjectEventsDiscardedByBuffer == null ? "null" : retObjectEventsDiscardedByBuffer.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectEventsDiscardedByBufferNumber = (java.lang.Number)retObjectEventsDiscardedByBuffer;
                return retObjectEventsDiscardedByBufferNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectEventsDiscardedByBuffer != null ? retObjectEventsDiscardedByBuffer.getClass() : "null", retObjectEventsDiscardedByBuffer_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getEventsDiscardedDueToMessageLimit() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEventsDiscardedDueToMessageLimit = null;
        try {
            retObjectEventsDiscardedDueToMessageLimit = classInstance.Get("EventsDiscardedDueToMessageLimit");
            return (int)retObjectEventsDiscardedDueToMessageLimit;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectEventsDiscardedDueToMessageLimit_ToString = retObjectEventsDiscardedDueToMessageLimit == null ? "null" : retObjectEventsDiscardedDueToMessageLimit.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectEventsDiscardedDueToMessageLimitNumber = (java.lang.Number)retObjectEventsDiscardedDueToMessageLimit;
                return retObjectEventsDiscardedDueToMessageLimitNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectEventsDiscardedDueToMessageLimit != null ? retObjectEventsDiscardedDueToMessageLimit.getClass() : "null", retObjectEventsDiscardedDueToMessageLimit_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getEventsInBuffer() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEventsInBuffer = null;
        try {
            retObjectEventsInBuffer = classInstance.Get("EventsInBuffer");
            return (int)retObjectEventsInBuffer;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectEventsInBuffer_ToString = retObjectEventsInBuffer == null ? "null" : retObjectEventsInBuffer.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectEventsInBufferNumber = (java.lang.Number)retObjectEventsInBuffer;
                return retObjectEventsInBufferNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectEventsInBuffer != null ? retObjectEventsInBuffer.getClass() : "null", retObjectEventsInBuffer_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getEventsInNotification() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEventsInNotification = null;
        try {
            retObjectEventsInNotification = classInstance.Get("EventsInNotification");
            return (int)retObjectEventsInNotification;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectEventsInNotification_ToString = retObjectEventsInNotification == null ? "null" : retObjectEventsInNotification.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectEventsInNotificationNumber = (java.lang.Number)retObjectEventsInNotification;
                return retObjectEventsInNotificationNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectEventsInNotification != null ? retObjectEventsInNotification.getClass() : "null", retObjectEventsInNotification_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getEventsRemaining() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEventsRemaining = null;
        try {
            retObjectEventsRemaining = classInstance.Get("EventsRemaining");
            return (int)retObjectEventsRemaining;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectEventsRemaining_ToString = retObjectEventsRemaining == null ? "null" : retObjectEventsRemaining.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectEventsRemainingNumber = (java.lang.Number)retObjectEventsRemaining;
                return retObjectEventsRemainingNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectEventsRemaining != null ? retObjectEventsRemaining.getClass() : "null", retObjectEventsRemaining_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMessageSequence() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMessageSequence = null;
        try {
            retObjectMessageSequence = classInstance.Get("MessageSequence");
            return (int)retObjectMessageSequence;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMessageSequence_ToString = retObjectMessageSequence == null ? "null" : retObjectMessageSequence.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMessageSequenceNumber = (java.lang.Number)retObjectMessageSequence;
                return retObjectMessageSequenceNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMessageSequence != null ? retObjectMessageSequence.getClass() : "null", retObjectMessageSequence_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMessagesInNotification() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMessagesInNotification = null;
        try {
            retObjectMessagesInNotification = classInstance.Get("MessagesInNotification");
            return (int)retObjectMessagesInNotification;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMessagesInNotification_ToString = retObjectMessagesInNotification == null ? "null" : retObjectMessagesInNotification.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMessagesInNotificationNumber = (java.lang.Number)retObjectMessagesInNotification;
                return retObjectMessagesInNotificationNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMessagesInNotification != null ? retObjectMessagesInNotification.getClass() : "null", retObjectMessagesInNotification_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNotificationSequence() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNotificationSequence = null;
        try {
            retObjectNotificationSequence = classInstance.Get("NotificationSequence");
            return (int)retObjectNotificationSequence;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectNotificationSequence_ToString = retObjectNotificationSequence == null ? "null" : retObjectNotificationSequence.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectNotificationSequenceNumber = (java.lang.Number)retObjectNotificationSequence;
                return retObjectNotificationSequenceNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectNotificationSequence != null ? retObjectNotificationSequence.getClass() : "null", retObjectNotificationSequence_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getLastNotificationUtc() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLastNotificationUtc = null;
        try {
            retObjectLastNotificationUtc = classInstance.Get("LastNotificationUtc");
            JCObject val = (JCObject)retObjectLastNotificationUtc;
            return new DateTime(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectLastNotificationUtc != null ? retObjectLastNotificationUtc.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MailMessage getMessage() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMessage = null;
        try {
            retObjectMessage = classInstance.Get("Message");
            JCObject val = (JCObject)retObjectMessage;
            return new MailMessage(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMessage != null ? retObjectMessage.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EventNotificationType getNotificationType() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNotificationType = null;
        try {
            retObjectNotificationType = classInstance.Get("NotificationType");
            JCObject val = (JCObject)retObjectNotificationType;
            return new EventNotificationType(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNotificationType != null ? retObjectNotificationType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebBaseEventCollection getEvents() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEvents = null;
        try {
            retObjectEvents = classInstance.Get("Events");
            JCObject val = (JCObject)retObjectEvents;
            return new WebBaseEventCollection(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectEvents != null ? retObjectEvents.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}