/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.ui.ControlBuilder;
import system.web.ui.VirtualReferenceType;
import system.web.ui.CodeConstructType;
import system.web.ui.CompilationMode;
import system.collections.IDictionary;
import system.collections.IDictionaryImplementation;


/**
 * The base .NET class managing System.Web.UI.PageParserFilter, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Web.UI.PageParserFilter" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Web.UI.PageParserFilter</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class PageParserFilter extends NetObject  {
    /**
     * Fully assembly qualified name: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Web
     */
    public static final String assemblyShortName = "System.Web";
    /**
     * Qualified class name: System.Web.UI.PageParserFilter
     */
    public static final String className = "System.Web.UI.PageParserFilter";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PageParserFilter(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PageParserFilter}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PageParserFilter} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PageParserFilter cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PageParserFilter(from.getJCOInstance());
    }

    // Constructors section
    
    public PageParserFilter() throws Throwable {
    }

    
    // Methods section
    
    public boolean AllowBaseType(NetType baseType) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowBaseType = null;
        try {
            retObjectAllowBaseType = classInstance.Invoke("AllowBaseType", baseType == null ? null : baseType.getJCOInstance());
            return (boolean)retObjectAllowBaseType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectAllowBaseType != null ? retObjectAllowBaseType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean AllowControl(NetType controlType, ControlBuilder builder) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowControl = null;
        try {
            retObjectAllowControl = classInstance.Invoke("AllowControl", controlType == null ? null : controlType.getJCOInstance(), builder == null ? null : builder.getJCOInstance());
            return (boolean)retObjectAllowControl;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectAllowControl != null ? retObjectAllowControl.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean AllowServerSideInclude(java.lang.String includeVirtualPath) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowServerSideInclude = null;
        try {
            retObjectAllowServerSideInclude = classInstance.Invoke("AllowServerSideInclude", includeVirtualPath);
            return (boolean)retObjectAllowServerSideInclude;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectAllowServerSideInclude != null ? retObjectAllowServerSideInclude.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean AllowVirtualReference(java.lang.String referenceVirtualPath, VirtualReferenceType referenceType) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowVirtualReference = null;
        try {
            retObjectAllowVirtualReference = classInstance.Invoke("AllowVirtualReference", referenceVirtualPath, referenceType == null ? null : referenceType.getJCOInstance());
            return (boolean)retObjectAllowVirtualReference;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectAllowVirtualReference != null ? retObjectAllowVirtualReference.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ProcessCodeConstruct(CodeConstructType codeType, java.lang.String code) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectProcessCodeConstruct = null;
        try {
            retObjectProcessCodeConstruct = classInstance.Invoke("ProcessCodeConstruct", codeType == null ? null : codeType.getJCOInstance(), code);
            return (boolean)retObjectProcessCodeConstruct;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectProcessCodeConstruct != null ? retObjectProcessCodeConstruct.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ProcessDataBindingAttribute(java.lang.String controlId, java.lang.String name, java.lang.String value) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectProcessDataBindingAttribute = null;
        try {
            retObjectProcessDataBindingAttribute = classInstance.Invoke("ProcessDataBindingAttribute", controlId, name, value);
            return (boolean)retObjectProcessDataBindingAttribute;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectProcessDataBindingAttribute != null ? retObjectProcessDataBindingAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ProcessEventHookup(java.lang.String controlId, java.lang.String eventName, java.lang.String handlerName) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectProcessEventHookup = null;
        try {
            retObjectProcessEventHookup = classInstance.Invoke("ProcessEventHookup", controlId, eventName, handlerName);
            return (boolean)retObjectProcessEventHookup;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectProcessEventHookup != null ? retObjectProcessEventHookup.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType GetNoCompileUserControlType() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetNoCompileUserControlType = null;
        try {
            retObjectGetNoCompileUserControlType = classInstance.Invoke("GetNoCompileUserControlType");
            JCObject objGetNoCompileUserControlType = (JCObject)retObjectGetNoCompileUserControlType;
            return new NetType(objGetNoCompileUserControlType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetNoCompileUserControlType != null ? retObjectGetNoCompileUserControlType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CompilationMode GetCompilationMode(CompilationMode current) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCompilationMode = null;
        try {
            retObjectGetCompilationMode = classInstance.Invoke("GetCompilationMode", current == null ? null : current.getJCOInstance());
            JCObject objGetCompilationMode = (JCObject)retObjectGetCompilationMode;
            return new CompilationMode(objGetCompilationMode);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCompilationMode != null ? retObjectGetCompilationMode.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ParseComplete(ControlBuilder rootBuilder) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ParseComplete", rootBuilder == null ? null : rootBuilder.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PreprocessDirective(java.lang.String directiveName, IDictionary attributes) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("PreprocessDirective", directiveName, attributes == null ? null : attributes.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getAllowCode() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAllowCode = null;
        try {
            retObjectAllowCode = classInstance.Get("AllowCode");
            return (boolean)retObjectAllowCode;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectAllowCode != null ? retObjectAllowCode.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfControlsAllowed() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNumberOfControlsAllowed = null;
        try {
            retObjectNumberOfControlsAllowed = classInstance.Get("NumberOfControlsAllowed");
            return (int)retObjectNumberOfControlsAllowed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into int", retObjectNumberOfControlsAllowed != null ? retObjectNumberOfControlsAllowed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfDirectDependenciesAllowed() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNumberOfDirectDependenciesAllowed = null;
        try {
            retObjectNumberOfDirectDependenciesAllowed = classInstance.Get("NumberOfDirectDependenciesAllowed");
            return (int)retObjectNumberOfDirectDependenciesAllowed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into int", retObjectNumberOfDirectDependenciesAllowed != null ? retObjectNumberOfDirectDependenciesAllowed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTotalNumberOfDependenciesAllowed() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTotalNumberOfDependenciesAllowed = null;
        try {
            retObjectTotalNumberOfDependenciesAllowed = classInstance.Get("TotalNumberOfDependenciesAllowed");
            return (int)retObjectTotalNumberOfDependenciesAllowed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into int", retObjectTotalNumberOfDependenciesAllowed != null ? retObjectTotalNumberOfDependenciesAllowed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}