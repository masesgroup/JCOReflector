/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.forms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.forms.Cursor;


/**
 * The base .NET class managing System.Windows.Forms.Cursors, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Forms.Cursors" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Forms.Cursors</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class Cursors extends NetObject  {
    /**
     * Fully assembly qualified name: System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
     */
    public static final String assemblyFullName = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
    /**
     * Assembly name: System.Windows.Forms
     */
    public static final String assemblyShortName = "System.Windows.Forms";
    /**
     * Qualified class name: System.Windows.Forms.Cursors
     */
    public static final String className = "System.Windows.Forms.Cursors";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public Cursors(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link Cursors}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link Cursors} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static Cursors cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new Cursors(from.getJCOInstance());
    }

    // Constructors section
    
    public Cursors() throws Throwable {
    }



    
    // Methods section
    

    
    // Properties section
    
    public static Cursor getAppStarting() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectAppStarting = null;
        try {
            retObjectAppStarting = classType.Get("AppStarting");
            JCObject val = (JCObject)retObjectAppStarting;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAppStarting != null ? retObjectAppStarting.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getArrow() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectArrow = null;
        try {
            retObjectArrow = classType.Get("Arrow");
            JCObject val = (JCObject)retObjectArrow;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectArrow != null ? retObjectArrow.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getCross() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCross = null;
        try {
            retObjectCross = classType.Get("Cross");
            JCObject val = (JCObject)retObjectCross;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCross != null ? retObjectCross.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getDefault() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectDefault = null;
        try {
            retObjectDefault = classType.Get("Default");
            JCObject val = (JCObject)retObjectDefault;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDefault != null ? retObjectDefault.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getHand() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHand = null;
        try {
            retObjectHand = classType.Get("Hand");
            JCObject val = (JCObject)retObjectHand;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHand != null ? retObjectHand.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getHelp() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHelp = null;
        try {
            retObjectHelp = classType.Get("Help");
            JCObject val = (JCObject)retObjectHelp;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHelp != null ? retObjectHelp.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getHSplit() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHSplit = null;
        try {
            retObjectHSplit = classType.Get("HSplit");
            JCObject val = (JCObject)retObjectHSplit;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectHSplit != null ? retObjectHSplit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getIBeam() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectIBeam = null;
        try {
            retObjectIBeam = classType.Get("IBeam");
            JCObject val = (JCObject)retObjectIBeam;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectIBeam != null ? retObjectIBeam.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getNo() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectNo = null;
        try {
            retObjectNo = classType.Get("No");
            JCObject val = (JCObject)retObjectNo;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNo != null ? retObjectNo.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getNoMove2D() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectNoMove2D = null;
        try {
            retObjectNoMove2D = classType.Get("NoMove2D");
            JCObject val = (JCObject)retObjectNoMove2D;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNoMove2D != null ? retObjectNoMove2D.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getNoMoveHoriz() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectNoMoveHoriz = null;
        try {
            retObjectNoMoveHoriz = classType.Get("NoMoveHoriz");
            JCObject val = (JCObject)retObjectNoMoveHoriz;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNoMoveHoriz != null ? retObjectNoMoveHoriz.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getNoMoveVert() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectNoMoveVert = null;
        try {
            retObjectNoMoveVert = classType.Get("NoMoveVert");
            JCObject val = (JCObject)retObjectNoMoveVert;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNoMoveVert != null ? retObjectNoMoveVert.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanEast() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanEast = null;
        try {
            retObjectPanEast = classType.Get("PanEast");
            JCObject val = (JCObject)retObjectPanEast;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanEast != null ? retObjectPanEast.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanNE() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanNE = null;
        try {
            retObjectPanNE = classType.Get("PanNE");
            JCObject val = (JCObject)retObjectPanNE;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanNE != null ? retObjectPanNE.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanNorth() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanNorth = null;
        try {
            retObjectPanNorth = classType.Get("PanNorth");
            JCObject val = (JCObject)retObjectPanNorth;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanNorth != null ? retObjectPanNorth.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanNW() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanNW = null;
        try {
            retObjectPanNW = classType.Get("PanNW");
            JCObject val = (JCObject)retObjectPanNW;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanNW != null ? retObjectPanNW.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanSE() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanSE = null;
        try {
            retObjectPanSE = classType.Get("PanSE");
            JCObject val = (JCObject)retObjectPanSE;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanSE != null ? retObjectPanSE.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanSouth() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanSouth = null;
        try {
            retObjectPanSouth = classType.Get("PanSouth");
            JCObject val = (JCObject)retObjectPanSouth;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanSouth != null ? retObjectPanSouth.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanSW() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanSW = null;
        try {
            retObjectPanSW = classType.Get("PanSW");
            JCObject val = (JCObject)retObjectPanSW;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanSW != null ? retObjectPanSW.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getPanWest() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPanWest = null;
        try {
            retObjectPanWest = classType.Get("PanWest");
            JCObject val = (JCObject)retObjectPanWest;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPanWest != null ? retObjectPanWest.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getSizeAll() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeAll = null;
        try {
            retObjectSizeAll = classType.Get("SizeAll");
            JCObject val = (JCObject)retObjectSizeAll;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeAll != null ? retObjectSizeAll.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getSizeNESW() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeNESW = null;
        try {
            retObjectSizeNESW = classType.Get("SizeNESW");
            JCObject val = (JCObject)retObjectSizeNESW;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeNESW != null ? retObjectSizeNESW.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getSizeNS() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeNS = null;
        try {
            retObjectSizeNS = classType.Get("SizeNS");
            JCObject val = (JCObject)retObjectSizeNS;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeNS != null ? retObjectSizeNS.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getSizeNWSE() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeNWSE = null;
        try {
            retObjectSizeNWSE = classType.Get("SizeNWSE");
            JCObject val = (JCObject)retObjectSizeNWSE;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeNWSE != null ? retObjectSizeNWSE.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getSizeWE() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeWE = null;
        try {
            retObjectSizeWE = classType.Get("SizeWE");
            JCObject val = (JCObject)retObjectSizeWE;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeWE != null ? retObjectSizeWE.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getUpArrow() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectUpArrow = null;
        try {
            retObjectUpArrow = classType.Get("UpArrow");
            JCObject val = (JCObject)retObjectUpArrow;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectUpArrow != null ? retObjectUpArrow.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getVSplit() throws Throwable, system.NotImplementedException, system.OverflowException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectVSplit = null;
        try {
            retObjectVSplit = classType.Get("VSplit");
            JCObject val = (JCObject)retObjectVSplit;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectVSplit != null ? retObjectVSplit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Cursor getWaitCursor() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectWaitCursor = null;
        try {
            retObjectWaitCursor = classType.Get("WaitCursor");
            JCObject val = (JCObject)retObjectWaitCursor;
            return new Cursor(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectWaitCursor != null ? retObjectWaitCursor.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}