/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.media.textformatting;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.media.textformatting.CharacterHit;
import system.windows.media.textformatting.TextLine;
import system.windows.media.textformatting.TextCollapsingProperties;
import system.windows.media.textformatting.TextLineBreak;
import system.windows.media.DrawingContext;
import system.windows.Point;
import system.windows.media.textformatting.InvertAxes;


/**
 * The base .NET class managing System.Windows.Media.TextFormatting.TextLine, PresentationCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Media.TextFormatting.TextLine" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Media.TextFormatting.TextLine</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class TextLine extends NetObject implements AutoCloseable {
    /**
     * Fully assembly qualified name: PresentationCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "PresentationCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: PresentationCore
     */
    public static final String assemblyShortName = "PresentationCore";
    /**
     * Qualified class name: System.Windows.Media.TextFormatting.TextLine
     */
    public static final String className = "System.Windows.Media.TextFormatting.TextLine";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TextLine(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TextLine}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TextLine} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TextLine cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TextLine(from.getJCOInstance());
    }

    // Constructors section
    
    public TextLine() throws Throwable {
    }

    
    // Methods section
    
    public double GetDistanceFromCharacterHit(CharacterHit characterHit) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetDistanceFromCharacterHit = null;
        try {
            retObjectGetDistanceFromCharacterHit = classInstance.Invoke("GetDistanceFromCharacterHit", characterHit == null ? null : characterHit.getJCOInstance());
            return (double)retObjectGetDistanceFromCharacterHit;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectGetDistanceFromCharacterHit_ToString = retObjectGetDistanceFromCharacterHit == null ? "null" : retObjectGetDistanceFromCharacterHit.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetDistanceFromCharacterHitNumber = (java.lang.Number)retObjectGetDistanceFromCharacterHit;
                return retObjectGetDistanceFromCharacterHitNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectGetDistanceFromCharacterHit != null ? retObjectGetDistanceFromCharacterHit.getClass() : "null", retObjectGetDistanceFromCharacterHit_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CharacterHit GetBackspaceCaretCharacterHit(CharacterHit characterHit) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetBackspaceCaretCharacterHit = null;
        try {
            retObjectGetBackspaceCaretCharacterHit = classInstance.Invoke("GetBackspaceCaretCharacterHit", characterHit == null ? null : characterHit.getJCOInstance());
            JCObject objGetBackspaceCaretCharacterHit = (JCObject)retObjectGetBackspaceCaretCharacterHit;
            return new CharacterHit(objGetBackspaceCaretCharacterHit);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetBackspaceCaretCharacterHit != null ? retObjectGetBackspaceCaretCharacterHit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CharacterHit GetCharacterHitFromDistance(double distance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCharacterHitFromDistance = null;
        try {
            retObjectGetCharacterHitFromDistance = classInstance.Invoke("GetCharacterHitFromDistance", distance);
            JCObject objGetCharacterHitFromDistance = (JCObject)retObjectGetCharacterHitFromDistance;
            return new CharacterHit(objGetCharacterHitFromDistance);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCharacterHitFromDistance != null ? retObjectGetCharacterHitFromDistance.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CharacterHit GetNextCaretCharacterHit(CharacterHit characterHit) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetNextCaretCharacterHit = null;
        try {
            retObjectGetNextCaretCharacterHit = classInstance.Invoke("GetNextCaretCharacterHit", characterHit == null ? null : characterHit.getJCOInstance());
            JCObject objGetNextCaretCharacterHit = (JCObject)retObjectGetNextCaretCharacterHit;
            return new CharacterHit(objGetNextCaretCharacterHit);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetNextCaretCharacterHit != null ? retObjectGetNextCaretCharacterHit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CharacterHit GetPreviousCaretCharacterHit(CharacterHit characterHit) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetPreviousCaretCharacterHit = null;
        try {
            retObjectGetPreviousCaretCharacterHit = classInstance.Invoke("GetPreviousCaretCharacterHit", characterHit == null ? null : characterHit.getJCOInstance());
            JCObject objGetPreviousCaretCharacterHit = (JCObject)retObjectGetPreviousCaretCharacterHit;
            return new CharacterHit(objGetPreviousCaretCharacterHit);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetPreviousCaretCharacterHit != null ? retObjectGetPreviousCaretCharacterHit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TextLine Collapse(TextCollapsingProperties... collapsingPropertiesList) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCollapse = null;
        try {
            retObjectCollapse = classInstance.Invoke("Collapse", (java.lang.Object)toObjectFromArray(collapsingPropertiesList));
            JCObject objCollapse = (JCObject)retObjectCollapse;
            return new TextLine(objCollapse);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCollapse != null ? retObjectCollapse.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TextLineBreak GetTextLineBreak() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTextLineBreak = null;
        try {
            retObjectGetTextLineBreak = classInstance.Invoke("GetTextLineBreak");
            JCObject objGetTextLineBreak = (JCObject)retObjectGetTextLineBreak;
            return new TextLineBreak(objGetTextLineBreak);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTextLineBreak != null ? retObjectGetTextLineBreak.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Draw(DrawingContext drawingContext, Point origin, InvertAxes inversion) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Draw", drawingContext == null ? null : drawingContext.getJCOInstance(), origin == null ? null : origin.getJCOInstance(), inversion == null ? null : inversion.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void close() throws Exception {
        try {
            if (classInstance == null)
                throw new java.lang.UnsupportedOperationException("classInstance is null.");
            try {
                classInstance.Invoke("Dispose");
            }
            catch (JCNativeException jcne) {
                throw translateException(jcne);
            }
        } catch (Throwable t) {
            throw new Exception(t);
        }
    }
    
    // Properties section
    
    public boolean getHasCollapsed() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHasCollapsed = null;
        try {
            retObjectHasCollapsed = classInstance.Get("HasCollapsed");
            return (boolean)retObjectHasCollapsed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectHasCollapsed != null ? retObjectHasCollapsed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasOverflowed() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHasOverflowed = null;
        try {
            retObjectHasOverflowed = classInstance.Get("HasOverflowed");
            return (boolean)retObjectHasOverflowed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectHasOverflowed != null ? retObjectHasOverflowed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsTruncated() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsTruncated = null;
        try {
            retObjectIsTruncated = classInstance.Get("IsTruncated");
            return (boolean)retObjectIsTruncated;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsTruncated != null ? retObjectIsTruncated.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getBaseline() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBaseline = null;
        try {
            retObjectBaseline = classInstance.Get("Baseline");
            return (double)retObjectBaseline;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBaseline_ToString = retObjectBaseline == null ? "null" : retObjectBaseline.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBaselineNumber = (java.lang.Number)retObjectBaseline;
                return retObjectBaselineNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectBaseline != null ? retObjectBaseline.getClass() : "null", retObjectBaseline_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getExtent() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExtent = null;
        try {
            retObjectExtent = classInstance.Get("Extent");
            return (double)retObjectExtent;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectExtent_ToString = retObjectExtent == null ? "null" : retObjectExtent.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectExtentNumber = (java.lang.Number)retObjectExtent;
                return retObjectExtentNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectExtent != null ? retObjectExtent.getClass() : "null", retObjectExtent_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getHeight() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHeight = null;
        try {
            retObjectHeight = classInstance.Get("Height");
            return (double)retObjectHeight;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHeight_ToString = retObjectHeight == null ? "null" : retObjectHeight.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHeightNumber = (java.lang.Number)retObjectHeight;
                return retObjectHeightNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectHeight != null ? retObjectHeight.getClass() : "null", retObjectHeight_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getMarkerBaseline() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMarkerBaseline = null;
        try {
            retObjectMarkerBaseline = classInstance.Get("MarkerBaseline");
            return (double)retObjectMarkerBaseline;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMarkerBaseline_ToString = retObjectMarkerBaseline == null ? "null" : retObjectMarkerBaseline.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMarkerBaselineNumber = (java.lang.Number)retObjectMarkerBaseline;
                return retObjectMarkerBaselineNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectMarkerBaseline != null ? retObjectMarkerBaseline.getClass() : "null", retObjectMarkerBaseline_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getMarkerHeight() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMarkerHeight = null;
        try {
            retObjectMarkerHeight = classInstance.Get("MarkerHeight");
            return (double)retObjectMarkerHeight;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMarkerHeight_ToString = retObjectMarkerHeight == null ? "null" : retObjectMarkerHeight.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMarkerHeightNumber = (java.lang.Number)retObjectMarkerHeight;
                return retObjectMarkerHeightNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectMarkerHeight != null ? retObjectMarkerHeight.getClass() : "null", retObjectMarkerHeight_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getOverhangAfter() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOverhangAfter = null;
        try {
            retObjectOverhangAfter = classInstance.Get("OverhangAfter");
            return (double)retObjectOverhangAfter;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectOverhangAfter_ToString = retObjectOverhangAfter == null ? "null" : retObjectOverhangAfter.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectOverhangAfterNumber = (java.lang.Number)retObjectOverhangAfter;
                return retObjectOverhangAfterNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectOverhangAfter != null ? retObjectOverhangAfter.getClass() : "null", retObjectOverhangAfter_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getOverhangLeading() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOverhangLeading = null;
        try {
            retObjectOverhangLeading = classInstance.Get("OverhangLeading");
            return (double)retObjectOverhangLeading;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectOverhangLeading_ToString = retObjectOverhangLeading == null ? "null" : retObjectOverhangLeading.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectOverhangLeadingNumber = (java.lang.Number)retObjectOverhangLeading;
                return retObjectOverhangLeadingNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectOverhangLeading != null ? retObjectOverhangLeading.getClass() : "null", retObjectOverhangLeading_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getOverhangTrailing() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOverhangTrailing = null;
        try {
            retObjectOverhangTrailing = classInstance.Get("OverhangTrailing");
            return (double)retObjectOverhangTrailing;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectOverhangTrailing_ToString = retObjectOverhangTrailing == null ? "null" : retObjectOverhangTrailing.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectOverhangTrailingNumber = (java.lang.Number)retObjectOverhangTrailing;
                return retObjectOverhangTrailingNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectOverhangTrailing != null ? retObjectOverhangTrailing.getClass() : "null", retObjectOverhangTrailing_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getPixelsPerDip() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectPixelsPerDip = null;
        try {
            retObjectPixelsPerDip = classInstance.Get("PixelsPerDip");
            return (double)retObjectPixelsPerDip;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectPixelsPerDip_ToString = retObjectPixelsPerDip == null ? "null" : retObjectPixelsPerDip.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectPixelsPerDipNumber = (java.lang.Number)retObjectPixelsPerDip;
                return retObjectPixelsPerDipNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectPixelsPerDip != null ? retObjectPixelsPerDip.getClass() : "null", retObjectPixelsPerDip_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPixelsPerDip(double PixelsPerDip) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("PixelsPerDip", PixelsPerDip);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getStart() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectStart = null;
        try {
            retObjectStart = classInstance.Get("Start");
            return (double)retObjectStart;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectStart_ToString = retObjectStart == null ? "null" : retObjectStart.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectStartNumber = (java.lang.Number)retObjectStart;
                return retObjectStartNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectStart != null ? retObjectStart.getClass() : "null", retObjectStart_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTextBaseline() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTextBaseline = null;
        try {
            retObjectTextBaseline = classInstance.Get("TextBaseline");
            return (double)retObjectTextBaseline;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTextBaseline_ToString = retObjectTextBaseline == null ? "null" : retObjectTextBaseline.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTextBaselineNumber = (java.lang.Number)retObjectTextBaseline;
                return retObjectTextBaselineNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectTextBaseline != null ? retObjectTextBaseline.getClass() : "null", retObjectTextBaseline_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTextHeight() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTextHeight = null;
        try {
            retObjectTextHeight = classInstance.Get("TextHeight");
            return (double)retObjectTextHeight;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTextHeight_ToString = retObjectTextHeight == null ? "null" : retObjectTextHeight.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTextHeightNumber = (java.lang.Number)retObjectTextHeight;
                return retObjectTextHeightNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectTextHeight != null ? retObjectTextHeight.getClass() : "null", retObjectTextHeight_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getWidth() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWidth = null;
        try {
            retObjectWidth = classInstance.Get("Width");
            return (double)retObjectWidth;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectWidth_ToString = retObjectWidth == null ? "null" : retObjectWidth.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectWidthNumber = (java.lang.Number)retObjectWidth;
                return retObjectWidthNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectWidth != null ? retObjectWidth.getClass() : "null", retObjectWidth_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getWidthIncludingTrailingWhitespace() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectWidthIncludingTrailingWhitespace = null;
        try {
            retObjectWidthIncludingTrailingWhitespace = classInstance.Get("WidthIncludingTrailingWhitespace");
            return (double)retObjectWidthIncludingTrailingWhitespace;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectWidthIncludingTrailingWhitespace_ToString = retObjectWidthIncludingTrailingWhitespace == null ? "null" : retObjectWidthIncludingTrailingWhitespace.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectWidthIncludingTrailingWhitespaceNumber = (java.lang.Number)retObjectWidthIncludingTrailingWhitespace;
                return retObjectWidthIncludingTrailingWhitespaceNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectWidthIncludingTrailingWhitespace != null ? retObjectWidthIncludingTrailingWhitespace.getClass() : "null", retObjectWidthIncludingTrailingWhitespace_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDependentLength() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDependentLength = null;
        try {
            retObjectDependentLength = classInstance.Get("DependentLength");
            return (int)retObjectDependentLength;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectDependentLength_ToString = retObjectDependentLength == null ? "null" : retObjectDependentLength.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectDependentLengthNumber = (java.lang.Number)retObjectDependentLength;
                return retObjectDependentLengthNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectDependentLength != null ? retObjectDependentLength.getClass() : "null", retObjectDependentLength_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getLength() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLength = null;
        try {
            retObjectLength = classInstance.Get("Length");
            return (int)retObjectLength;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectLength_ToString = retObjectLength == null ? "null" : retObjectLength.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectLengthNumber = (java.lang.Number)retObjectLength;
                return retObjectLengthNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectLength != null ? retObjectLength.getClass() : "null", retObjectLength_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNewlineLength() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNewlineLength = null;
        try {
            retObjectNewlineLength = classInstance.Get("NewlineLength");
            return (int)retObjectNewlineLength;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectNewlineLength_ToString = retObjectNewlineLength == null ? "null" : retObjectNewlineLength.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectNewlineLengthNumber = (java.lang.Number)retObjectNewlineLength;
                return retObjectNewlineLengthNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectNewlineLength != null ? retObjectNewlineLength.getClass() : "null", retObjectNewlineLength_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTrailingWhitespaceLength() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTrailingWhitespaceLength = null;
        try {
            retObjectTrailingWhitespaceLength = classInstance.Get("TrailingWhitespaceLength");
            return (int)retObjectTrailingWhitespaceLength;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTrailingWhitespaceLength_ToString = retObjectTrailingWhitespaceLength == null ? "null" : retObjectTrailingWhitespaceLength.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTrailingWhitespaceLengthNumber = (java.lang.Number)retObjectTrailingWhitespaceLength;
                return retObjectTrailingWhitespaceLengthNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectTrailingWhitespaceLength != null ? retObjectTrailingWhitespaceLength.getClass() : "null", retObjectTrailingWhitespaceLength_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}