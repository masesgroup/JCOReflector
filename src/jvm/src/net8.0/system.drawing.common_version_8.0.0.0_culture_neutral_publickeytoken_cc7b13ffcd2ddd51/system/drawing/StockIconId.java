/*
 *  MIT License
 *
 *  Copyright (c) 2024 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.14.4.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.drawing;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing System.Drawing.StockIconId, System.Drawing.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.StockIconId" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.StockIconId</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.14.4.0
 */
public class StockIconId extends NetObject  {
    /**
     * Fully assembly qualified name: System.Drawing.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
     */
    public static final String assemblyFullName = "System.Drawing.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
    /**
     * Assembly name: System.Drawing.Common
     */
    public static final String assemblyShortName = "System.Drawing.Common";
    /**
     * Qualified class name: System.Drawing.StockIconId
     */
    public static final String className = "System.Drawing.StockIconId";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public StockIconId(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public StockIconId() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static StockIconId getFrom(JCEnum object, String value) {
        try {
            return new StockIconId(object.fromValue(value));
        } catch (JCException e) {
            return new StockIconId(object);
        }
    }

    // Enum fields section
    
    public static StockIconId DocumentNoAssociation = getFrom(enumReflected, "DocumentNoAssociation");
    public static StockIconId DocumentWithAssociation = getFrom(enumReflected, "DocumentWithAssociation");
    public static StockIconId Application = getFrom(enumReflected, "Application");
    public static StockIconId Folder = getFrom(enumReflected, "Folder");
    public static StockIconId FolderOpen = getFrom(enumReflected, "FolderOpen");
    public static StockIconId Drive525 = getFrom(enumReflected, "Drive525");
    public static StockIconId Drive35 = getFrom(enumReflected, "Drive35");
    public static StockIconId DriveRemovable = getFrom(enumReflected, "DriveRemovable");
    public static StockIconId DriveFixed = getFrom(enumReflected, "DriveFixed");
    public static StockIconId DriveNet = getFrom(enumReflected, "DriveNet");
    public static StockIconId DriveNetDisabled = getFrom(enumReflected, "DriveNetDisabled");
    public static StockIconId DriveCD = getFrom(enumReflected, "DriveCD");
    public static StockIconId DriveRam = getFrom(enumReflected, "DriveRam");
    public static StockIconId World = getFrom(enumReflected, "World");
    public static StockIconId Server = getFrom(enumReflected, "Server");
    public static StockIconId Printer = getFrom(enumReflected, "Printer");
    public static StockIconId MyNetwork = getFrom(enumReflected, "MyNetwork");
    public static StockIconId Find = getFrom(enumReflected, "Find");
    public static StockIconId Help = getFrom(enumReflected, "Help");
    public static StockIconId Share = getFrom(enumReflected, "Share");
    public static StockIconId Link = getFrom(enumReflected, "Link");
    public static StockIconId SlowFile = getFrom(enumReflected, "SlowFile");
    public static StockIconId Recycler = getFrom(enumReflected, "Recycler");
    public static StockIconId RecyclerFull = getFrom(enumReflected, "RecyclerFull");
    public static StockIconId MediaCDAudio = getFrom(enumReflected, "MediaCDAudio");
    public static StockIconId Lock = getFrom(enumReflected, "Lock");
    public static StockIconId AutoList = getFrom(enumReflected, "AutoList");
    public static StockIconId PrinterNet = getFrom(enumReflected, "PrinterNet");
    public static StockIconId ServerShare = getFrom(enumReflected, "ServerShare");
    public static StockIconId PrinterFax = getFrom(enumReflected, "PrinterFax");
    public static StockIconId PrinterFaxNet = getFrom(enumReflected, "PrinterFaxNet");
    public static StockIconId PrinterFile = getFrom(enumReflected, "PrinterFile");
    public static StockIconId Stack = getFrom(enumReflected, "Stack");
    public static StockIconId MediaSVCD = getFrom(enumReflected, "MediaSVCD");
    public static StockIconId StuffedFolder = getFrom(enumReflected, "StuffedFolder");
    public static StockIconId DriveUnknown = getFrom(enumReflected, "DriveUnknown");
    public static StockIconId DriveDVD = getFrom(enumReflected, "DriveDVD");
    public static StockIconId MediaDVD = getFrom(enumReflected, "MediaDVD");
    public static StockIconId MediaDVDRAM = getFrom(enumReflected, "MediaDVDRAM");
    public static StockIconId MediaDVDRW = getFrom(enumReflected, "MediaDVDRW");
    public static StockIconId MediaDVDR = getFrom(enumReflected, "MediaDVDR");
    public static StockIconId MediaDVDROM = getFrom(enumReflected, "MediaDVDROM");
    public static StockIconId MediaCDAudioPlus = getFrom(enumReflected, "MediaCDAudioPlus");
    public static StockIconId MediaCDRW = getFrom(enumReflected, "MediaCDRW");
    public static StockIconId MediaCDR = getFrom(enumReflected, "MediaCDR");
    public static StockIconId MediaCDBurn = getFrom(enumReflected, "MediaCDBurn");
    public static StockIconId MediaBlankCD = getFrom(enumReflected, "MediaBlankCD");
    public static StockIconId MediaCDROM = getFrom(enumReflected, "MediaCDROM");
    public static StockIconId AudioFiles = getFrom(enumReflected, "AudioFiles");
    public static StockIconId ImageFiles = getFrom(enumReflected, "ImageFiles");
    public static StockIconId VideoFiles = getFrom(enumReflected, "VideoFiles");
    public static StockIconId MixedFiles = getFrom(enumReflected, "MixedFiles");
    public static StockIconId FolderBack = getFrom(enumReflected, "FolderBack");
    public static StockIconId FolderFront = getFrom(enumReflected, "FolderFront");
    public static StockIconId Shield = getFrom(enumReflected, "Shield");
    public static StockIconId Warning = getFrom(enumReflected, "Warning");
    public static StockIconId Info = getFrom(enumReflected, "Info");
    public static StockIconId Error = getFrom(enumReflected, "Error");
    public static StockIconId Key = getFrom(enumReflected, "Key");
    public static StockIconId Software = getFrom(enumReflected, "Software");
    public static StockIconId Rename = getFrom(enumReflected, "Rename");
    public static StockIconId Delete = getFrom(enumReflected, "Delete");
    public static StockIconId MediaAudioDVD = getFrom(enumReflected, "MediaAudioDVD");
    public static StockIconId MediaMovieDVD = getFrom(enumReflected, "MediaMovieDVD");
    public static StockIconId MediaEnhancedCD = getFrom(enumReflected, "MediaEnhancedCD");
    public static StockIconId MediaEnhancedDVD = getFrom(enumReflected, "MediaEnhancedDVD");
    public static StockIconId MediaHDDVD = getFrom(enumReflected, "MediaHDDVD");
    public static StockIconId MediaBluRay = getFrom(enumReflected, "MediaBluRay");
    public static StockIconId MediaVCD = getFrom(enumReflected, "MediaVCD");
    public static StockIconId MediaDVDPlusR = getFrom(enumReflected, "MediaDVDPlusR");
    public static StockIconId MediaDVDPlusRW = getFrom(enumReflected, "MediaDVDPlusRW");
    public static StockIconId DesktopPC = getFrom(enumReflected, "DesktopPC");
    public static StockIconId MobilePC = getFrom(enumReflected, "MobilePC");
    public static StockIconId Users = getFrom(enumReflected, "Users");
    public static StockIconId MediaSmartMedia = getFrom(enumReflected, "MediaSmartMedia");
    public static StockIconId MediaCompactFlash = getFrom(enumReflected, "MediaCompactFlash");
    public static StockIconId DeviceCellPhone = getFrom(enumReflected, "DeviceCellPhone");
    public static StockIconId DeviceCamera = getFrom(enumReflected, "DeviceCamera");
    public static StockIconId DeviceVideoCamera = getFrom(enumReflected, "DeviceVideoCamera");
    public static StockIconId DeviceAudioPlayer = getFrom(enumReflected, "DeviceAudioPlayer");
    public static StockIconId NetworkConnect = getFrom(enumReflected, "NetworkConnect");
    public static StockIconId Internet = getFrom(enumReflected, "Internet");
    public static StockIconId ZipFile = getFrom(enumReflected, "ZipFile");
    public static StockIconId Settings = getFrom(enumReflected, "Settings");
    public static StockIconId DriveHDDVD = getFrom(enumReflected, "DriveHDDVD");
    public static StockIconId DriveBD = getFrom(enumReflected, "DriveBD");
    public static StockIconId MediaHDDVDROM = getFrom(enumReflected, "MediaHDDVDROM");
    public static StockIconId MediaHDDVDR = getFrom(enumReflected, "MediaHDDVDR");
    public static StockIconId MediaHDDVDRAM = getFrom(enumReflected, "MediaHDDVDRAM");
    public static StockIconId MediaBDROM = getFrom(enumReflected, "MediaBDROM");
    public static StockIconId MediaBDR = getFrom(enumReflected, "MediaBDR");
    public static StockIconId MediaBDRE = getFrom(enumReflected, "MediaBDRE");
    public static StockIconId ClusteredDrive = getFrom(enumReflected, "ClusteredDrive");


    // Flags management section


}