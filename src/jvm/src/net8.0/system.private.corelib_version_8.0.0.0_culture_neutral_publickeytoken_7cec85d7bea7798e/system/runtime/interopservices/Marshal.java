/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.runtime.interopservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.Guid;
import system.runtime.interopservices.comtypes.ITypeInfo;
import system.runtime.interopservices.comtypes.ITypeInfoImplementation;
import system.Single;
import system.runtime.interopservices.SafeHandle;
import system.reflection.MethodInfo;


/**
 * The base .NET class managing System.Runtime.InteropServices.Marshal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Runtime.InteropServices.Marshal" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Runtime.InteropServices.Marshal</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class Marshal extends NetObject  {
    /**
     * Fully assembly qualified name: System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
     */
    public static final String assemblyFullName = "System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e";
    /**
     * Assembly name: System.Private.CoreLib
     */
    public static final String assemblyShortName = "System.Private.CoreLib";
    /**
     * Qualified class name: System.Runtime.InteropServices.Marshal
     */
    public static final String className = "System.Runtime.InteropServices.Marshal";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public Marshal(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link Marshal}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link Marshal} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static Marshal cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new Marshal(from.getJCOInstance());
    }

    // Constructors section
    
    public Marshal() throws Throwable {
    }

    
    // Methods section
    
    public static boolean AreComObjectsAvailableForCleanup() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectAreComObjectsAvailableForCleanup = null;
        try {
            retObjectAreComObjectsAvailableForCleanup = classType.Invoke("AreComObjectsAvailableForCleanup");
            return (boolean)retObjectAreComObjectsAvailableForCleanup;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectAreComObjectsAvailableForCleanup != null ? retObjectAreComObjectsAvailableForCleanup.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsComObject(NetObject o) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectIsComObject = null;
        try {
            retObjectIsComObject = classType.Invoke("IsComObject", o == null ? null : o.getJCOInstance());
            return (boolean)retObjectIsComObject;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsComObject != null ? retObjectIsComObject.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTypeVisibleFromCom(NetType t) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectIsTypeVisibleFromCom = null;
        try {
            retObjectIsTypeVisibleFromCom = classType.Invoke("IsTypeVisibleFromCom", t == null ? null : t.getJCOInstance());
            return (boolean)retObjectIsTypeVisibleFromCom;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsTypeVisibleFromCom != null ? retObjectIsTypeVisibleFromCom.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean SetComObjectData(NetObject obj, NetObject key, NetObject data) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSetComObjectData = null;
        try {
            retObjectSetComObjectData = classType.Invoke("SetComObjectData", obj == null ? null : obj.getJCOInstance(), key == null ? null : key.getJCOInstance(), data == null ? null : data.getJCOInstance());
            return (boolean)retObjectSetComObjectData;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectSetComObjectData != null ? retObjectSetComObjectData.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte ReadByte(NetObject ptr, int ofs) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReadByte = null;
        try {
            retObjectReadByte = classType.Invoke("ReadByte", ptr == null ? null : ptr.getJCOInstance(), ofs);
            return (byte)retObjectReadByte;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadByteNumber = (java.lang.Number)retObjectReadByte;
                return retObjectReadByteNumber.byteValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into byte and, as fallback solution, into java.lang.Number", retObjectReadByte != null ? retObjectReadByte.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short ReadInt16(NetObject ptr, int ofs) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReadInt16 = null;
        try {
            retObjectReadInt16 = classType.Invoke("ReadInt16", ptr == null ? null : ptr.getJCOInstance(), ofs);
            return (short)retObjectReadInt16;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt16Number = (java.lang.Number)retObjectReadInt16;
                return retObjectReadInt16Number.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into short and, as fallback solution, into java.lang.Number", retObjectReadInt16 != null ? retObjectReadInt16.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int FinalReleaseComObject(NetObject o) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectFinalReleaseComObject = null;
        try {
            retObjectFinalReleaseComObject = classType.Invoke("FinalReleaseComObject", o == null ? null : o.getJCOInstance());
            return (int)retObjectFinalReleaseComObject;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectFinalReleaseComObjectNumber = (java.lang.Number)retObjectFinalReleaseComObject;
                return retObjectFinalReleaseComObjectNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectFinalReleaseComObject != null ? retObjectFinalReleaseComObject.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetEndComSlot(NetType t) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetEndComSlot = null;
        try {
            retObjectGetEndComSlot = classType.Invoke("GetEndComSlot", t == null ? null : t.getJCOInstance());
            return (int)retObjectGetEndComSlot;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetEndComSlotNumber = (java.lang.Number)retObjectGetEndComSlot;
                return retObjectGetEndComSlotNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetEndComSlot != null ? retObjectGetEndComSlot.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetExceptionCode() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetExceptionCode = null;
        try {
            retObjectGetExceptionCode = classType.Invoke("GetExceptionCode");
            return (int)retObjectGetExceptionCode;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetExceptionCodeNumber = (java.lang.Number)retObjectGetExceptionCode;
                return retObjectGetExceptionCodeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetExceptionCode != null ? retObjectGetExceptionCode.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetHRForException(NetException e) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetHRForException = null;
        try {
            retObjectGetHRForException = classType.Invoke("GetHRForException", e == null ? null : e.getJCOInstance());
            return (int)retObjectGetHRForException;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetHRForExceptionNumber = (java.lang.Number)retObjectGetHRForException;
                return retObjectGetHRForExceptionNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetHRForException != null ? retObjectGetHRForException.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetHRForLastWin32Error() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetHRForLastWin32Error = null;
        try {
            retObjectGetHRForLastWin32Error = classType.Invoke("GetHRForLastWin32Error");
            return (int)retObjectGetHRForLastWin32Error;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetHRForLastWin32ErrorNumber = (java.lang.Number)retObjectGetHRForLastWin32Error;
                return retObjectGetHRForLastWin32ErrorNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetHRForLastWin32Error != null ? retObjectGetHRForLastWin32Error.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetLastPInvokeError() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetLastPInvokeError = null;
        try {
            retObjectGetLastPInvokeError = classType.Invoke("GetLastPInvokeError");
            return (int)retObjectGetLastPInvokeError;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetLastPInvokeErrorNumber = (java.lang.Number)retObjectGetLastPInvokeError;
                return retObjectGetLastPInvokeErrorNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetLastPInvokeError != null ? retObjectGetLastPInvokeError.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetLastSystemError() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetLastSystemError = null;
        try {
            retObjectGetLastSystemError = classType.Invoke("GetLastSystemError");
            return (int)retObjectGetLastSystemError;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetLastSystemErrorNumber = (java.lang.Number)retObjectGetLastSystemError;
                return retObjectGetLastSystemErrorNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetLastSystemError != null ? retObjectGetLastSystemError.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetLastWin32Error() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetLastWin32Error = null;
        try {
            retObjectGetLastWin32Error = classType.Invoke("GetLastWin32Error");
            return (int)retObjectGetLastWin32Error;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetLastWin32ErrorNumber = (java.lang.Number)retObjectGetLastWin32Error;
                return retObjectGetLastWin32ErrorNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetLastWin32Error != null ? retObjectGetLastWin32Error.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetStartComSlot(NetType t) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetStartComSlot = null;
        try {
            retObjectGetStartComSlot = classType.Invoke("GetStartComSlot", t == null ? null : t.getJCOInstance());
            return (int)retObjectGetStartComSlot;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetStartComSlotNumber = (java.lang.Number)retObjectGetStartComSlot;
                return retObjectGetStartComSlotNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetStartComSlot != null ? retObjectGetStartComSlot.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadInt32(NetObject ptr, int ofs) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReadInt32 = null;
        try {
            retObjectReadInt32 = classType.Invoke("ReadInt32", ptr == null ? null : ptr.getJCOInstance(), ofs);
            return (int)retObjectReadInt32;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt32Number = (java.lang.Number)retObjectReadInt32;
                return retObjectReadInt32Number.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectReadInt32 != null ? retObjectReadInt32.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReleaseComObject(NetObject o) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.NullReferenceException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReleaseComObject = null;
        try {
            retObjectReleaseComObject = classType.Invoke("ReleaseComObject", o == null ? null : o.getJCOInstance());
            return (int)retObjectReleaseComObject;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReleaseComObjectNumber = (java.lang.Number)retObjectReleaseComObject;
                return retObjectReleaseComObjectNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectReleaseComObject != null ? retObjectReleaseComObject.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int SizeOf(NetObject structure) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeOf = null;
        try {
            retObjectSizeOf = classType.Invoke("SizeOf", structure == null ? null : structure.getJCOInstance());
            return (int)retObjectSizeOf;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfNumber = (java.lang.Number)retObjectSizeOf;
                return retObjectSizeOfNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectSizeOf != null ? retObjectSizeOf.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int SizeOf(NetType t) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSizeOf = null;
        try {
            retObjectSizeOf = classType.Invoke("SizeOf", t == null ? null : t.getJCOInstance());
            return (int)retObjectSizeOf;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfNumber = (java.lang.Number)retObjectSizeOf;
                return retObjectSizeOfNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectSizeOf != null ? retObjectSizeOf.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadInt64(NetObject ptr, int ofs) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReadInt64 = null;
        try {
            retObjectReadInt64 = classType.Invoke("ReadInt64", ptr == null ? null : ptr.getJCOInstance(), ofs);
            return (long)retObjectReadInt64;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt64Number = (java.lang.Number)retObjectReadInt64;
                return retObjectReadInt64Number.longValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into long and, as fallback solution, into java.lang.Number", retObjectReadInt64 != null ? retObjectReadInt64.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetException GetExceptionForHR(int errorCode) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetExceptionForHR = null;
        try {
            retObjectGetExceptionForHR = classType.Invoke("GetExceptionForHR", errorCode);
            JCObject objGetExceptionForHR = (JCObject)retObjectGetExceptionForHR;
            return new NetException(objGetExceptionForHR);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetExceptionForHR != null ? retObjectGetExceptionForHR.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Guid GenerateGuidForType(NetType type) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGenerateGuidForType = null;
        try {
            retObjectGenerateGuidForType = classType.Invoke("GenerateGuidForType", type == null ? null : type.getJCOInstance());
            JCObject objGenerateGuidForType = (JCObject)retObjectGenerateGuidForType;
            return new Guid(objGenerateGuidForType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGenerateGuidForType != null ? retObjectGenerateGuidForType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject BindToMoniker(java.lang.String monikerName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectBindToMoniker = null;
        try {
            retObjectBindToMoniker = classType.Invoke("BindToMoniker", monikerName);
            JCObject objBindToMoniker = (JCObject)retObjectBindToMoniker;
            return new NetObject(objBindToMoniker);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBindToMoniker != null ? retObjectBindToMoniker.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateWrapperOfType(NetObject o, NetType t) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCreateWrapperOfType = null;
        try {
            retObjectCreateWrapperOfType = classType.Invoke("CreateWrapperOfType", o == null ? null : o.getJCOInstance(), t == null ? null : t.getJCOInstance());
            JCObject objCreateWrapperOfType = (JCObject)retObjectCreateWrapperOfType;
            return new NetObject(objCreateWrapperOfType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateWrapperOfType != null ? retObjectCreateWrapperOfType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject GetComObjectData(NetObject obj, NetObject key) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetComObjectData = null;
        try {
            retObjectGetComObjectData = classType.Invoke("GetComObjectData", obj == null ? null : obj.getJCOInstance(), key == null ? null : key.getJCOInstance());
            JCObject objGetComObjectData = (JCObject)retObjectGetComObjectData;
            return new NetObject(objGetComObjectData);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetComObjectData != null ? retObjectGetComObjectData.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GenerateProgIdForType(NetType type) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.FormatException, system.reflection.AmbiguousMatchException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGenerateProgIdForType = null;
        try {
            retObjectGenerateProgIdForType = classType.Invoke("GenerateProgIdForType", type == null ? null : type.getJCOInstance());
            return (java.lang.String)retObjectGenerateProgIdForType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGenerateProgIdForType != null ? retObjectGenerateProgIdForType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetLastPInvokeErrorMessage() throws Throwable, system.InvalidOperationException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.NotSupportedException, system.FormatException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetLastPInvokeErrorMessage = null;
        try {
            retObjectGetLastPInvokeErrorMessage = classType.Invoke("GetLastPInvokeErrorMessage");
            return (java.lang.String)retObjectGetLastPInvokeErrorMessage;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetLastPInvokeErrorMessage != null ? retObjectGetLastPInvokeErrorMessage.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetPInvokeErrorMessage(int error) throws Throwable, system.NotSupportedException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException, system.PlatformNotSupportedException, system.FormatException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetPInvokeErrorMessage = null;
        try {
            retObjectGetPInvokeErrorMessage = classType.Invoke("GetPInvokeErrorMessage", error);
            return (java.lang.String)retObjectGetPInvokeErrorMessage;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetPInvokeErrorMessage != null ? retObjectGetPInvokeErrorMessage.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetTypeInfoName(ITypeInfo typeInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetTypeInfoName = null;
        try {
            retObjectGetTypeInfoName = classType.Invoke("GetTypeInfoName", typeInfo == null ? null : typeInfo.getJCOInstance());
            return (java.lang.String)retObjectGetTypeInfoName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetTypeInfoName != null ? retObjectGetTypeInfoName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetType GetTypeFromCLSID(Guid clsid) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetTypeFromCLSID = null;
        try {
            retObjectGetTypeFromCLSID = classType.Invoke("GetTypeFromCLSID", clsid == null ? null : clsid.getJCOInstance());
            JCObject objGetTypeFromCLSID = (JCObject)retObjectGetTypeFromCLSID;
            return new NetType(objGetTypeFromCLSID);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeFromCLSID != null ? retObjectGetTypeFromCLSID.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ChangeWrapperHandleStrength(NetObject otp, boolean fIsWeak) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ChangeWrapperHandleStrength", otp == null ? null : otp.getJCOInstance(), fIsWeak);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CleanupUnusedObjectsInCurrentContext() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CleanupUnusedObjectsInCurrentContext");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Prelink(MethodInfo m) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Prelink", m == null ? null : m.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PrelinkAll(NetType c) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("PrelinkAll", c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetLastPInvokeError(int error) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SetLastPInvokeError", error);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetLastSystemError(int error) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SetLastSystemError", error);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ThrowExceptionForHR(int errorCode) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ThrowExceptionForHR", errorCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteByte(NetObject ptr, int ofs, byte val) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteByte", ptr == null ? null : ptr.getJCOInstance(), ofs, val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteInt16(JCORefOut<NetObject> ptr, int ofs, char val) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteInt16", ptr.getJCRefOut(), ofs, val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteInt16(NetObject ptr, int ofs, short val) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteInt16", ptr == null ? null : ptr.getJCOInstance(), ofs, val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteInt32(NetObject ptr, int ofs, int val) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteInt32", ptr == null ? null : ptr.getJCOInstance(), ofs, val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteInt64(NetObject ptr, int ofs, long val) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.AccessViolationException, system.OutOfMemoryException, system.runtime.interopservices.MarshalDirectiveException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteInt64", ptr == null ? null : ptr.getJCOInstance(), ofs, val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}