/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.metadata;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import system.SByte;
import system.Single;
import system.DateTime;
import system.Decimal;
import system.Guid;
import system.reflection.metadata.ConstantTypeCode;
import system.reflection.metadata.BlobHandle;
import system.reflection.metadata.EntityHandle;
import system.reflection.metadata.SerializationTypeCode;
import system.reflection.metadata.SignatureHeader;
import system.reflection.metadata.SignatureTypeCode;
import system.UInt16;
import system.UInt32;
import system.UInt64;


/**
 * The base .NET class managing System.Reflection.Metadata.BlobReader, System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.BlobReader" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.BlobReader</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class BlobReader extends ValueType  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.Metadata.BlobReader
     */
    public static final String className = "System.Reflection.Metadata.BlobReader";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public BlobReader(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link BlobReader}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link BlobReader} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static BlobReader cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new BlobReader(from.getJCOInstance());
    }

    // Constructors section
    
    public BlobReader() throws Throwable {
    }



    
    // Methods section
    
    public boolean ReadBoolean() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadBoolean = null;
        try {
            retObjectReadBoolean = classInstance.Invoke("ReadBoolean");
            return (boolean)retObjectReadBoolean;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectReadBoolean != null ? retObjectReadBoolean.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryReadCompressedInteger(JCORefOut<java.util.concurrent.atomic.AtomicInteger> value) throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryReadCompressedInteger = null;
        try {
            retObjectTryReadCompressedInteger = classInstance.Invoke("TryReadCompressedInteger", value.getJCRefOut());
            return (boolean)retObjectTryReadCompressedInteger;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryReadCompressedInteger != null ? retObjectTryReadCompressedInteger.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TryReadCompressedSignedInteger(JCORefOut<java.util.concurrent.atomic.AtomicInteger> value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryReadCompressedSignedInteger = null;
        try {
            retObjectTryReadCompressedSignedInteger = classInstance.Invoke("TryReadCompressedSignedInteger", value.getJCRefOut());
            return (boolean)retObjectTryReadCompressedSignedInteger;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryReadCompressedSignedInteger != null ? retObjectTryReadCompressedSignedInteger.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte ReadByte() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadByte = null;
        try {
            retObjectReadByte = classInstance.Invoke("ReadByte");
            return (byte)retObjectReadByte;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadByte_ToString = retObjectReadByte == null ? "null" : retObjectReadByte.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadByteNumber = (java.lang.Number)retObjectReadByte;
                return retObjectReadByteNumber.byteValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into byte and, as fallback solution, into java.lang.Number", retObjectReadByte != null ? retObjectReadByte.getClass() : "null", retObjectReadByte_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] ReadBytes(int byteCount) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadBytes = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectReadBytes = classInstance.Invoke("ReadBytes", byteCount);
            JCObject resultingObjects = (JCObject)retObjectReadBytes;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadBytes = 0; indexReadBytes < resultingArrayList.size(); indexReadBytes++ ) {
				resultingArray[indexReadBytes] = (byte)resultingArrayList.get(indexReadBytes);
            }
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into byte", retObjectReadBytes != null ? retObjectReadBytes.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public char ReadChar() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadChar = null;
        try {
            retObjectReadChar = classInstance.Invoke("ReadChar");
            return (char)retObjectReadChar;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into char", retObjectReadChar != null ? retObjectReadChar.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double ReadDouble() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadDouble = null;
        try {
            retObjectReadDouble = classInstance.Invoke("ReadDouble");
            return (double)retObjectReadDouble;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadDouble_ToString = retObjectReadDouble == null ? "null" : retObjectReadDouble.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadDoubleNumber = (java.lang.Number)retObjectReadDouble;
                return retObjectReadDoubleNumber.doubleValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into double and, as fallback solution, into java.lang.Number", retObjectReadDouble != null ? retObjectReadDouble.getClass() : "null", retObjectReadDouble_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short ReadInt16() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadInt16 = null;
        try {
            retObjectReadInt16 = classInstance.Invoke("ReadInt16");
            return (short)retObjectReadInt16;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadInt16_ToString = retObjectReadInt16 == null ? "null" : retObjectReadInt16.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt16Number = (java.lang.Number)retObjectReadInt16;
                return retObjectReadInt16Number.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectReadInt16 != null ? retObjectReadInt16.getClass() : "null", retObjectReadInt16_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int IndexOf(byte value) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIndexOf = null;
        try {
            retObjectIndexOf = classInstance.Invoke("IndexOf", value);
            return (int)retObjectIndexOf;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectIndexOf_ToString = retObjectIndexOf == null ? "null" : retObjectIndexOf.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectIndexOfNumber = (java.lang.Number)retObjectIndexOf;
                return retObjectIndexOfNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectIndexOf != null ? retObjectIndexOf.getClass() : "null", retObjectIndexOf_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadCompressedInteger() throws Throwable, system.ArgumentException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadCompressedInteger = null;
        try {
            retObjectReadCompressedInteger = classInstance.Invoke("ReadCompressedInteger");
            return (int)retObjectReadCompressedInteger;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadCompressedInteger_ToString = retObjectReadCompressedInteger == null ? "null" : retObjectReadCompressedInteger.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadCompressedIntegerNumber = (java.lang.Number)retObjectReadCompressedInteger;
                return retObjectReadCompressedIntegerNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadCompressedInteger != null ? retObjectReadCompressedInteger.getClass() : "null", retObjectReadCompressedInteger_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadCompressedSignedInteger() throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadCompressedSignedInteger = null;
        try {
            retObjectReadCompressedSignedInteger = classInstance.Invoke("ReadCompressedSignedInteger");
            return (int)retObjectReadCompressedSignedInteger;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadCompressedSignedInteger_ToString = retObjectReadCompressedSignedInteger == null ? "null" : retObjectReadCompressedSignedInteger.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadCompressedSignedIntegerNumber = (java.lang.Number)retObjectReadCompressedSignedInteger;
                return retObjectReadCompressedSignedIntegerNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadCompressedSignedInteger != null ? retObjectReadCompressedSignedInteger.getClass() : "null", retObjectReadCompressedSignedInteger_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ReadInt32() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadInt32 = null;
        try {
            retObjectReadInt32 = classInstance.Invoke("ReadInt32");
            return (int)retObjectReadInt32;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadInt32_ToString = retObjectReadInt32 == null ? "null" : retObjectReadInt32.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt32Number = (java.lang.Number)retObjectReadInt32;
                return retObjectReadInt32Number.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReadInt32 != null ? retObjectReadInt32.getClass() : "null", retObjectReadInt32_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long ReadInt64() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadInt64 = null;
        try {
            retObjectReadInt64 = classInstance.Invoke("ReadInt64");
            return (long)retObjectReadInt64;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReadInt64_ToString = retObjectReadInt64 == null ? "null" : retObjectReadInt64.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReadInt64Number = (java.lang.Number)retObjectReadInt64;
                return retObjectReadInt64Number.longValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into long and, as fallback solution, into java.lang.Number", retObjectReadInt64 != null ? retObjectReadInt64.getClass() : "null", retObjectReadInt64_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SByte ReadSByte() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSByte = null;
        try {
            retObjectReadSByte = classInstance.Invoke("ReadSByte");
            JCObject objReadSByte = (JCObject)retObjectReadSByte;
            return new SByte(objReadSByte);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadSByte != null ? retObjectReadSByte.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single ReadSingle() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSingle = null;
        try {
            retObjectReadSingle = classInstance.Invoke("ReadSingle");
            JCObject objReadSingle = (JCObject)retObjectReadSingle;
            return new Single(objReadSingle);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadSingle != null ? retObjectReadSingle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime ReadDateTime() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadDateTime = null;
        try {
            retObjectReadDateTime = classInstance.Invoke("ReadDateTime");
            JCObject objReadDateTime = (JCObject)retObjectReadDateTime;
            return new DateTime(objReadDateTime);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadDateTime != null ? retObjectReadDateTime.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Decimal ReadDecimal() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException, system.InvalidOperationException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadDecimal = null;
        try {
            retObjectReadDecimal = classInstance.Invoke("ReadDecimal");
            JCObject objReadDecimal = (JCObject)retObjectReadDecimal;
            return new Decimal(objReadDecimal);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadDecimal != null ? retObjectReadDecimal.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Guid ReadGuid() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadGuid = null;
        try {
            retObjectReadGuid = classInstance.Invoke("ReadGuid");
            JCObject objReadGuid = (JCObject)retObjectReadGuid;
            return new Guid(objReadGuid);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadGuid != null ? retObjectReadGuid.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject ReadConstant(ConstantTypeCode typeCode) throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadConstant = null;
        try {
            retObjectReadConstant = classInstance.Invoke("ReadConstant", typeCode == null ? null : typeCode.getJCOInstance());
            JCObject objReadConstant = (JCObject)retObjectReadConstant;
            return new NetObject(objReadConstant);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadConstant != null ? retObjectReadConstant.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle ReadBlobHandle() throws Throwable, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadBlobHandle = null;
        try {
            retObjectReadBlobHandle = classInstance.Invoke("ReadBlobHandle");
            JCObject objReadBlobHandle = (JCObject)retObjectReadBlobHandle;
            return new BlobHandle(objReadBlobHandle);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadBlobHandle != null ? retObjectReadBlobHandle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityHandle ReadTypeHandle() throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadTypeHandle = null;
        try {
            retObjectReadTypeHandle = classInstance.Invoke("ReadTypeHandle");
            JCObject objReadTypeHandle = (JCObject)retObjectReadTypeHandle;
            return new EntityHandle(objReadTypeHandle);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadTypeHandle != null ? retObjectReadTypeHandle.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SerializationTypeCode ReadSerializationTypeCode() throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSerializationTypeCode = null;
        try {
            retObjectReadSerializationTypeCode = classInstance.Invoke("ReadSerializationTypeCode");
            JCObject objReadSerializationTypeCode = (JCObject)retObjectReadSerializationTypeCode;
            return new SerializationTypeCode(objReadSerializationTypeCode);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadSerializationTypeCode != null ? retObjectReadSerializationTypeCode.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SignatureHeader ReadSignatureHeader() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSignatureHeader = null;
        try {
            retObjectReadSignatureHeader = classInstance.Invoke("ReadSignatureHeader");
            JCObject objReadSignatureHeader = (JCObject)retObjectReadSignatureHeader;
            return new SignatureHeader(objReadSignatureHeader);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadSignatureHeader != null ? retObjectReadSignatureHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SignatureTypeCode ReadSignatureTypeCode() throws Throwable, system.ArgumentException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSignatureTypeCode = null;
        try {
            retObjectReadSignatureTypeCode = classInstance.Invoke("ReadSignatureTypeCode");
            JCObject objReadSignatureTypeCode = (JCObject)retObjectReadSignatureTypeCode;
            return new SignatureTypeCode(objReadSignatureTypeCode);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadSignatureTypeCode != null ? retObjectReadSignatureTypeCode.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ReadSerializedString() throws Throwable, system.ArgumentException, system.BadImageFormatException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadSerializedString = null;
        try {
            retObjectReadSerializedString = classInstance.Invoke("ReadSerializedString");
            return (java.lang.String)retObjectReadSerializedString;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectReadSerializedString != null ? retObjectReadSerializedString.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ReadUTF16(int byteCount) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadUTF16 = null;
        try {
            retObjectReadUTF16 = classInstance.Invoke("ReadUTF16", byteCount);
            return (java.lang.String)retObjectReadUTF16;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectReadUTF16 != null ? retObjectReadUTF16.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ReadUTF8(int byteCount) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadUTF8 = null;
        try {
            retObjectReadUTF8 = classInstance.Invoke("ReadUTF8", byteCount);
            return (java.lang.String)retObjectReadUTF8;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectReadUTF8 != null ? retObjectReadUTF8.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 ReadUInt16() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadUInt16 = null;
        try {
            retObjectReadUInt16 = classInstance.Invoke("ReadUInt16");
            JCObject objReadUInt16 = (JCObject)retObjectReadUInt16;
            return new UInt16(objReadUInt16);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadUInt16 != null ? retObjectReadUInt16.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt32 ReadUInt32() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadUInt32 = null;
        try {
            retObjectReadUInt32 = classInstance.Invoke("ReadUInt32");
            JCObject objReadUInt32 = (JCObject)retObjectReadUInt32;
            return new UInt32(objReadUInt32);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadUInt32 != null ? retObjectReadUInt32.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 ReadUInt64() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReadUInt64 = null;
        try {
            retObjectReadUInt64 = classInstance.Invoke("ReadUInt64");
            JCObject objReadUInt64 = (JCObject)retObjectReadUInt64;
            return new UInt64(objReadUInt64);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectReadUInt64 != null ? retObjectReadUInt64.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Align(byte alignment) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Align", alignment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReadBytes(int byteCount, byte[] buffer, int bufferOffset) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException, system.InvalidOperationException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ReadBytes", byteCount, buffer, bufferOffset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReadBytes(int dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.BadImageFormatException, system.InvalidOperationException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ReadBytes", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Reset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Reset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public int getLength() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLength = null;
        try {
            retObjectLength = classInstance.Get("Length");
            return (int)retObjectLength;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectLength_ToString = retObjectLength == null ? "null" : retObjectLength.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectLengthNumber = (java.lang.Number)retObjectLength;
                return retObjectLengthNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectLength != null ? retObjectLength.getClass() : "null", retObjectLength_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getOffset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOffset = null;
        try {
            retObjectOffset = classInstance.Get("Offset");
            return (int)retObjectOffset;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectOffset_ToString = retObjectOffset == null ? "null" : retObjectOffset.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectOffsetNumber = (java.lang.Number)retObjectOffset;
                return retObjectOffsetNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectOffset != null ? retObjectOffset.getClass() : "null", retObjectOffset_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOffset(int Offset) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Offset", Offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRemainingBytes() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectRemainingBytes = null;
        try {
            retObjectRemainingBytes = classInstance.Get("RemainingBytes");
            return (int)retObjectRemainingBytes;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectRemainingBytes_ToString = retObjectRemainingBytes == null ? "null" : retObjectRemainingBytes.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectRemainingBytesNumber = (java.lang.Number)retObjectRemainingBytes;
                return retObjectRemainingBytesNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectRemainingBytes != null ? retObjectRemainingBytes.getClass() : "null", retObjectRemainingBytes_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}