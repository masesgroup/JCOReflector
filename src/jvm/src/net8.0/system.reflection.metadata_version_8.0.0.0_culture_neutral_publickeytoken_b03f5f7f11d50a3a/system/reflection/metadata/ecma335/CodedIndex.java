/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.metadata.ecma335;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.metadata.EntityHandle;


/**
 * The base .NET class managing System.Reflection.Metadata.Ecma335.CodedIndex, System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.Ecma335.CodedIndex" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.Ecma335.CodedIndex</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class CodedIndex extends NetObject  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.Metadata.Ecma335.CodedIndex
     */
    public static final String className = "System.Reflection.Metadata.Ecma335.CodedIndex";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CodedIndex(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CodedIndex}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CodedIndex} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CodedIndex cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CodedIndex(from.getJCOInstance());
    }

    // Constructors section
    
    public CodedIndex() throws Throwable {
    }

    
    // Methods section
    
    public static int CustomAttributeType(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCustomAttributeType = null;
        try {
            retObjectCustomAttributeType = classType.Invoke("CustomAttributeType", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectCustomAttributeType;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectCustomAttributeType_ToString = retObjectCustomAttributeType == null ? "null" : retObjectCustomAttributeType.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectCustomAttributeTypeNumber = (java.lang.Number)retObjectCustomAttributeType;
                return retObjectCustomAttributeTypeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectCustomAttributeType != null ? retObjectCustomAttributeType.getClass() : "null", retObjectCustomAttributeType_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasConstant(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasConstant = null;
        try {
            retObjectHasConstant = classType.Invoke("HasConstant", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasConstant;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasConstant_ToString = retObjectHasConstant == null ? "null" : retObjectHasConstant.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasConstantNumber = (java.lang.Number)retObjectHasConstant;
                return retObjectHasConstantNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasConstant != null ? retObjectHasConstant.getClass() : "null", retObjectHasConstant_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasCustomAttribute(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasCustomAttribute = null;
        try {
            retObjectHasCustomAttribute = classType.Invoke("HasCustomAttribute", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasCustomAttribute;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasCustomAttribute_ToString = retObjectHasCustomAttribute == null ? "null" : retObjectHasCustomAttribute.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasCustomAttributeNumber = (java.lang.Number)retObjectHasCustomAttribute;
                return retObjectHasCustomAttributeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasCustomAttribute != null ? retObjectHasCustomAttribute.getClass() : "null", retObjectHasCustomAttribute_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasCustomDebugInformation(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasCustomDebugInformation = null;
        try {
            retObjectHasCustomDebugInformation = classType.Invoke("HasCustomDebugInformation", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasCustomDebugInformation;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasCustomDebugInformation_ToString = retObjectHasCustomDebugInformation == null ? "null" : retObjectHasCustomDebugInformation.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasCustomDebugInformationNumber = (java.lang.Number)retObjectHasCustomDebugInformation;
                return retObjectHasCustomDebugInformationNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasCustomDebugInformation != null ? retObjectHasCustomDebugInformation.getClass() : "null", retObjectHasCustomDebugInformation_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasDeclSecurity(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasDeclSecurity = null;
        try {
            retObjectHasDeclSecurity = classType.Invoke("HasDeclSecurity", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasDeclSecurity;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasDeclSecurity_ToString = retObjectHasDeclSecurity == null ? "null" : retObjectHasDeclSecurity.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasDeclSecurityNumber = (java.lang.Number)retObjectHasDeclSecurity;
                return retObjectHasDeclSecurityNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasDeclSecurity != null ? retObjectHasDeclSecurity.getClass() : "null", retObjectHasDeclSecurity_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasFieldMarshal(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasFieldMarshal = null;
        try {
            retObjectHasFieldMarshal = classType.Invoke("HasFieldMarshal", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasFieldMarshal;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasFieldMarshal_ToString = retObjectHasFieldMarshal == null ? "null" : retObjectHasFieldMarshal.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasFieldMarshalNumber = (java.lang.Number)retObjectHasFieldMarshal;
                return retObjectHasFieldMarshalNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasFieldMarshal != null ? retObjectHasFieldMarshal.getClass() : "null", retObjectHasFieldMarshal_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int HasSemantics(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectHasSemantics = null;
        try {
            retObjectHasSemantics = classType.Invoke("HasSemantics", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectHasSemantics;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHasSemantics_ToString = retObjectHasSemantics == null ? "null" : retObjectHasSemantics.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHasSemanticsNumber = (java.lang.Number)retObjectHasSemantics;
                return retObjectHasSemanticsNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectHasSemantics != null ? retObjectHasSemantics.getClass() : "null", retObjectHasSemantics_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Implementation(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectImplementation = null;
        try {
            retObjectImplementation = classType.Invoke("Implementation", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectImplementation;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectImplementation_ToString = retObjectImplementation == null ? "null" : retObjectImplementation.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectImplementationNumber = (java.lang.Number)retObjectImplementation;
                return retObjectImplementationNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectImplementation != null ? retObjectImplementation.getClass() : "null", retObjectImplementation_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int MemberForwarded(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectMemberForwarded = null;
        try {
            retObjectMemberForwarded = classType.Invoke("MemberForwarded", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectMemberForwarded;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMemberForwarded_ToString = retObjectMemberForwarded == null ? "null" : retObjectMemberForwarded.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMemberForwardedNumber = (java.lang.Number)retObjectMemberForwarded;
                return retObjectMemberForwardedNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMemberForwarded != null ? retObjectMemberForwarded.getClass() : "null", retObjectMemberForwarded_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int MemberRefParent(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectMemberRefParent = null;
        try {
            retObjectMemberRefParent = classType.Invoke("MemberRefParent", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectMemberRefParent;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMemberRefParent_ToString = retObjectMemberRefParent == null ? "null" : retObjectMemberRefParent.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMemberRefParentNumber = (java.lang.Number)retObjectMemberRefParent;
                return retObjectMemberRefParentNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMemberRefParent != null ? retObjectMemberRefParent.getClass() : "null", retObjectMemberRefParent_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int MethodDefOrRef(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectMethodDefOrRef = null;
        try {
            retObjectMethodDefOrRef = classType.Invoke("MethodDefOrRef", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectMethodDefOrRef;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMethodDefOrRef_ToString = retObjectMethodDefOrRef == null ? "null" : retObjectMethodDefOrRef.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMethodDefOrRefNumber = (java.lang.Number)retObjectMethodDefOrRef;
                return retObjectMethodDefOrRefNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMethodDefOrRef != null ? retObjectMethodDefOrRef.getClass() : "null", retObjectMethodDefOrRef_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ResolutionScope(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolutionScope = null;
        try {
            retObjectResolutionScope = classType.Invoke("ResolutionScope", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectResolutionScope;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectResolutionScope_ToString = retObjectResolutionScope == null ? "null" : retObjectResolutionScope.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectResolutionScopeNumber = (java.lang.Number)retObjectResolutionScope;
                return retObjectResolutionScopeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectResolutionScope != null ? retObjectResolutionScope.getClass() : "null", retObjectResolutionScope_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int TypeDefOrRef(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectTypeDefOrRef = null;
        try {
            retObjectTypeDefOrRef = classType.Invoke("TypeDefOrRef", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectTypeDefOrRef;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTypeDefOrRef_ToString = retObjectTypeDefOrRef == null ? "null" : retObjectTypeDefOrRef.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTypeDefOrRefNumber = (java.lang.Number)retObjectTypeDefOrRef;
                return retObjectTypeDefOrRefNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectTypeDefOrRef != null ? retObjectTypeDefOrRef.getClass() : "null", retObjectTypeDefOrRef_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int TypeDefOrRefOrSpec(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectTypeDefOrRefOrSpec = null;
        try {
            retObjectTypeDefOrRefOrSpec = classType.Invoke("TypeDefOrRefOrSpec", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectTypeDefOrRefOrSpec;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTypeDefOrRefOrSpec_ToString = retObjectTypeDefOrRefOrSpec == null ? "null" : retObjectTypeDefOrRefOrSpec.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTypeDefOrRefOrSpecNumber = (java.lang.Number)retObjectTypeDefOrRefOrSpec;
                return retObjectTypeDefOrRefOrSpecNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectTypeDefOrRefOrSpec != null ? retObjectTypeDefOrRefOrSpec.getClass() : "null", retObjectTypeDefOrRefOrSpec_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int TypeOrMethodDef(EntityHandle handle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectTypeOrMethodDef = null;
        try {
            retObjectTypeOrMethodDef = classType.Invoke("TypeOrMethodDef", handle == null ? null : handle.getJCOInstance());
            return (int)retObjectTypeOrMethodDef;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectTypeOrMethodDef_ToString = retObjectTypeOrMethodDef == null ? "null" : retObjectTypeOrMethodDef.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectTypeOrMethodDefNumber = (java.lang.Number)retObjectTypeOrMethodDef;
                return retObjectTypeOrMethodDefNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectTypeOrMethodDef != null ? retObjectTypeOrMethodDef.getClass() : "null", retObjectTypeOrMethodDef_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}