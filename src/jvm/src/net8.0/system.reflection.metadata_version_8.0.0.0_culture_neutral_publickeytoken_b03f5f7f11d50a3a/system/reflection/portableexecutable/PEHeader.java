/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.portableexecutable;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.portableexecutable.DirectoryEntry;
import system.reflection.portableexecutable.DllCharacteristics;
import system.reflection.portableexecutable.PEMagic;
import system.reflection.portableexecutable.Subsystem;
import system.UInt16;
import system.UInt32;
import system.UInt64;


/**
 * The base .NET class managing System.Reflection.PortableExecutable.PEHeader, System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class PEHeader extends NetObject  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.PortableExecutable.PEHeader
     */
    public static final String className = "System.Reflection.PortableExecutable.PEHeader";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PEHeader(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PEHeader}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PEHeader} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PEHeader cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PEHeader(from.getJCOInstance());
    }

    // Constructors section
    
    public PEHeader() throws Throwable {
    }



    
    // Methods section
    

    
    // Properties section
    
    public byte getMajorLinkerVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMajorLinkerVersion = null;
        try {
            retObjectMajorLinkerVersion = classInstance.Get("MajorLinkerVersion");
            return (byte)retObjectMajorLinkerVersion;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMajorLinkerVersion_ToString = retObjectMajorLinkerVersion == null ? "null" : retObjectMajorLinkerVersion.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMajorLinkerVersionNumber = (java.lang.Number)retObjectMajorLinkerVersion;
                return retObjectMajorLinkerVersionNumber.byteValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into byte and, as fallback solution, into java.lang.Number", retObjectMajorLinkerVersion != null ? retObjectMajorLinkerVersion.getClass() : "null", retObjectMajorLinkerVersion_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte getMinorLinkerVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMinorLinkerVersion = null;
        try {
            retObjectMinorLinkerVersion = classInstance.Get("MinorLinkerVersion");
            return (byte)retObjectMinorLinkerVersion;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMinorLinkerVersion_ToString = retObjectMinorLinkerVersion == null ? "null" : retObjectMinorLinkerVersion.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMinorLinkerVersionNumber = (java.lang.Number)retObjectMinorLinkerVersion;
                return retObjectMinorLinkerVersionNumber.byteValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into byte and, as fallback solution, into java.lang.Number", retObjectMinorLinkerVersion != null ? retObjectMinorLinkerVersion.getClass() : "null", retObjectMinorLinkerVersion_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAddressOfEntryPoint() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddressOfEntryPoint = null;
        try {
            retObjectAddressOfEntryPoint = classInstance.Get("AddressOfEntryPoint");
            return (int)retObjectAddressOfEntryPoint;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectAddressOfEntryPoint_ToString = retObjectAddressOfEntryPoint == null ? "null" : retObjectAddressOfEntryPoint.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectAddressOfEntryPointNumber = (java.lang.Number)retObjectAddressOfEntryPoint;
                return retObjectAddressOfEntryPointNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectAddressOfEntryPoint != null ? retObjectAddressOfEntryPoint.getClass() : "null", retObjectAddressOfEntryPoint_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBaseOfCode() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBaseOfCode = null;
        try {
            retObjectBaseOfCode = classInstance.Get("BaseOfCode");
            return (int)retObjectBaseOfCode;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBaseOfCode_ToString = retObjectBaseOfCode == null ? "null" : retObjectBaseOfCode.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBaseOfCodeNumber = (java.lang.Number)retObjectBaseOfCode;
                return retObjectBaseOfCodeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectBaseOfCode != null ? retObjectBaseOfCode.getClass() : "null", retObjectBaseOfCode_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBaseOfData() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBaseOfData = null;
        try {
            retObjectBaseOfData = classInstance.Get("BaseOfData");
            return (int)retObjectBaseOfData;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBaseOfData_ToString = retObjectBaseOfData == null ? "null" : retObjectBaseOfData.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBaseOfDataNumber = (java.lang.Number)retObjectBaseOfData;
                return retObjectBaseOfDataNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectBaseOfData != null ? retObjectBaseOfData.getClass() : "null", retObjectBaseOfData_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFileAlignment() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFileAlignment = null;
        try {
            retObjectFileAlignment = classInstance.Get("FileAlignment");
            return (int)retObjectFileAlignment;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectFileAlignment_ToString = retObjectFileAlignment == null ? "null" : retObjectFileAlignment.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectFileAlignmentNumber = (java.lang.Number)retObjectFileAlignment;
                return retObjectFileAlignmentNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectFileAlignment != null ? retObjectFileAlignment.getClass() : "null", retObjectFileAlignment_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfRvaAndSizes() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNumberOfRvaAndSizes = null;
        try {
            retObjectNumberOfRvaAndSizes = classInstance.Get("NumberOfRvaAndSizes");
            return (int)retObjectNumberOfRvaAndSizes;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectNumberOfRvaAndSizes_ToString = retObjectNumberOfRvaAndSizes == null ? "null" : retObjectNumberOfRvaAndSizes.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectNumberOfRvaAndSizesNumber = (java.lang.Number)retObjectNumberOfRvaAndSizes;
                return retObjectNumberOfRvaAndSizesNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectNumberOfRvaAndSizes != null ? retObjectNumberOfRvaAndSizes.getClass() : "null", retObjectNumberOfRvaAndSizes_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSectionAlignment() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSectionAlignment = null;
        try {
            retObjectSectionAlignment = classInstance.Get("SectionAlignment");
            return (int)retObjectSectionAlignment;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSectionAlignment_ToString = retObjectSectionAlignment == null ? "null" : retObjectSectionAlignment.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSectionAlignmentNumber = (java.lang.Number)retObjectSectionAlignment;
                return retObjectSectionAlignmentNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSectionAlignment != null ? retObjectSectionAlignment.getClass() : "null", retObjectSectionAlignment_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeOfCode() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfCode = null;
        try {
            retObjectSizeOfCode = classInstance.Get("SizeOfCode");
            return (int)retObjectSizeOfCode;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSizeOfCode_ToString = retObjectSizeOfCode == null ? "null" : retObjectSizeOfCode.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfCodeNumber = (java.lang.Number)retObjectSizeOfCode;
                return retObjectSizeOfCodeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSizeOfCode != null ? retObjectSizeOfCode.getClass() : "null", retObjectSizeOfCode_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeOfHeaders() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfHeaders = null;
        try {
            retObjectSizeOfHeaders = classInstance.Get("SizeOfHeaders");
            return (int)retObjectSizeOfHeaders;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSizeOfHeaders_ToString = retObjectSizeOfHeaders == null ? "null" : retObjectSizeOfHeaders.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfHeadersNumber = (java.lang.Number)retObjectSizeOfHeaders;
                return retObjectSizeOfHeadersNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSizeOfHeaders != null ? retObjectSizeOfHeaders.getClass() : "null", retObjectSizeOfHeaders_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeOfImage() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfImage = null;
        try {
            retObjectSizeOfImage = classInstance.Get("SizeOfImage");
            return (int)retObjectSizeOfImage;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSizeOfImage_ToString = retObjectSizeOfImage == null ? "null" : retObjectSizeOfImage.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfImageNumber = (java.lang.Number)retObjectSizeOfImage;
                return retObjectSizeOfImageNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSizeOfImage != null ? retObjectSizeOfImage.getClass() : "null", retObjectSizeOfImage_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeOfInitializedData() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfInitializedData = null;
        try {
            retObjectSizeOfInitializedData = classInstance.Get("SizeOfInitializedData");
            return (int)retObjectSizeOfInitializedData;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSizeOfInitializedData_ToString = retObjectSizeOfInitializedData == null ? "null" : retObjectSizeOfInitializedData.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfInitializedDataNumber = (java.lang.Number)retObjectSizeOfInitializedData;
                return retObjectSizeOfInitializedDataNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSizeOfInitializedData != null ? retObjectSizeOfInitializedData.getClass() : "null", retObjectSizeOfInitializedData_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeOfUninitializedData() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfUninitializedData = null;
        try {
            retObjectSizeOfUninitializedData = classInstance.Get("SizeOfUninitializedData");
            return (int)retObjectSizeOfUninitializedData;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectSizeOfUninitializedData_ToString = retObjectSizeOfUninitializedData == null ? "null" : retObjectSizeOfUninitializedData.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectSizeOfUninitializedDataNumber = (java.lang.Number)retObjectSizeOfUninitializedData;
                return retObjectSizeOfUninitializedDataNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectSizeOfUninitializedData != null ? retObjectSizeOfUninitializedData.getClass() : "null", retObjectSizeOfUninitializedData_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getBaseRelocationTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBaseRelocationTableDirectory = null;
        try {
            retObjectBaseRelocationTableDirectory = classInstance.Get("BaseRelocationTableDirectory");
            JCObject val = (JCObject)retObjectBaseRelocationTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBaseRelocationTableDirectory != null ? retObjectBaseRelocationTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getBoundImportTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBoundImportTableDirectory = null;
        try {
            retObjectBoundImportTableDirectory = classInstance.Get("BoundImportTableDirectory");
            JCObject val = (JCObject)retObjectBoundImportTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBoundImportTableDirectory != null ? retObjectBoundImportTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getCertificateTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCertificateTableDirectory = null;
        try {
            retObjectCertificateTableDirectory = classInstance.Get("CertificateTableDirectory");
            JCObject val = (JCObject)retObjectCertificateTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCertificateTableDirectory != null ? retObjectCertificateTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getCopyrightTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCopyrightTableDirectory = null;
        try {
            retObjectCopyrightTableDirectory = classInstance.Get("CopyrightTableDirectory");
            JCObject val = (JCObject)retObjectCopyrightTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCopyrightTableDirectory != null ? retObjectCopyrightTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getCorHeaderTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCorHeaderTableDirectory = null;
        try {
            retObjectCorHeaderTableDirectory = classInstance.Get("CorHeaderTableDirectory");
            JCObject val = (JCObject)retObjectCorHeaderTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCorHeaderTableDirectory != null ? retObjectCorHeaderTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getDebugTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDebugTableDirectory = null;
        try {
            retObjectDebugTableDirectory = classInstance.Get("DebugTableDirectory");
            JCObject val = (JCObject)retObjectDebugTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDebugTableDirectory != null ? retObjectDebugTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getDelayImportTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDelayImportTableDirectory = null;
        try {
            retObjectDelayImportTableDirectory = classInstance.Get("DelayImportTableDirectory");
            JCObject val = (JCObject)retObjectDelayImportTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDelayImportTableDirectory != null ? retObjectDelayImportTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getExceptionTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExceptionTableDirectory = null;
        try {
            retObjectExceptionTableDirectory = classInstance.Get("ExceptionTableDirectory");
            JCObject val = (JCObject)retObjectExceptionTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExceptionTableDirectory != null ? retObjectExceptionTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getExportTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExportTableDirectory = null;
        try {
            retObjectExportTableDirectory = classInstance.Get("ExportTableDirectory");
            JCObject val = (JCObject)retObjectExportTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExportTableDirectory != null ? retObjectExportTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getGlobalPointerTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGlobalPointerTableDirectory = null;
        try {
            retObjectGlobalPointerTableDirectory = classInstance.Get("GlobalPointerTableDirectory");
            JCObject val = (JCObject)retObjectGlobalPointerTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGlobalPointerTableDirectory != null ? retObjectGlobalPointerTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getImportAddressTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectImportAddressTableDirectory = null;
        try {
            retObjectImportAddressTableDirectory = classInstance.Get("ImportAddressTableDirectory");
            JCObject val = (JCObject)retObjectImportAddressTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectImportAddressTableDirectory != null ? retObjectImportAddressTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getImportTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectImportTableDirectory = null;
        try {
            retObjectImportTableDirectory = classInstance.Get("ImportTableDirectory");
            JCObject val = (JCObject)retObjectImportTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectImportTableDirectory != null ? retObjectImportTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getLoadConfigTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLoadConfigTableDirectory = null;
        try {
            retObjectLoadConfigTableDirectory = classInstance.Get("LoadConfigTableDirectory");
            JCObject val = (JCObject)retObjectLoadConfigTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectLoadConfigTableDirectory != null ? retObjectLoadConfigTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getResourceTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResourceTableDirectory = null;
        try {
            retObjectResourceTableDirectory = classInstance.Get("ResourceTableDirectory");
            JCObject val = (JCObject)retObjectResourceTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResourceTableDirectory != null ? retObjectResourceTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getThreadLocalStorageTableDirectory() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectThreadLocalStorageTableDirectory = null;
        try {
            retObjectThreadLocalStorageTableDirectory = classInstance.Get("ThreadLocalStorageTableDirectory");
            JCObject val = (JCObject)retObjectThreadLocalStorageTableDirectory;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectThreadLocalStorageTableDirectory != null ? retObjectThreadLocalStorageTableDirectory.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DllCharacteristics getDllCharacteristics() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDllCharacteristics = null;
        try {
            retObjectDllCharacteristics = classInstance.Get("DllCharacteristics");
            JCObject val = (JCObject)retObjectDllCharacteristics;
            return new DllCharacteristics(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDllCharacteristics != null ? retObjectDllCharacteristics.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PEMagic getMagic() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMagic = null;
        try {
            retObjectMagic = classInstance.Get("Magic");
            JCObject val = (JCObject)retObjectMagic;
            return new PEMagic(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMagic != null ? retObjectMagic.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Subsystem getSubsystem() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSubsystem = null;
        try {
            retObjectSubsystem = classInstance.Get("Subsystem");
            JCObject val = (JCObject)retObjectSubsystem;
            return new Subsystem(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSubsystem != null ? retObjectSubsystem.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMajorImageVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMajorImageVersion = null;
        try {
            retObjectMajorImageVersion = classInstance.Get("MajorImageVersion");
            JCObject val = (JCObject)retObjectMajorImageVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMajorImageVersion != null ? retObjectMajorImageVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMajorOperatingSystemVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMajorOperatingSystemVersion = null;
        try {
            retObjectMajorOperatingSystemVersion = classInstance.Get("MajorOperatingSystemVersion");
            JCObject val = (JCObject)retObjectMajorOperatingSystemVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMajorOperatingSystemVersion != null ? retObjectMajorOperatingSystemVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMajorSubsystemVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMajorSubsystemVersion = null;
        try {
            retObjectMajorSubsystemVersion = classInstance.Get("MajorSubsystemVersion");
            JCObject val = (JCObject)retObjectMajorSubsystemVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMajorSubsystemVersion != null ? retObjectMajorSubsystemVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMinorImageVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMinorImageVersion = null;
        try {
            retObjectMinorImageVersion = classInstance.Get("MinorImageVersion");
            JCObject val = (JCObject)retObjectMinorImageVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMinorImageVersion != null ? retObjectMinorImageVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMinorOperatingSystemVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMinorOperatingSystemVersion = null;
        try {
            retObjectMinorOperatingSystemVersion = classInstance.Get("MinorOperatingSystemVersion");
            JCObject val = (JCObject)retObjectMinorOperatingSystemVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMinorOperatingSystemVersion != null ? retObjectMinorOperatingSystemVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt16 getMinorSubsystemVersion() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMinorSubsystemVersion = null;
        try {
            retObjectMinorSubsystemVersion = classInstance.Get("MinorSubsystemVersion");
            JCObject val = (JCObject)retObjectMinorSubsystemVersion;
            return new UInt16(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectMinorSubsystemVersion != null ? retObjectMinorSubsystemVersion.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt32 getCheckSum() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCheckSum = null;
        try {
            retObjectCheckSum = classInstance.Get("CheckSum");
            JCObject val = (JCObject)retObjectCheckSum;
            return new UInt32(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCheckSum != null ? retObjectCheckSum.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 getImageBase() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectImageBase = null;
        try {
            retObjectImageBase = classInstance.Get("ImageBase");
            JCObject val = (JCObject)retObjectImageBase;
            return new UInt64(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectImageBase != null ? retObjectImageBase.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 getSizeOfHeapCommit() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfHeapCommit = null;
        try {
            retObjectSizeOfHeapCommit = classInstance.Get("SizeOfHeapCommit");
            JCObject val = (JCObject)retObjectSizeOfHeapCommit;
            return new UInt64(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeOfHeapCommit != null ? retObjectSizeOfHeapCommit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 getSizeOfHeapReserve() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfHeapReserve = null;
        try {
            retObjectSizeOfHeapReserve = classInstance.Get("SizeOfHeapReserve");
            JCObject val = (JCObject)retObjectSizeOfHeapReserve;
            return new UInt64(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeOfHeapReserve != null ? retObjectSizeOfHeapReserve.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 getSizeOfStackCommit() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfStackCommit = null;
        try {
            retObjectSizeOfStackCommit = classInstance.Get("SizeOfStackCommit");
            JCObject val = (JCObject)retObjectSizeOfStackCommit;
            return new UInt64(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeOfStackCommit != null ? retObjectSizeOfStackCommit.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UInt64 getSizeOfStackReserve() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectSizeOfStackReserve = null;
        try {
            retObjectSizeOfStackReserve = classInstance.Get("SizeOfStackReserve");
            JCObject val = (JCObject)retObjectSizeOfStackReserve;
            return new UInt64(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSizeOfStackReserve != null ? retObjectSizeOfStackReserve.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}