/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.portableexecutable;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.io.Stream;
import system.reflection.portableexecutable.DirectoryEntry;
import system.reflection.portableexecutable.CoffHeader;
import system.reflection.portableexecutable.CorHeader;
import system.reflection.portableexecutable.PEHeader;


/**
 * The base .NET class managing System.Reflection.PortableExecutable.PEHeaders, System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeaders" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeaders</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class PEHeaders extends NetObject  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.PortableExecutable.PEHeaders
     */
    public static final String className = "System.Reflection.PortableExecutable.PEHeaders";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PEHeaders(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PEHeaders}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PEHeaders} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PEHeaders cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PEHeaders(from.getJCOInstance());
    }

    // Constructors section
    
    public PEHeaders() throws Throwable {
    }

    public PEHeaders(Stream peStream, int size, boolean isLoadedImage) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.BadImageFormatException, system.io.IOException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(peStream == null ? null : peStream.getJCOInstance(), size, isLoadedImage));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PEHeaders(Stream peStream, int size) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.BadImageFormatException, system.io.IOException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(peStream == null ? null : peStream.getJCOInstance(), size));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PEHeaders(Stream peStream) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.BadImageFormatException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.io.IOException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(peStream == null ? null : peStream.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean TryGetDirectoryOffset(DirectoryEntry directory, JCORefOut<java.util.concurrent.atomic.AtomicInteger> offset) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.BadImageFormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTryGetDirectoryOffset = null;
        try {
            retObjectTryGetDirectoryOffset = classInstance.Invoke("TryGetDirectoryOffset", directory == null ? null : directory.getJCOInstance(), offset.getJCRefOut());
            return (boolean)retObjectTryGetDirectoryOffset;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectTryGetDirectoryOffset != null ? retObjectTryGetDirectoryOffset.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetContainingSectionIndex(int relativeVirtualAddress) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetContainingSectionIndex = null;
        try {
            retObjectGetContainingSectionIndex = classInstance.Invoke("GetContainingSectionIndex", relativeVirtualAddress);
            return (int)retObjectGetContainingSectionIndex;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectGetContainingSectionIndex_ToString = retObjectGetContainingSectionIndex == null ? "null" : retObjectGetContainingSectionIndex.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetContainingSectionIndexNumber = (java.lang.Number)retObjectGetContainingSectionIndex;
                return retObjectGetContainingSectionIndexNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectGetContainingSectionIndex != null ? retObjectGetContainingSectionIndex.getClass() : "null", retObjectGetContainingSectionIndex_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getIsCoffOnly() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsCoffOnly = null;
        try {
            retObjectIsCoffOnly = classInstance.Get("IsCoffOnly");
            return (boolean)retObjectIsCoffOnly;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsCoffOnly != null ? retObjectIsCoffOnly.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsConsoleApplication() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsConsoleApplication = null;
        try {
            retObjectIsConsoleApplication = classInstance.Get("IsConsoleApplication");
            return (boolean)retObjectIsConsoleApplication;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsConsoleApplication != null ? retObjectIsConsoleApplication.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDll() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsDll = null;
        try {
            retObjectIsDll = classInstance.Get("IsDll");
            return (boolean)retObjectIsDll;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsDll != null ? retObjectIsDll.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsExe() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsExe = null;
        try {
            retObjectIsExe = classInstance.Get("IsExe");
            return (boolean)retObjectIsExe;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectIsExe != null ? retObjectIsExe.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCoffHeaderStartOffset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCoffHeaderStartOffset = null;
        try {
            retObjectCoffHeaderStartOffset = classInstance.Get("CoffHeaderStartOffset");
            return (int)retObjectCoffHeaderStartOffset;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectCoffHeaderStartOffset_ToString = retObjectCoffHeaderStartOffset == null ? "null" : retObjectCoffHeaderStartOffset.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectCoffHeaderStartOffsetNumber = (java.lang.Number)retObjectCoffHeaderStartOffset;
                return retObjectCoffHeaderStartOffsetNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectCoffHeaderStartOffset != null ? retObjectCoffHeaderStartOffset.getClass() : "null", retObjectCoffHeaderStartOffset_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCorHeaderStartOffset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCorHeaderStartOffset = null;
        try {
            retObjectCorHeaderStartOffset = classInstance.Get("CorHeaderStartOffset");
            return (int)retObjectCorHeaderStartOffset;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectCorHeaderStartOffset_ToString = retObjectCorHeaderStartOffset == null ? "null" : retObjectCorHeaderStartOffset.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectCorHeaderStartOffsetNumber = (java.lang.Number)retObjectCorHeaderStartOffset;
                return retObjectCorHeaderStartOffsetNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectCorHeaderStartOffset != null ? retObjectCorHeaderStartOffset.getClass() : "null", retObjectCorHeaderStartOffset_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMetadataSize() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMetadataSize = null;
        try {
            retObjectMetadataSize = classInstance.Get("MetadataSize");
            return (int)retObjectMetadataSize;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMetadataSize_ToString = retObjectMetadataSize == null ? "null" : retObjectMetadataSize.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMetadataSizeNumber = (java.lang.Number)retObjectMetadataSize;
                return retObjectMetadataSizeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMetadataSize != null ? retObjectMetadataSize.getClass() : "null", retObjectMetadataSize_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMetadataStartOffset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMetadataStartOffset = null;
        try {
            retObjectMetadataStartOffset = classInstance.Get("MetadataStartOffset");
            return (int)retObjectMetadataStartOffset;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMetadataStartOffset_ToString = retObjectMetadataStartOffset == null ? "null" : retObjectMetadataStartOffset.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMetadataStartOffsetNumber = (java.lang.Number)retObjectMetadataStartOffset;
                return retObjectMetadataStartOffsetNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMetadataStartOffset != null ? retObjectMetadataStartOffset.getClass() : "null", retObjectMetadataStartOffset_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPEHeaderStartOffset() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectPEHeaderStartOffset = null;
        try {
            retObjectPEHeaderStartOffset = classInstance.Get("PEHeaderStartOffset");
            return (int)retObjectPEHeaderStartOffset;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectPEHeaderStartOffset_ToString = retObjectPEHeaderStartOffset == null ? "null" : retObjectPEHeaderStartOffset.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectPEHeaderStartOffsetNumber = (java.lang.Number)retObjectPEHeaderStartOffset;
                return retObjectPEHeaderStartOffsetNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectPEHeaderStartOffset != null ? retObjectPEHeaderStartOffset.getClass() : "null", retObjectPEHeaderStartOffset_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoffHeader getCoffHeader() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCoffHeader = null;
        try {
            retObjectCoffHeader = classInstance.Get("CoffHeader");
            JCObject val = (JCObject)retObjectCoffHeader;
            return new CoffHeader(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCoffHeader != null ? retObjectCoffHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CorHeader getCorHeader() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCorHeader = null;
        try {
            retObjectCorHeader = classInstance.Get("CorHeader");
            JCObject val = (JCObject)retObjectCorHeader;
            return new CorHeader(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCorHeader != null ? retObjectCorHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PEHeader getPEHeader() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectPEHeader = null;
        try {
            retObjectPEHeader = classInstance.Get("PEHeader");
            JCObject val = (JCObject)retObjectPEHeader;
            return new PEHeader(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPEHeader != null ? retObjectPEHeader.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}