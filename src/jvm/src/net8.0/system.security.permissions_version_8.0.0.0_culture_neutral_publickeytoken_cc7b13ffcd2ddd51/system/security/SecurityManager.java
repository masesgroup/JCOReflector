/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.IPermission;
import system.security.IPermissionImplementation;
import system.security.policy.Evidence;
import system.security.PermissionSet;
import system.security.policy.PolicyLevel;
import system.security.PolicyLevelType;


/**
 * The base .NET class managing System.Security.SecurityManager, System.Security.Permissions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Security.SecurityManager" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Security.SecurityManager</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class SecurityManager extends NetObject  {
    /**
     * Fully assembly qualified name: System.Security.Permissions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
     */
    public static final String assemblyFullName = "System.Security.Permissions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
    /**
     * Assembly name: System.Security.Permissions
     */
    public static final String assemblyShortName = "System.Security.Permissions";
    /**
     * Qualified class name: System.Security.SecurityManager
     */
    public static final String className = "System.Security.SecurityManager";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public SecurityManager(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link SecurityManager}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link SecurityManager} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static SecurityManager cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new SecurityManager(from.getJCOInstance());
    }

    // Constructors section
    
    public SecurityManager() throws Throwable {
    }

    
    // Methods section
    
    public static boolean CurrentThreadRequiresSecurityContextCapture() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCurrentThreadRequiresSecurityContextCapture = null;
        try {
            retObjectCurrentThreadRequiresSecurityContextCapture = classType.Invoke("CurrentThreadRequiresSecurityContextCapture");
            return (boolean)retObjectCurrentThreadRequiresSecurityContextCapture;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectCurrentThreadRequiresSecurityContextCapture != null ? retObjectCurrentThreadRequiresSecurityContextCapture.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsGranted(IPermission perm) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectIsGranted = null;
        try {
            retObjectIsGranted = classType.Invoke("IsGranted", perm == null ? null : perm.getJCOInstance());
            return (boolean)retObjectIsGranted;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsGranted != null ? retObjectIsGranted.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IEnumerator PolicyHierarchy() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectPolicyHierarchy = null;
        try {
            retObjectPolicyHierarchy = classType.Invoke("PolicyHierarchy");
            JCObject objPolicyHierarchy = (JCObject)retObjectPolicyHierarchy;
            return new IEnumeratorImplementation(objPolicyHierarchy);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectPolicyHierarchy != null ? retObjectPolicyHierarchy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IEnumerator ResolvePolicyGroups(Evidence evidence) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolvePolicyGroups = null;
        try {
            retObjectResolvePolicyGroups = classType.Invoke("ResolvePolicyGroups", evidence == null ? null : evidence.getJCOInstance());
            JCObject objResolvePolicyGroups = (JCObject)retObjectResolvePolicyGroups;
            return new IEnumeratorImplementation(objResolvePolicyGroups);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvePolicyGroups != null ? retObjectResolvePolicyGroups.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PermissionSet GetStandardSandbox(Evidence evidence) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectGetStandardSandbox = null;
        try {
            retObjectGetStandardSandbox = classType.Invoke("GetStandardSandbox", evidence == null ? null : evidence.getJCOInstance());
            JCObject objGetStandardSandbox = (JCObject)retObjectGetStandardSandbox;
            return new PermissionSet(objGetStandardSandbox);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetStandardSandbox != null ? retObjectGetStandardSandbox.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PermissionSet ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, JCORefOut<PermissionSet> denied) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolvePolicy = null;
        try {
            retObjectResolvePolicy = classType.Invoke("ResolvePolicy", evidence == null ? null : evidence.getJCOInstance(), reqdPset == null ? null : reqdPset.getJCOInstance(), optPset == null ? null : optPset.getJCOInstance(), denyPset == null ? null : denyPset.getJCOInstance(), denied.getJCRefOut());
            JCObject objResolvePolicy = (JCObject)retObjectResolvePolicy;
            return new PermissionSet(objResolvePolicy);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvePolicy != null ? retObjectResolvePolicy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PermissionSet ResolvePolicy(Evidence evidence) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolvePolicy = null;
        try {
            retObjectResolvePolicy = classType.Invoke("ResolvePolicy", evidence == null ? null : evidence.getJCOInstance());
            JCObject objResolvePolicy = (JCObject)retObjectResolvePolicy;
            return new PermissionSet(objResolvePolicy);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvePolicy != null ? retObjectResolvePolicy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PermissionSet ResolvePolicy(Evidence[] evidences) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolvePolicy = null;
        try {
            retObjectResolvePolicy = classType.Invoke("ResolvePolicy", (java.lang.Object)toObjectFromArray(evidences));
            JCObject objResolvePolicy = (JCObject)retObjectResolvePolicy;
            return new PermissionSet(objResolvePolicy);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolvePolicy != null ? retObjectResolvePolicy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PermissionSet ResolveSystemPolicy(Evidence evidence) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectResolveSystemPolicy = null;
        try {
            retObjectResolveSystemPolicy = classType.Invoke("ResolveSystemPolicy", evidence == null ? null : evidence.getJCOInstance());
            JCObject objResolveSystemPolicy = (JCObject)retObjectResolveSystemPolicy;
            return new PermissionSet(objResolveSystemPolicy);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResolveSystemPolicy != null ? retObjectResolveSystemPolicy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PolicyLevel LoadPolicyLevelFromFile(java.lang.String path, PolicyLevelType type) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectLoadPolicyLevelFromFile = null;
        try {
            retObjectLoadPolicyLevelFromFile = classType.Invoke("LoadPolicyLevelFromFile", path, type == null ? null : type.getJCOInstance());
            JCObject objLoadPolicyLevelFromFile = (JCObject)retObjectLoadPolicyLevelFromFile;
            return new PolicyLevel(objLoadPolicyLevelFromFile);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectLoadPolicyLevelFromFile != null ? retObjectLoadPolicyLevelFromFile.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PolicyLevel LoadPolicyLevelFromString(java.lang.String str, PolicyLevelType type) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectLoadPolicyLevelFromString = null;
        try {
            retObjectLoadPolicyLevelFromString = classType.Invoke("LoadPolicyLevelFromString", str, type == null ? null : type.getJCOInstance());
            JCObject objLoadPolicyLevelFromString = (JCObject)retObjectLoadPolicyLevelFromString;
            return new PolicyLevel(objLoadPolicyLevelFromString);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectLoadPolicyLevelFromString != null ? retObjectLoadPolicyLevelFromString.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void GetZoneAndOrigin(JCORefOut<NetArrayList> zone, JCORefOut<NetArrayList> origin) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("GetZoneAndOrigin", zone.getJCRefOut(), origin.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SavePolicy() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SavePolicy");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SavePolicyLevel(PolicyLevel level) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SavePolicyLevel", level == null ? null : level.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public static boolean getCheckExecutionRights() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCheckExecutionRights = null;
        try {
            retObjectCheckExecutionRights = classType.Get("CheckExecutionRights");
            return (boolean)retObjectCheckExecutionRights;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCheckExecutionRights != null ? retObjectCheckExecutionRights.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCheckExecutionRights(boolean CheckExecutionRights) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("CheckExecutionRights", CheckExecutionRights);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getSecurityEnabled() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSecurityEnabled = null;
        try {
            retObjectSecurityEnabled = classType.Get("SecurityEnabled");
            return (boolean)retObjectSecurityEnabled;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectSecurityEnabled != null ? retObjectSecurityEnabled.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setSecurityEnabled(boolean SecurityEnabled) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("SecurityEnabled", SecurityEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}