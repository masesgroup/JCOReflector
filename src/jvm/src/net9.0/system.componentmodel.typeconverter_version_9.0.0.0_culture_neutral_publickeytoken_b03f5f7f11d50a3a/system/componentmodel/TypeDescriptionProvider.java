/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.componentmodel;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.collections.IDictionary;
import system.collections.IDictionaryImplementation;
import system.componentmodel.ICustomTypeDescriptor;
import system.componentmodel.ICustomTypeDescriptorImplementation;
import system.IServiceProvider;
import system.IServiceProviderImplementation;


/**
 * The base .NET class managing System.ComponentModel.TypeDescriptionProvider, System.ComponentModel.TypeConverter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.ComponentModel.TypeDescriptionProvider" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.ComponentModel.TypeDescriptionProvider</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class TypeDescriptionProvider extends NetObject  {
    /**
     * Fully assembly qualified name: System.ComponentModel.TypeConverter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.ComponentModel.TypeConverter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.ComponentModel.TypeConverter
     */
    public static final String assemblyShortName = "System.ComponentModel.TypeConverter";
    /**
     * Qualified class name: System.ComponentModel.TypeDescriptionProvider
     */
    public static final String className = "System.ComponentModel.TypeDescriptionProvider";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TypeDescriptionProvider(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TypeDescriptionProvider}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TypeDescriptionProvider} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TypeDescriptionProvider cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TypeDescriptionProvider(from.getJCOInstance());
    }

    // Constructors section
    
    public TypeDescriptionProvider() throws Throwable {
    }

    
    // Methods section
    
    public boolean IsRegisteredType(NetType type) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsRegisteredType = null;
        try {
            retObjectIsRegisteredType = classInstance.Invoke("IsRegisteredType", type == null ? null : type.getJCOInstance());
            return (boolean)retObjectIsRegisteredType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsRegisteredType != null ? retObjectIsRegisteredType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsSupportedType(NetType type) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsSupportedType = null;
        try {
            retObjectIsSupportedType = classInstance.Invoke("IsSupportedType", type == null ? null : type.getJCOInstance());
            return (boolean)retObjectIsSupportedType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsSupportedType != null ? retObjectIsSupportedType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IDictionary GetCache(NetObject instance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCache = null;
        try {
            retObjectGetCache = classInstance.Invoke("GetCache", instance == null ? null : instance.getJCOInstance());
            JCObject objGetCache = (JCObject)retObjectGetCache;
            return new IDictionaryImplementation(objGetCache);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCache != null ? retObjectGetCache.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetExtendedTypeDescriptor(NetObject instance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetExtendedTypeDescriptor = null;
        try {
            retObjectGetExtendedTypeDescriptor = classInstance.Invoke("GetExtendedTypeDescriptor", instance == null ? null : instance.getJCOInstance());
            JCObject objGetExtendedTypeDescriptor = (JCObject)retObjectGetExtendedTypeDescriptor;
            return new ICustomTypeDescriptorImplementation(objGetExtendedTypeDescriptor);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetExtendedTypeDescriptor != null ? retObjectGetExtendedTypeDescriptor.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetExtendedTypeDescriptorFromRegisteredType(NetObject instance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetExtendedTypeDescriptorFromRegisteredType = null;
        try {
            retObjectGetExtendedTypeDescriptorFromRegisteredType = classInstance.Invoke("GetExtendedTypeDescriptorFromRegisteredType", instance == null ? null : instance.getJCOInstance());
            JCObject objGetExtendedTypeDescriptorFromRegisteredType = (JCObject)retObjectGetExtendedTypeDescriptorFromRegisteredType;
            return new ICustomTypeDescriptorImplementation(objGetExtendedTypeDescriptorFromRegisteredType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetExtendedTypeDescriptorFromRegisteredType != null ? retObjectGetExtendedTypeDescriptorFromRegisteredType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptor(NetObject instance) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptor = null;
        try {
            retObjectGetTypeDescriptor = classInstance.Invoke("GetTypeDescriptor", instance == null ? null : instance.getJCOInstance());
            JCObject objGetTypeDescriptor = (JCObject)retObjectGetTypeDescriptor;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptor);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptor != null ? retObjectGetTypeDescriptor.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptor(NetType objectType, NetObject instance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptor = null;
        try {
            retObjectGetTypeDescriptor = classInstance.Invoke("GetTypeDescriptor", objectType == null ? null : objectType.getJCOInstance(), instance == null ? null : instance.getJCOInstance());
            JCObject objGetTypeDescriptor = (JCObject)retObjectGetTypeDescriptor;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptor);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptor != null ? retObjectGetTypeDescriptor.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptor(NetType objectType) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptor = null;
        try {
            retObjectGetTypeDescriptor = classInstance.Invoke("GetTypeDescriptor", objectType == null ? null : objectType.getJCOInstance());
            JCObject objGetTypeDescriptor = (JCObject)retObjectGetTypeDescriptor;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptor);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptor != null ? retObjectGetTypeDescriptor.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptorFromRegisteredType(NetObject instance) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptorFromRegisteredType = null;
        try {
            retObjectGetTypeDescriptorFromRegisteredType = classInstance.Invoke("GetTypeDescriptorFromRegisteredType", instance == null ? null : instance.getJCOInstance());
            JCObject objGetTypeDescriptorFromRegisteredType = (JCObject)retObjectGetTypeDescriptorFromRegisteredType;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptorFromRegisteredType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptorFromRegisteredType != null ? retObjectGetTypeDescriptorFromRegisteredType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptorFromRegisteredType(NetType objectType, NetObject instance) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptorFromRegisteredType = null;
        try {
            retObjectGetTypeDescriptorFromRegisteredType = classInstance.Invoke("GetTypeDescriptorFromRegisteredType", objectType == null ? null : objectType.getJCOInstance(), instance == null ? null : instance.getJCOInstance());
            JCObject objGetTypeDescriptorFromRegisteredType = (JCObject)retObjectGetTypeDescriptorFromRegisteredType;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptorFromRegisteredType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptorFromRegisteredType != null ? retObjectGetTypeDescriptorFromRegisteredType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ICustomTypeDescriptor GetTypeDescriptorFromRegisteredType(NetType objectType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeDescriptorFromRegisteredType = null;
        try {
            retObjectGetTypeDescriptorFromRegisteredType = classInstance.Invoke("GetTypeDescriptorFromRegisteredType", objectType == null ? null : objectType.getJCOInstance());
            JCObject objGetTypeDescriptorFromRegisteredType = (JCObject)retObjectGetTypeDescriptorFromRegisteredType;
            return new ICustomTypeDescriptorImplementation(objGetTypeDescriptorFromRegisteredType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeDescriptorFromRegisteredType != null ? retObjectGetTypeDescriptorFromRegisteredType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstance(IServiceProvider provider, NetType objectType, NetType[] argTypes, NetObject[] args) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCreateInstance = null;
        try {
            retObjectCreateInstance = classInstance.Invoke("CreateInstance", provider == null ? null : provider.getJCOInstance(), objectType == null ? null : objectType.getJCOInstance(), toObjectFromArray(argTypes), toObjectFromArray(args));
            JCObject objCreateInstance = (JCObject)retObjectCreateInstance;
            return new NetObject(objCreateInstance);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateInstance != null ? retObjectCreateInstance.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetFullComponentName(NetObject component) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetFullComponentName = null;
        try {
            retObjectGetFullComponentName = classInstance.Invoke("GetFullComponentName", component == null ? null : component.getJCOInstance());
            return (java.lang.String)retObjectGetFullComponentName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetFullComponentName != null ? retObjectGetFullComponentName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType GetReflectionType(NetObject instance) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetReflectionType = null;
        try {
            retObjectGetReflectionType = classInstance.Invoke("GetReflectionType", instance == null ? null : instance.getJCOInstance());
            JCObject objGetReflectionType = (JCObject)retObjectGetReflectionType;
            return new NetType(objGetReflectionType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetReflectionType != null ? retObjectGetReflectionType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType GetReflectionType(NetType objectType, NetObject instance) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetReflectionType = null;
        try {
            retObjectGetReflectionType = classInstance.Invoke("GetReflectionType", objectType == null ? null : objectType.getJCOInstance(), instance == null ? null : instance.getJCOInstance());
            JCObject objGetReflectionType = (JCObject)retObjectGetReflectionType;
            return new NetType(objGetReflectionType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetReflectionType != null ? retObjectGetReflectionType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType GetReflectionType(NetType objectType) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetReflectionType = null;
        try {
            retObjectGetReflectionType = classInstance.Invoke("GetReflectionType", objectType == null ? null : objectType.getJCOInstance());
            JCObject objGetReflectionType = (JCObject)retObjectGetReflectionType;
            return new NetType(objGetReflectionType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetReflectionType != null ? retObjectGetReflectionType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType GetRuntimeType(NetType reflectionType) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetRuntimeType = null;
        try {
            retObjectGetRuntimeType = classInstance.Invoke("GetRuntimeType", reflectionType == null ? null : reflectionType.getJCOInstance());
            JCObject objGetRuntimeType = (JCObject)retObjectGetRuntimeType;
            return new NetType(objGetRuntimeType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetRuntimeType != null ? retObjectGetRuntimeType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}