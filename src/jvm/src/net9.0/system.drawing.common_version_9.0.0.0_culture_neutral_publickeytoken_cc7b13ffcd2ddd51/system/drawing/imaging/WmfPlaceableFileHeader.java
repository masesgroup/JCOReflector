/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.drawing.imaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section


/**
 * The base .NET class managing System.Drawing.Imaging.WmfPlaceableFileHeader, System.Drawing.Common, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.WmfPlaceableFileHeader" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Drawing.Imaging.WmfPlaceableFileHeader</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class WmfPlaceableFileHeader extends NetObject  {
    /**
     * Fully assembly qualified name: System.Drawing.Common, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
     */
    public static final String assemblyFullName = "System.Drawing.Common, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
    /**
     * Assembly name: System.Drawing.Common
     */
    public static final String assemblyShortName = "System.Drawing.Common";
    /**
     * Qualified class name: System.Drawing.Imaging.WmfPlaceableFileHeader
     */
    public static final String className = "System.Drawing.Imaging.WmfPlaceableFileHeader";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public WmfPlaceableFileHeader(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link WmfPlaceableFileHeader}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link WmfPlaceableFileHeader} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static WmfPlaceableFileHeader cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new WmfPlaceableFileHeader(from.getJCOInstance());
    }

    // Constructors section
    
    public WmfPlaceableFileHeader() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    

    
    // Properties section
    
    public short getBboxBottom() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBboxBottom = null;
        try {
            retObjectBboxBottom = classInstance.Get("BboxBottom");
            return (short)retObjectBboxBottom;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBboxBottom_ToString = retObjectBboxBottom == null ? "null" : retObjectBboxBottom.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBboxBottomNumber = (java.lang.Number)retObjectBboxBottom;
                return retObjectBboxBottomNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectBboxBottom != null ? retObjectBboxBottom.getClass() : "null", retObjectBboxBottom_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBboxBottom(short BboxBottom) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BboxBottom", BboxBottom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getBboxLeft() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBboxLeft = null;
        try {
            retObjectBboxLeft = classInstance.Get("BboxLeft");
            return (short)retObjectBboxLeft;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBboxLeft_ToString = retObjectBboxLeft == null ? "null" : retObjectBboxLeft.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBboxLeftNumber = (java.lang.Number)retObjectBboxLeft;
                return retObjectBboxLeftNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectBboxLeft != null ? retObjectBboxLeft.getClass() : "null", retObjectBboxLeft_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBboxLeft(short BboxLeft) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BboxLeft", BboxLeft);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getBboxRight() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBboxRight = null;
        try {
            retObjectBboxRight = classInstance.Get("BboxRight");
            return (short)retObjectBboxRight;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBboxRight_ToString = retObjectBboxRight == null ? "null" : retObjectBboxRight.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBboxRightNumber = (java.lang.Number)retObjectBboxRight;
                return retObjectBboxRightNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectBboxRight != null ? retObjectBboxRight.getClass() : "null", retObjectBboxRight_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBboxRight(short BboxRight) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BboxRight", BboxRight);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getBboxTop() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBboxTop = null;
        try {
            retObjectBboxTop = classInstance.Get("BboxTop");
            return (short)retObjectBboxTop;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectBboxTop_ToString = retObjectBboxTop == null ? "null" : retObjectBboxTop.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectBboxTopNumber = (java.lang.Number)retObjectBboxTop;
                return retObjectBboxTopNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectBboxTop != null ? retObjectBboxTop.getClass() : "null", retObjectBboxTop_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBboxTop(short BboxTop) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BboxTop", BboxTop);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getChecksum() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectChecksum = null;
        try {
            retObjectChecksum = classInstance.Get("Checksum");
            return (short)retObjectChecksum;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectChecksum_ToString = retObjectChecksum == null ? "null" : retObjectChecksum.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectChecksumNumber = (java.lang.Number)retObjectChecksum;
                return retObjectChecksumNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectChecksum != null ? retObjectChecksum.getClass() : "null", retObjectChecksum_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setChecksum(short Checksum) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Checksum", Checksum);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getHmf() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectHmf = null;
        try {
            retObjectHmf = classInstance.Get("Hmf");
            return (short)retObjectHmf;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectHmf_ToString = retObjectHmf == null ? "null" : retObjectHmf.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectHmfNumber = (java.lang.Number)retObjectHmf;
                return retObjectHmfNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectHmf != null ? retObjectHmf.getClass() : "null", retObjectHmf_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHmf(short Hmf) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Hmf", Hmf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getInch() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectInch = null;
        try {
            retObjectInch = classInstance.Get("Inch");
            return (short)retObjectInch;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectInch_ToString = retObjectInch == null ? "null" : retObjectInch.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectInchNumber = (java.lang.Number)retObjectInch;
                return retObjectInchNumber.shortValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into short and, as fallback solution, into java.lang.Number", retObjectInch != null ? retObjectInch.getClass() : "null", retObjectInch_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInch(short Inch) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Inch", Inch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getKey() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectKey = null;
        try {
            retObjectKey = classInstance.Get("Key");
            return (int)retObjectKey;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectKey_ToString = retObjectKey == null ? "null" : retObjectKey.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectKeyNumber = (java.lang.Number)retObjectKey;
                return retObjectKeyNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectKey != null ? retObjectKey.getClass() : "null", retObjectKey_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKey(int Key) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Key", Key);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReserved() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectReserved = null;
        try {
            retObjectReserved = classInstance.Get("Reserved");
            return (int)retObjectReserved;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectReserved_ToString = retObjectReserved == null ? "null" : retObjectReserved.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectReservedNumber = (java.lang.Number)retObjectReserved;
                return retObjectReservedNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectReserved != null ? retObjectReserved.getClass() : "null", retObjectReserved_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReserved(int Reserved) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Reserved", Reserved);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}