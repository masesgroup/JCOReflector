/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.net;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.net.ServicePoint;
import system.net.IWebProxy;
import system.net.IWebProxyImplementation;
import system.Uri;
import system.net.security.EncryptionPolicy;
import system.net.security.RemoteCertificateValidationCallback;
import system.net.SecurityProtocolType;


/**
 * The base .NET class managing System.Net.ServicePointManager, System.Net.Requests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Net.ServicePointManager" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Net.ServicePointManager</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class ServicePointManager extends NetObject  {
    /**
     * Fully assembly qualified name: System.Net.Requests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Net.Requests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Net.Requests
     */
    public static final String assemblyShortName = "System.Net.Requests";
    /**
     * Qualified class name: System.Net.ServicePointManager
     */
    public static final String className = "System.Net.ServicePointManager";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public ServicePointManager(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link ServicePointManager}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link ServicePointManager} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static ServicePointManager cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new ServicePointManager(from.getJCOInstance());
    }

    // Constructors section
    
    public ServicePointManager() throws Throwable {
    }



    
    // Methods section
    
    public static ServicePoint FindServicePoint(java.lang.String uriString, IWebProxy proxy) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.NullReferenceException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.diagnostics.UnreachableException, system.UriFormatException, system.InvalidTimeZoneException, system.OverflowException, system.security.SecurityException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectFindServicePoint = null;
        try {
            retObjectFindServicePoint = classType.Invoke("FindServicePoint", uriString, proxy == null ? null : proxy.getJCOInstance());
            JCObject objFindServicePoint = (JCObject)retObjectFindServicePoint;
            return new ServicePoint(objFindServicePoint);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFindServicePoint != null ? retObjectFindServicePoint.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.IndexOutOfRangeException, system.NullReferenceException, system.UriFormatException, system.OutOfMemoryException, system.diagnostics.UnreachableException, system.FormatException, system.InvalidTimeZoneException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectFindServicePoint = null;
        try {
            retObjectFindServicePoint = classType.Invoke("FindServicePoint", address == null ? null : address.getJCOInstance(), proxy == null ? null : proxy.getJCOInstance());
            JCObject objFindServicePoint = (JCObject)retObjectFindServicePoint;
            return new ServicePoint(objFindServicePoint);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFindServicePoint != null ? retObjectFindServicePoint.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ServicePoint FindServicePoint(Uri address) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NullReferenceException, system.UriFormatException, system.OutOfMemoryException, system.FormatException, system.InvalidTimeZoneException, system.OverflowException, system.security.SecurityException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectFindServicePoint = null;
        try {
            retObjectFindServicePoint = classType.Invoke("FindServicePoint", address == null ? null : address.getJCOInstance());
            JCObject objFindServicePoint = (JCObject)retObjectFindServicePoint;
            return new ServicePoint(objFindServicePoint);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectFindServicePoint != null ? retObjectFindServicePoint.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetTcpKeepAlive(boolean enabled, int keepAliveTime, int keepAliveInterval) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SetTcpKeepAlive", enabled, keepAliveTime, keepAliveInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public static boolean getCheckCertificateRevocationList() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectCheckCertificateRevocationList = null;
        try {
            retObjectCheckCertificateRevocationList = classType.Get("CheckCertificateRevocationList");
            return (boolean)retObjectCheckCertificateRevocationList;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectCheckCertificateRevocationList != null ? retObjectCheckCertificateRevocationList.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCheckCertificateRevocationList(boolean CheckCertificateRevocationList) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("CheckCertificateRevocationList", CheckCertificateRevocationList);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getEnableDnsRoundRobin() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectEnableDnsRoundRobin = null;
        try {
            retObjectEnableDnsRoundRobin = classType.Get("EnableDnsRoundRobin");
            return (boolean)retObjectEnableDnsRoundRobin;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectEnableDnsRoundRobin != null ? retObjectEnableDnsRoundRobin.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setEnableDnsRoundRobin(boolean EnableDnsRoundRobin) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("EnableDnsRoundRobin", EnableDnsRoundRobin);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getExpect100Continue() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectExpect100Continue = null;
        try {
            retObjectExpect100Continue = classType.Get("Expect100Continue");
            return (boolean)retObjectExpect100Continue;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectExpect100Continue != null ? retObjectExpect100Continue.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setExpect100Continue(boolean Expect100Continue) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("Expect100Continue", Expect100Continue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getReusePort() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectReusePort = null;
        try {
            retObjectReusePort = classType.Get("ReusePort");
            return (boolean)retObjectReusePort;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectReusePort != null ? retObjectReusePort.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setReusePort(boolean ReusePort) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ReusePort", ReusePort);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getUseNagleAlgorithm() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectUseNagleAlgorithm = null;
        try {
            retObjectUseNagleAlgorithm = classType.Get("UseNagleAlgorithm");
            return (boolean)retObjectUseNagleAlgorithm;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into boolean", retObjectUseNagleAlgorithm != null ? retObjectUseNagleAlgorithm.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setUseNagleAlgorithm(boolean UseNagleAlgorithm) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("UseNagleAlgorithm", UseNagleAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getDefaultConnectionLimit() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectDefaultConnectionLimit = null;
        try {
            retObjectDefaultConnectionLimit = classType.Get("DefaultConnectionLimit");
            return (int)retObjectDefaultConnectionLimit;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectDefaultConnectionLimit_ToString = retObjectDefaultConnectionLimit == null ? "null" : retObjectDefaultConnectionLimit.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectDefaultConnectionLimitNumber = (java.lang.Number)retObjectDefaultConnectionLimit;
                return retObjectDefaultConnectionLimitNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectDefaultConnectionLimit != null ? retObjectDefaultConnectionLimit.getClass() : "null", retObjectDefaultConnectionLimit_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultConnectionLimit(int DefaultConnectionLimit) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("DefaultConnectionLimit", DefaultConnectionLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getDnsRefreshTimeout() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectDnsRefreshTimeout = null;
        try {
            retObjectDnsRefreshTimeout = classType.Get("DnsRefreshTimeout");
            return (int)retObjectDnsRefreshTimeout;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectDnsRefreshTimeout_ToString = retObjectDnsRefreshTimeout == null ? "null" : retObjectDnsRefreshTimeout.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectDnsRefreshTimeoutNumber = (java.lang.Number)retObjectDnsRefreshTimeout;
                return retObjectDnsRefreshTimeoutNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectDnsRefreshTimeout != null ? retObjectDnsRefreshTimeout.getClass() : "null", retObjectDnsRefreshTimeout_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDnsRefreshTimeout(int DnsRefreshTimeout) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("DnsRefreshTimeout", DnsRefreshTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getMaxServicePointIdleTime() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectMaxServicePointIdleTime = null;
        try {
            retObjectMaxServicePointIdleTime = classType.Get("MaxServicePointIdleTime");
            return (int)retObjectMaxServicePointIdleTime;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMaxServicePointIdleTime_ToString = retObjectMaxServicePointIdleTime == null ? "null" : retObjectMaxServicePointIdleTime.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMaxServicePointIdleTimeNumber = (java.lang.Number)retObjectMaxServicePointIdleTime;
                return retObjectMaxServicePointIdleTimeNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMaxServicePointIdleTime != null ? retObjectMaxServicePointIdleTime.getClass() : "null", retObjectMaxServicePointIdleTime_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setMaxServicePointIdleTime(int MaxServicePointIdleTime) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.FormatException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("MaxServicePointIdleTime", MaxServicePointIdleTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getMaxServicePoints() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectMaxServicePoints = null;
        try {
            retObjectMaxServicePoints = classType.Get("MaxServicePoints");
            return (int)retObjectMaxServicePoints;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectMaxServicePoints_ToString = retObjectMaxServicePoints == null ? "null" : retObjectMaxServicePoints.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectMaxServicePointsNumber = (java.lang.Number)retObjectMaxServicePoints;
                return retObjectMaxServicePointsNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectMaxServicePoints != null ? retObjectMaxServicePoints.getClass() : "null", retObjectMaxServicePoints_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setMaxServicePoints(int MaxServicePoints) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("MaxServicePoints", MaxServicePoints);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static EncryptionPolicy getEncryptionPolicy() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectEncryptionPolicy = null;
        try {
            retObjectEncryptionPolicy = classType.Get("EncryptionPolicy");
            JCObject val = (JCObject)retObjectEncryptionPolicy;
            return new EncryptionPolicy(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectEncryptionPolicy != null ? retObjectEncryptionPolicy.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RemoteCertificateValidationCallback getServerCertificateValidationCallback() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectServerCertificateValidationCallback = null;
        try {
            retObjectServerCertificateValidationCallback = classType.Get("ServerCertificateValidationCallback");
            return (RemoteCertificateValidationCallback)retObjectServerCertificateValidationCallback;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into RemoteCertificateValidationCallback", retObjectServerCertificateValidationCallback != null ? retObjectServerCertificateValidationCallback.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setServerCertificateValidationCallback(RemoteCertificateValidationCallback ServerCertificateValidationCallback) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ServerCertificateValidationCallback", ServerCertificateValidationCallback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityProtocolType getSecurityProtocol() throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectSecurityProtocol = null;
        try {
            retObjectSecurityProtocol = classType.Get("SecurityProtocol");
            JCObject val = (JCObject)retObjectSecurityProtocol;
            return new SecurityProtocolType(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectSecurityProtocol != null ? retObjectSecurityProtocol.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setSecurityProtocol(SecurityProtocolType SecurityProtocol) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        try {
            classType.Set("SecurityProtocol", SecurityProtocol == null ? null : SecurityProtocol.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}