/*
 *  MIT License
 *
 *  Copyright (c) 2024 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.15.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.runtime.interopservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import system.Single;
import system.runtime.interopservices.NFloat;
import system.globalization.NumberStyles;
import system.IFormatProvider;
import system.IFormatProviderImplementation;
import system.MidpointRounding;


/**
 * The base .NET class managing System.Runtime.InteropServices.NFloat, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Runtime.InteropServices.NFloat" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Runtime.InteropServices.NFloat</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.15.0.0
 */
public class NFloat extends ValueType  {
    /**
     * Fully assembly qualified name: System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
     */
    public static final String assemblyFullName = "System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e";
    /**
     * Assembly name: System.Private.CoreLib
     */
    public static final String assemblyShortName = "System.Private.CoreLib";
    /**
     * Qualified class name: System.Runtime.InteropServices.NFloat
     */
    public static final String className = "System.Runtime.InteropServices.NFloat";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public NFloat(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link NFloat}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link NFloat} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static NFloat cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new NFloat(from.getJCOInstance());
    }

    // Constructors section
    
    public NFloat() throws Throwable {
    }

    public NFloat(double value) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(value));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NFloat(Single value) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(value == null ? null : value.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean Equals(NFloat other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Equals", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsEvenInteger(NFloat value) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsEvenInteger", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsFinite(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsFinite", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsInfinity(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsInfinity", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsInteger(NFloat value) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsInteger", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNaN(NFloat value) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNaN", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNegative(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNegative", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNegativeInfinity(NFloat value) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNegativeInfinity", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNormal(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNormal", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsOddInteger(NFloat value) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsOddInteger", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsPositive(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsPositive", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsPositiveInfinity(NFloat value) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsPositiveInfinity", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsPow2(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsPow2", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsRealNumber(NFloat value) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsRealNumber", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSubnormal(NFloat value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSubnormal", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean TryParse(java.lang.String s, NumberStyles style, IFormatProvider provider, JCORefOut<NFloat> result) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.NullReferenceException, system.OverflowException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("TryParse", s, style == null ? null : style.getJCOInstance(), provider == null ? null : provider.getJCOInstance(), result.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean TryParse(java.lang.String s, IFormatProvider provider, JCORefOut<NFloat> result) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.NullReferenceException, system.OverflowException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("TryParse", s, provider == null ? null : provider.getJCOInstance(), result.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean TryParse(java.lang.String s, JCORefOut<NFloat> result) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.NullReferenceException, system.OverflowException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("TryParse", s, result.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NetObject obj) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.IndexOutOfRangeException, system.RankException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", obj == null ? null : obj.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NFloat other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ILogB(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ILogB", x == null ? null : x.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Sign(NFloat value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("Sign", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Abs(NFloat value) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAbs = (JCObject)classType.Invoke("Abs", value == null ? null : value.getJCOInstance());
            return new NFloat(objAbs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Acos(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAcos = (JCObject)classType.Invoke("Acos", x == null ? null : x.getJCOInstance());
            return new NFloat(objAcos);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Acosh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAcosh = (JCObject)classType.Invoke("Acosh", x == null ? null : x.getJCOInstance());
            return new NFloat(objAcosh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat AcosPi(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAcosPi = (JCObject)classType.Invoke("AcosPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objAcosPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Asin(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAsin = (JCObject)classType.Invoke("Asin", x == null ? null : x.getJCOInstance());
            return new NFloat(objAsin);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Asinh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAsinh = (JCObject)classType.Invoke("Asinh", x == null ? null : x.getJCOInstance());
            return new NFloat(objAsinh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat AsinPi(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAsinPi = (JCObject)classType.Invoke("AsinPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objAsinPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Atan(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAtan = (JCObject)classType.Invoke("Atan", x == null ? null : x.getJCOInstance());
            return new NFloat(objAtan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Atan2(NFloat y, NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAtan2 = (JCObject)classType.Invoke("Atan2", y == null ? null : y.getJCOInstance(), x == null ? null : x.getJCOInstance());
            return new NFloat(objAtan2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Atan2Pi(NFloat y, NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAtan2Pi = (JCObject)classType.Invoke("Atan2Pi", y == null ? null : y.getJCOInstance(), x == null ? null : x.getJCOInstance());
            return new NFloat(objAtan2Pi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Atanh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAtanh = (JCObject)classType.Invoke("Atanh", x == null ? null : x.getJCOInstance());
            return new NFloat(objAtanh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat AtanPi(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAtanPi = (JCObject)classType.Invoke("AtanPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objAtanPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat BitDecrement(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBitDecrement = (JCObject)classType.Invoke("BitDecrement", x == null ? null : x.getJCOInstance());
            return new NFloat(objBitDecrement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat BitIncrement(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBitIncrement = (JCObject)classType.Invoke("BitIncrement", x == null ? null : x.getJCOInstance());
            return new NFloat(objBitIncrement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Cbrt(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCbrt = (JCObject)classType.Invoke("Cbrt", x == null ? null : x.getJCOInstance());
            return new NFloat(objCbrt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Ceiling(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCeiling = (JCObject)classType.Invoke("Ceiling", x == null ? null : x.getJCOInstance());
            return new NFloat(objCeiling);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Clamp(NFloat value, NFloat min, NFloat max) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objClamp = (JCObject)classType.Invoke("Clamp", value == null ? null : value.getJCOInstance(), min == null ? null : min.getJCOInstance(), max == null ? null : max.getJCOInstance());
            return new NFloat(objClamp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat CopySign(NFloat value, NFloat sign) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopySign = (JCObject)classType.Invoke("CopySign", value == null ? null : value.getJCOInstance(), sign == null ? null : sign.getJCOInstance());
            return new NFloat(objCopySign);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Cos(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCos = (JCObject)classType.Invoke("Cos", x == null ? null : x.getJCOInstance());
            return new NFloat(objCos);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Cosh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCosh = (JCObject)classType.Invoke("Cosh", x == null ? null : x.getJCOInstance());
            return new NFloat(objCosh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat CosPi(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCosPi = (JCObject)classType.Invoke("CosPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objCosPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat DegreesToRadians(NFloat degrees) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDegreesToRadians = (JCObject)classType.Invoke("DegreesToRadians", degrees == null ? null : degrees.getJCOInstance());
            return new NFloat(objDegreesToRadians);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Exp(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExp = (JCObject)classType.Invoke("Exp", x == null ? null : x.getJCOInstance());
            return new NFloat(objExp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Exp10(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExp10 = (JCObject)classType.Invoke("Exp10", x == null ? null : x.getJCOInstance());
            return new NFloat(objExp10);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Exp10M1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExp10M1 = (JCObject)classType.Invoke("Exp10M1", x == null ? null : x.getJCOInstance());
            return new NFloat(objExp10M1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Exp2(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExp2 = (JCObject)classType.Invoke("Exp2", x == null ? null : x.getJCOInstance());
            return new NFloat(objExp2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Exp2M1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExp2M1 = (JCObject)classType.Invoke("Exp2M1", x == null ? null : x.getJCOInstance());
            return new NFloat(objExp2M1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat ExpM1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExpM1 = (JCObject)classType.Invoke("ExpM1", x == null ? null : x.getJCOInstance());
            return new NFloat(objExpM1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Floor(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFloor = (JCObject)classType.Invoke("Floor", x == null ? null : x.getJCOInstance());
            return new NFloat(objFloor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat FusedMultiplyAdd(NFloat left, NFloat right, NFloat addend) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFusedMultiplyAdd = (JCObject)classType.Invoke("FusedMultiplyAdd", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), addend == null ? null : addend.getJCOInstance());
            return new NFloat(objFusedMultiplyAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Hypot(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHypot = (JCObject)classType.Invoke("Hypot", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objHypot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Ieee754Remainder(NFloat left, NFloat right) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objIeee754Remainder = (JCObject)classType.Invoke("Ieee754Remainder", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new NFloat(objIeee754Remainder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Lerp(NFloat value1, NFloat value2, NFloat amount) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLerp = (JCObject)classType.Invoke("Lerp", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance(), amount == null ? null : amount.getJCOInstance());
            return new NFloat(objLerp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log(NFloat x, NFloat newBase) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog = (JCObject)classType.Invoke("Log", x == null ? null : x.getJCOInstance(), newBase == null ? null : newBase.getJCOInstance());
            return new NFloat(objLog);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog = (JCObject)classType.Invoke("Log", x == null ? null : x.getJCOInstance());
            return new NFloat(objLog);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log10(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog10 = (JCObject)classType.Invoke("Log10", x == null ? null : x.getJCOInstance());
            return new NFloat(objLog10);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log10P1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog10P1 = (JCObject)classType.Invoke("Log10P1", x == null ? null : x.getJCOInstance());
            return new NFloat(objLog10P1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log2(NFloat value) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog2 = (JCObject)classType.Invoke("Log2", value == null ? null : value.getJCOInstance());
            return new NFloat(objLog2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Log2P1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLog2P1 = (JCObject)classType.Invoke("Log2P1", x == null ? null : x.getJCOInstance());
            return new NFloat(objLog2P1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat LogP1(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLogP1 = (JCObject)classType.Invoke("LogP1", x == null ? null : x.getJCOInstance());
            return new NFloat(objLogP1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Max(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMax = (JCObject)classType.Invoke("Max", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMax);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MaxMagnitude(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMaxMagnitude = (JCObject)classType.Invoke("MaxMagnitude", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMaxMagnitude);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MaxMagnitudeNumber(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMaxMagnitudeNumber = (JCObject)classType.Invoke("MaxMagnitudeNumber", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMaxMagnitudeNumber);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MaxNumber(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMaxNumber = (JCObject)classType.Invoke("MaxNumber", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMaxNumber);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Min(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMin = (JCObject)classType.Invoke("Min", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMin);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MinMagnitude(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMinMagnitude = (JCObject)classType.Invoke("MinMagnitude", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMinMagnitude);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MinMagnitudeNumber(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMinMagnitudeNumber = (JCObject)classType.Invoke("MinMagnitudeNumber", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMinMagnitudeNumber);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MinNumber(NFloat x, NFloat y) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMinNumber = (JCObject)classType.Invoke("MinNumber", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objMinNumber);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat MultiplyAddEstimate(NFloat left, NFloat right, NFloat addend) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMultiplyAddEstimate = (JCObject)classType.Invoke("MultiplyAddEstimate", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), addend == null ? null : addend.getJCOInstance());
            return new NFloat(objMultiplyAddEstimate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Parse(java.lang.String s, NumberStyles style, IFormatProvider provider) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.NullReferenceException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", s, style == null ? null : style.getJCOInstance(), provider == null ? null : provider.getJCOInstance());
            return new NFloat(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Parse(java.lang.String s, NumberStyles style) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.NullReferenceException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", s, style == null ? null : style.getJCOInstance());
            return new NFloat(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Parse(java.lang.String s, IFormatProvider provider) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.NullReferenceException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", s, provider == null ? null : provider.getJCOInstance());
            return new NFloat(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Parse(java.lang.String s) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.NullReferenceException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", s);
            return new NFloat(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Pow(NFloat x, NFloat y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPow = (JCObject)classType.Invoke("Pow", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new NFloat(objPow);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat RadiansToDegrees(NFloat radians) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRadiansToDegrees = (JCObject)classType.Invoke("RadiansToDegrees", radians == null ? null : radians.getJCOInstance());
            return new NFloat(objRadiansToDegrees);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat ReciprocalEstimate(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReciprocalEstimate = (JCObject)classType.Invoke("ReciprocalEstimate", x == null ? null : x.getJCOInstance());
            return new NFloat(objReciprocalEstimate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat ReciprocalSqrtEstimate(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReciprocalSqrtEstimate = (JCObject)classType.Invoke("ReciprocalSqrtEstimate", x == null ? null : x.getJCOInstance());
            return new NFloat(objReciprocalSqrtEstimate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat RootN(NFloat x, int n) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRootN = (JCObject)classType.Invoke("RootN", x == null ? null : x.getJCOInstance(), n);
            return new NFloat(objRootN);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Round(NFloat x, int digits, MidpointRounding mode) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRound = (JCObject)classType.Invoke("Round", x == null ? null : x.getJCOInstance(), digits, mode == null ? null : mode.getJCOInstance());
            return new NFloat(objRound);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Round(NFloat x, int digits) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRound = (JCObject)classType.Invoke("Round", x == null ? null : x.getJCOInstance(), digits);
            return new NFloat(objRound);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Round(NFloat x, MidpointRounding mode) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRound = (JCObject)classType.Invoke("Round", x == null ? null : x.getJCOInstance(), mode == null ? null : mode.getJCOInstance());
            return new NFloat(objRound);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Round(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRound = (JCObject)classType.Invoke("Round", x == null ? null : x.getJCOInstance());
            return new NFloat(objRound);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat ScaleB(NFloat x, int n) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objScaleB = (JCObject)classType.Invoke("ScaleB", x == null ? null : x.getJCOInstance(), n);
            return new NFloat(objScaleB);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Sin(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSin = (JCObject)classType.Invoke("Sin", x == null ? null : x.getJCOInstance());
            return new NFloat(objSin);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Sinh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSinh = (JCObject)classType.Invoke("Sinh", x == null ? null : x.getJCOInstance());
            return new NFloat(objSinh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat SinPi(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSinPi = (JCObject)classType.Invoke("SinPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objSinPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Sqrt(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSqrt = (JCObject)classType.Invoke("Sqrt", x == null ? null : x.getJCOInstance());
            return new NFloat(objSqrt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Tan(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objTan = (JCObject)classType.Invoke("Tan", x == null ? null : x.getJCOInstance());
            return new NFloat(objTan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Tanh(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objTanh = (JCObject)classType.Invoke("Tanh", x == null ? null : x.getJCOInstance());
            return new NFloat(objTanh);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat TanPi(NFloat x) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objTanPi = (JCObject)classType.Invoke("TanPi", x == null ? null : x.getJCOInstance());
            return new NFloat(objTanPi);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat Truncate(NFloat x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objTruncate = (JCObject)classType.Invoke("Truncate", x == null ? null : x.getJCOInstance());
            return new NFloat(objTruncate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToString(IFormatProvider provider) throws Throwable, system.PlatformNotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.NullReferenceException, system.NotSupportedException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ToString", provider == null ? null : provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToString(java.lang.String format, IFormatProvider provider) throws Throwable, system.PlatformNotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.NullReferenceException, system.NotSupportedException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ToString", format, provider == null ? null : provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToString(java.lang.String format) throws Throwable, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.NullReferenceException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException, system.TypeInitializationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ToString", format);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public double getValue() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("Value");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getSize() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Get("Size");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getE() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("E");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getEpsilon() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("Epsilon");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getMaxValue() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("MaxValue");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getMinValue() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("MinValue");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getNaN() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("NaN");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getNegativeInfinity() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("NegativeInfinity");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getNegativeZero() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("NegativeZero");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getPi() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("Pi");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getPositiveInfinity() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("PositiveInfinity");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NFloat getTau() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("Tau");
            return new NFloat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}