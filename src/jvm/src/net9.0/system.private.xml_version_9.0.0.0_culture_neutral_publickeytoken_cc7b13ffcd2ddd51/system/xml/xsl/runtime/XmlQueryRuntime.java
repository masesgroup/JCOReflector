/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.xml.xsl.runtime;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.xml.xpath.XPathNavigator;
import system.xml.xsl.runtime.XmlILIndex;
import system.xml.xpath.XPathItem;
import system.xml.schema.XmlTypeCode;
import system.collections.IList;
import system.collections.IListImplementation;
import system.xml.XmlQualifiedName;
import system.xml.xsl.runtime.XmlQueryOutput;
import system.xml.xsl.runtime.XmlCollation;
import system.xml.xsl.runtime.XmlNavigatorFilter;
import system.xml.xpath.XPathNodeType;
import system.xml.XmlNameTable;
import system.xml.xsl.runtime.XmlQueryContext;
import system.xml.xsl.runtime.XsltLibrary;


/**
 * The base .NET class managing System.Xml.Xsl.Runtime.XmlQueryRuntime, System.Private.Xml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Xml.Xsl.Runtime.XmlQueryRuntime" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Xml.Xsl.Runtime.XmlQueryRuntime</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class XmlQueryRuntime extends NetObject  {
    /**
     * Fully assembly qualified name: System.Private.Xml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
     */
    public static final String assemblyFullName = "System.Private.Xml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
    /**
     * Assembly name: System.Private.Xml
     */
    public static final String assemblyShortName = "System.Private.Xml";
    /**
     * Qualified class name: System.Xml.Xsl.Runtime.XmlQueryRuntime
     */
    public static final String className = "System.Xml.Xsl.Runtime.XmlQueryRuntime";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public XmlQueryRuntime(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link XmlQueryRuntime}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link XmlQueryRuntime} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static XmlQueryRuntime cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new XmlQueryRuntime(from.getJCOInstance());
    }

    // Constructors section
    
    public XmlQueryRuntime() throws Throwable {
    }



    
    // Methods section
    
    public boolean EarlyBoundFunctionExists(java.lang.String name, java.lang.String namespaceUri) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.NullReferenceException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEarlyBoundFunctionExists = null;
        try {
            retObjectEarlyBoundFunctionExists = classInstance.Invoke("EarlyBoundFunctionExists", name, namespaceUri);
            return (boolean)retObjectEarlyBoundFunctionExists;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectEarlyBoundFunctionExists != null ? retObjectEarlyBoundFunctionExists.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean FindIndex(XPathNavigator context, int indexId, JCORefOut<XmlILIndex> index) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectFindIndex = null;
        try {
            retObjectFindIndex = classInstance.Invoke("FindIndex", context == null ? null : context.getJCOInstance(), indexId, index.getJCRefOut());
            return (boolean)retObjectFindIndex;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectFindIndex != null ? retObjectFindIndex.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsGlobalComputed(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsGlobalComputed = null;
        try {
            retObjectIsGlobalComputed = classInstance.Invoke("IsGlobalComputed", index);
            return (boolean)retObjectIsGlobalComputed;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsGlobalComputed != null ? retObjectIsGlobalComputed.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsQNameEqual(XPathNavigator navigator, int indexLocalName, int indexNamespaceUri) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsQNameEqual = null;
        try {
            retObjectIsQNameEqual = classInstance.Invoke("IsQNameEqual", navigator == null ? null : navigator.getJCOInstance(), indexLocalName, indexNamespaceUri);
            return (boolean)retObjectIsQNameEqual;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsQNameEqual != null ? retObjectIsQNameEqual.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsQNameEqual(XPathNavigator n1, XPathNavigator n2) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectIsQNameEqual = null;
        try {
            retObjectIsQNameEqual = classInstance.Invoke("IsQNameEqual", n1 == null ? null : n1.getJCOInstance(), n2 == null ? null : n2.getJCOInstance());
            return (boolean)retObjectIsQNameEqual;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectIsQNameEqual != null ? retObjectIsQNameEqual.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MatchesXmlType(XPathItem item, int indexType) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMatchesXmlType = null;
        try {
            retObjectMatchesXmlType = classInstance.Invoke("MatchesXmlType", item == null ? null : item.getJCOInstance(), indexType);
            return (boolean)retObjectMatchesXmlType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMatchesXmlType != null ? retObjectMatchesXmlType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MatchesXmlType(XPathItem item, XmlTypeCode code) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectMatchesXmlType = null;
        try {
            retObjectMatchesXmlType = classInstance.Invoke("MatchesXmlType", item == null ? null : item.getJCOInstance(), code == null ? null : code.getJCOInstance());
            return (boolean)retObjectMatchesXmlType;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into boolean", retObjectMatchesXmlType != null ? retObjectMatchesXmlType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ComparePosition(XPathNavigator navigatorThis, XPathNavigator navigatorThat) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectComparePosition = null;
        try {
            retObjectComparePosition = classInstance.Invoke("ComparePosition", navigatorThis == null ? null : navigatorThis.getJCOInstance(), navigatorThat == null ? null : navigatorThat.getJCOInstance());
            return (int)retObjectComparePosition;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectComparePosition_ToString = retObjectComparePosition == null ? "null" : retObjectComparePosition.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectComparePositionNumber = (java.lang.Number)retObjectComparePosition;
                return retObjectComparePositionNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectComparePosition != null ? retObjectComparePosition.getClass() : "null", retObjectComparePosition_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int OnCurrentNodeChanged(XPathNavigator currentNode) throws Throwable {
        if (classType == null)
            throw new java.lang.UnsupportedOperationException("classType is null.");
        java.lang.Object retObjectOnCurrentNodeChanged = null;
        try {
            retObjectOnCurrentNodeChanged = classType.Invoke("OnCurrentNodeChanged", currentNode == null ? null : currentNode.getJCOInstance());
            return (int)retObjectOnCurrentNodeChanged;
        } catch (java.lang.ClassCastException cce) {
            java.lang.String retObjectOnCurrentNodeChanged_ToString = retObjectOnCurrentNodeChanged == null ? "null" : retObjectOnCurrentNodeChanged.toString();
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectOnCurrentNodeChangedNumber = (java.lang.Number)retObjectOnCurrentNodeChanged;
                return retObjectOnCurrentNodeChangedNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s (%s) into int and, as fallback solution, into java.lang.Number", retObjectOnCurrentNodeChanged != null ? retObjectOnCurrentNodeChanged.getClass() : "null", retObjectOnCurrentNodeChanged_ToString), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IList DebugGetGlobalValue(java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDebugGetGlobalValue = null;
        try {
            retObjectDebugGetGlobalValue = classInstance.Invoke("DebugGetGlobalValue", name);
            JCObject objDebugGetGlobalValue = (JCObject)retObjectDebugGetGlobalValue;
            return new IListImplementation(objDebugGetGlobalValue);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDebugGetGlobalValue != null ? retObjectDebugGetGlobalValue.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject ChangeTypeXsltArgument(int indexType, NetObject value, NetType destinationType) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.InvalidCastException, system.OutOfMemoryException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectChangeTypeXsltArgument = null;
        try {
            retObjectChangeTypeXsltArgument = classInstance.Invoke("ChangeTypeXsltArgument", indexType, value == null ? null : value.getJCOInstance(), destinationType == null ? null : destinationType.getJCOInstance());
            JCObject objChangeTypeXsltArgument = (JCObject)retObjectChangeTypeXsltArgument;
            return new NetObject(objChangeTypeXsltArgument);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectChangeTypeXsltArgument != null ? retObjectChangeTypeXsltArgument.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject ChangeTypeXsltResult(int indexType, NetObject value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.security.SecurityException, system.OverflowException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectChangeTypeXsltResult = null;
        try {
            retObjectChangeTypeXsltResult = classInstance.Invoke("ChangeTypeXsltResult", indexType, value == null ? null : value.getJCOInstance());
            JCObject objChangeTypeXsltResult = (JCObject)retObjectChangeTypeXsltResult;
            return new NetObject(objChangeTypeXsltResult);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectChangeTypeXsltResult != null ? retObjectChangeTypeXsltResult.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject DebugGetXsltValue(IList seq) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDebugGetXsltValue = null;
        try {
            retObjectDebugGetXsltValue = classInstance.Invoke("DebugGetXsltValue", seq == null ? null : seq.getJCOInstance());
            JCObject objDebugGetXsltValue = (JCObject)retObjectDebugGetXsltValue;
            return new NetObject(objDebugGetXsltValue);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDebugGetXsltValue != null ? retObjectDebugGetXsltValue.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetEarlyBoundObject(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetEarlyBoundObject = null;
        try {
            retObjectGetEarlyBoundObject = classInstance.Invoke("GetEarlyBoundObject", index);
            JCObject objGetEarlyBoundObject = (JCObject)retObjectGetEarlyBoundObject;
            return new NetObject(objGetEarlyBoundObject);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetEarlyBoundObject != null ? retObjectGetEarlyBoundObject.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetGlobalValue(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetGlobalValue = null;
        try {
            retObjectGetGlobalValue = classInstance.Invoke("GetGlobalValue", index);
            JCObject objGetGlobalValue = (JCObject)retObjectGetGlobalValue;
            return new NetObject(objGetGlobalValue);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetGlobalValue != null ? retObjectGetGlobalValue.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GenerateId(XPathNavigator navigator) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArrayTypeMismatchException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.InvalidCastException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGenerateId = null;
        try {
            retObjectGenerateId = classInstance.Invoke("GenerateId", navigator == null ? null : navigator.getJCOInstance());
            return (java.lang.String)retObjectGenerateId;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGenerateId != null ? retObjectGenerateId.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAtomizedName(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetAtomizedName = null;
        try {
            retObjectGetAtomizedName = classInstance.Invoke("GetAtomizedName", index);
            return (java.lang.String)retObjectGetAtomizedName;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into java.lang.String", retObjectGetAtomizedName != null ? retObjectGetAtomizedName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] DebugGetGlobalNames() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDebugGetGlobalNames = null;
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            retObjectDebugGetGlobalNames = classInstance.Invoke("DebugGetGlobalNames");
            JCObject resultingObjects = (JCObject)retObjectDebugGetGlobalNames;
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexDebugGetGlobalNames = 0; indexDebugGetGlobalNames < resultingArrayList.size(); indexDebugGetGlobalNames++ ) {
				resultingArray[indexDebugGetGlobalNames] = (java.lang.String)resultingArrayList.get(indexDebugGetGlobalNames);
            }
            return resultingArray;
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into java.lang.String", retObjectDebugGetGlobalNames != null ? retObjectDebugGetGlobalNames.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlQualifiedName ParseTagName(java.lang.String tagName, int indexPrefixMappings) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.InvalidOperationException, system.FormatException, system.xml.XmlException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectParseTagName = null;
        try {
            retObjectParseTagName = classInstance.Invoke("ParseTagName", tagName, indexPrefixMappings);
            JCObject objParseTagName = (JCObject)retObjectParseTagName;
            return new XmlQualifiedName(objParseTagName);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectParseTagName != null ? retObjectParseTagName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlQualifiedName ParseTagName(java.lang.String tagName, java.lang.String ns) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.xml.XmlException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectParseTagName = null;
        try {
            retObjectParseTagName = classInstance.Invoke("ParseTagName", tagName, ns);
            JCObject objParseTagName = (JCObject)retObjectParseTagName;
            return new XmlQualifiedName(objParseTagName);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectParseTagName != null ? retObjectParseTagName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator EndRtfConstruction(JCORefOut<XmlQueryOutput> output) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectEndRtfConstruction = null;
        try {
            retObjectEndRtfConstruction = classInstance.Invoke("EndRtfConstruction", output.getJCRefOut());
            JCObject objEndRtfConstruction = (JCObject)retObjectEndRtfConstruction;
            return new XPathNavigator(objEndRtfConstruction);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectEndRtfConstruction != null ? retObjectEndRtfConstruction.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator TextRtfConstruction(java.lang.String text, java.lang.String baseUri) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectTextRtfConstruction = null;
        try {
            retObjectTextRtfConstruction = classInstance.Invoke("TextRtfConstruction", text, baseUri);
            JCObject objTextRtfConstruction = (JCObject)retObjectTextRtfConstruction;
            return new XPathNavigator(objTextRtfConstruction);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectTextRtfConstruction != null ? retObjectTextRtfConstruction.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlCollation CreateCollation(java.lang.String collation) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.globalization.CultureNotFoundException, system.diagnostics.UnreachableException, system.OutOfMemoryException, system.UriFormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCreateCollation = null;
        try {
            retObjectCreateCollation = classInstance.Invoke("CreateCollation", collation);
            JCObject objCreateCollation = (JCObject)retObjectCreateCollation;
            return new XmlCollation(objCreateCollation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCreateCollation != null ? retObjectCreateCollation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlCollation GetCollation(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetCollation = null;
        try {
            retObjectGetCollation = classInstance.Invoke("GetCollation", index);
            JCObject objGetCollation = (JCObject)retObjectGetCollation;
            return new XmlCollation(objGetCollation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetCollation != null ? retObjectGetCollation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlNavigatorFilter GetNameFilter(int index) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetNameFilter = null;
        try {
            retObjectGetNameFilter = classInstance.Invoke("GetNameFilter", index);
            JCObject objGetNameFilter = (JCObject)retObjectGetNameFilter;
            return new XmlNavigatorFilter(objGetNameFilter);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetNameFilter != null ? retObjectGetNameFilter.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlNavigatorFilter GetTypeFilter(XPathNodeType nodeType) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetTypeFilter = null;
        try {
            retObjectGetTypeFilter = classInstance.Invoke("GetTypeFilter", nodeType == null ? null : nodeType.getJCOInstance());
            JCObject objGetTypeFilter = (JCObject)retObjectGetTypeFilter;
            return new XmlNavigatorFilter(objGetTypeFilter);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetTypeFilter != null ? retObjectGetTypeFilter.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddNewIndex(XPathNavigator context, int indexId, XmlILIndex index) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddNewIndex", context == null ? null : context.getJCOInstance(), indexId, index == null ? null : index.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DebugSetGlobalValue(java.lang.String name, NetObject value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("DebugSetGlobalValue", name, value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SendMessage(java.lang.String message) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SendMessage", message);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetGlobalValue(int index, NetObject value) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetGlobalValue", index, value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StartRtfConstruction(java.lang.String baseUri, JCORefOut<XmlQueryOutput> output) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.NotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("StartRtfConstruction", baseUri, output.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StartSequenceConstruction(JCORefOut<XmlQueryOutput> output) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.NotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("StartSequenceConstruction", output.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ThrowException(java.lang.String text) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.IndexOutOfRangeException, system.FormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ThrowException", text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public XmlNameTable getNameTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectNameTable = null;
        try {
            retObjectNameTable = classInstance.Get("NameTable");
            JCObject val = (JCObject)retObjectNameTable;
            return new XmlNameTable(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectNameTable != null ? retObjectNameTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlQueryContext getExternalContext() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExternalContext = null;
        try {
            retObjectExternalContext = classInstance.Get("ExternalContext");
            JCObject val = (JCObject)retObjectExternalContext;
            return new XmlQueryContext(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExternalContext != null ? retObjectExternalContext.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlQueryOutput getOutput() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectOutput = null;
        try {
            retObjectOutput = classInstance.Get("Output");
            JCObject val = (JCObject)retObjectOutput;
            return new XmlQueryOutput(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectOutput != null ? retObjectOutput.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XsltLibrary getXsltFunctions() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectXsltFunctions = null;
        try {
            retObjectXsltFunctions = classInstance.Get("XsltFunctions");
            JCObject val = (JCObject)retObjectXsltFunctions;
            return new XsltLibrary(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectXsltFunctions != null ? retObjectXsltFunctions.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}