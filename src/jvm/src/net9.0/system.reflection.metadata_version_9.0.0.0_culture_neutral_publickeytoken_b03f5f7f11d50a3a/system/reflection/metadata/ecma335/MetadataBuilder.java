/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.metadata.ecma335;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.metadata.ecma335.TableIndex;
import system.reflection.metadata.AssemblyDefinitionHandle;
import system.reflection.metadata.StringHandle;
import system.Version;
import system.reflection.metadata.BlobHandle;
import system.reflection.AssemblyFlags;
import system.reflection.AssemblyHashAlgorithm;
import system.reflection.metadata.AssemblyFileHandle;
import system.reflection.metadata.AssemblyReferenceHandle;
import system.reflection.metadata.BlobBuilder;
import system.reflection.metadata.ConstantHandle;
import system.reflection.metadata.EntityHandle;
import system.reflection.metadata.CustomAttributeHandle;
import system.reflection.metadata.CustomDebugInformationHandle;
import system.reflection.metadata.GuidHandle;
import system.reflection.metadata.DeclarativeSecurityAttributeHandle;
import system.reflection.DeclarativeSecurityAction;
import system.reflection.metadata.DocumentHandle;
import system.reflection.metadata.EventDefinitionHandle;
import system.reflection.EventAttributes;
import system.reflection.metadata.ExportedTypeHandle;
import system.reflection.TypeAttributes;
import system.reflection.metadata.FieldDefinitionHandle;
import system.reflection.FieldAttributes;
import system.reflection.metadata.GenericParameterConstraintHandle;
import system.reflection.metadata.GenericParameterHandle;
import system.reflection.GenericParameterAttributes;
import system.Guid;
import system.reflection.metadata.ImportScopeHandle;
import system.reflection.metadata.InterfaceImplementationHandle;
import system.reflection.metadata.TypeDefinitionHandle;
import system.reflection.metadata.LocalConstantHandle;
import system.reflection.metadata.LocalScopeHandle;
import system.reflection.metadata.MethodDefinitionHandle;
import system.reflection.metadata.LocalVariableHandle;
import system.reflection.metadata.LocalVariableAttributes;
import system.reflection.metadata.ManifestResourceHandle;
import system.reflection.ManifestResourceAttributes;
import system.UInt32;
import system.reflection.metadata.MemberReferenceHandle;
import system.reflection.metadata.MethodDebugInformationHandle;
import system.reflection.MethodAttributes;
import system.reflection.MethodImplAttributes;
import system.reflection.metadata.ParameterHandle;
import system.reflection.metadata.MethodImplementationHandle;
import system.reflection.metadata.MethodSpecificationHandle;
import system.reflection.metadata.ModuleDefinitionHandle;
import system.reflection.metadata.ModuleReferenceHandle;
import system.reflection.ParameterAttributes;
import system.reflection.metadata.PropertyDefinitionHandle;
import system.reflection.PropertyAttributes;
import system.reflection.metadata.StandaloneSignatureHandle;
import system.reflection.metadata.TypeReferenceHandle;
import system.reflection.metadata.TypeSpecificationHandle;
import system.reflection.metadata.UserStringHandle;
import system.reflection.metadata.ecma335.EditAndContinueOperation;
import system.reflection.MethodImportAttributes;
import system.reflection.MethodSemanticsAttributes;
import system.UInt16;
import system.reflection.metadata.ecma335.HeapIndex;


/**
 * The base .NET class managing System.Reflection.Metadata.Ecma335.MetadataBuilder, System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.Ecma335.MetadataBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.Metadata.Ecma335.MetadataBuilder</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class MetadataBuilder extends NetObject  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.Metadata.Ecma335.MetadataBuilder
     */
    public static final String className = "System.Reflection.Metadata.Ecma335.MetadataBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public MetadataBuilder(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link MetadataBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link MetadataBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static MetadataBuilder cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new MetadataBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    public MetadataBuilder() throws Throwable {
    }

    public MetadataBuilder(int userStringHeapStartOffset, int stringHeapStartOffset, int blobHeapStartOffset, int guidHeapStartOffset) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.reflection.metadata.ImageFormatLimitationException, system.ArgumentNullException, system.ArrayTypeMismatchException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(userStringHeapStartOffset, stringHeapStartOffset, blobHeapStartOffset, guidHeapStartOffset));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public int GetRowCount(TableIndex table) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetRowCount = null;
        try {
            retObjectGetRowCount = classInstance.Invoke("GetRowCount", table == null ? null : table.getJCOInstance());
            return (int)retObjectGetRowCount;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectGetRowCountNumber = (java.lang.Number)retObjectGetRowCount;
                return retObjectGetRowCountNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectGetRowCount != null ? retObjectGetRowCount.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyDefinitionHandle AddAssembly(StringHandle name, Version version, StringHandle culture, BlobHandle publicKey, AssemblyFlags flags, AssemblyHashAlgorithm hashAlgorithm) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddAssembly = null;
        try {
            retObjectAddAssembly = classInstance.Invoke("AddAssembly", name == null ? null : name.getJCOInstance(), version == null ? null : version.getJCOInstance(), culture == null ? null : culture.getJCOInstance(), publicKey == null ? null : publicKey.getJCOInstance(), flags == null ? null : flags.getJCOInstance(), hashAlgorithm == null ? null : hashAlgorithm.getJCOInstance());
            JCObject objAddAssembly = (JCObject)retObjectAddAssembly;
            return new AssemblyDefinitionHandle(objAddAssembly);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddAssembly != null ? retObjectAddAssembly.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyFileHandle AddAssemblyFile(StringHandle name, BlobHandle hashValue, boolean containsMetadata) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddAssemblyFile = null;
        try {
            retObjectAddAssemblyFile = classInstance.Invoke("AddAssemblyFile", name == null ? null : name.getJCOInstance(), hashValue == null ? null : hashValue.getJCOInstance(), containsMetadata);
            JCObject objAddAssemblyFile = (JCObject)retObjectAddAssemblyFile;
            return new AssemblyFileHandle(objAddAssemblyFile);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddAssemblyFile != null ? retObjectAddAssemblyFile.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyReferenceHandle AddAssemblyReference(StringHandle name, Version version, StringHandle culture, BlobHandle publicKeyOrToken, AssemblyFlags flags, BlobHandle hashValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddAssemblyReference = null;
        try {
            retObjectAddAssemblyReference = classInstance.Invoke("AddAssemblyReference", name == null ? null : name.getJCOInstance(), version == null ? null : version.getJCOInstance(), culture == null ? null : culture.getJCOInstance(), publicKeyOrToken == null ? null : publicKeyOrToken.getJCOInstance(), flags == null ? null : flags.getJCOInstance(), hashValue == null ? null : hashValue.getJCOInstance());
            JCObject objAddAssemblyReference = (JCObject)retObjectAddAssemblyReference;
            return new AssemblyReferenceHandle(objAddAssemblyReference);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddAssemblyReference != null ? retObjectAddAssemblyReference.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddBlob(byte[] value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddBlob = null;
        try {
            retObjectGetOrAddBlob = classInstance.Invoke("GetOrAddBlob", (java.lang.Object)value);
            JCObject objGetOrAddBlob = (JCObject)retObjectGetOrAddBlob;
            return new BlobHandle(objGetOrAddBlob);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddBlob != null ? retObjectGetOrAddBlob.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddBlob(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddBlob = null;
        try {
            retObjectGetOrAddBlob = classInstance.Invoke("GetOrAddBlob", (java.lang.Object)dupParam0.getJCRefOut());
            JCObject objGetOrAddBlob = (JCObject)retObjectGetOrAddBlob;
            return new BlobHandle(objGetOrAddBlob);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddBlob != null ? retObjectGetOrAddBlob.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddBlob(BlobBuilder value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddBlob = null;
        try {
            retObjectGetOrAddBlob = classInstance.Invoke("GetOrAddBlob", value == null ? null : value.getJCOInstance());
            JCObject objGetOrAddBlob = (JCObject)retObjectGetOrAddBlob;
            return new BlobHandle(objGetOrAddBlob);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddBlob != null ? retObjectGetOrAddBlob.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddBlobUTF16(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.NullReferenceException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddBlobUTF16 = null;
        try {
            retObjectGetOrAddBlobUTF16 = classInstance.Invoke("GetOrAddBlobUTF16", value);
            JCObject objGetOrAddBlobUTF16 = (JCObject)retObjectGetOrAddBlobUTF16;
            return new BlobHandle(objGetOrAddBlobUTF16);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddBlobUTF16 != null ? retObjectGetOrAddBlobUTF16.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddBlobUTF8(java.lang.String value, boolean allowUnpairedSurrogates) throws Throwable, system.NotSupportedException, system.ArgumentException, system.PlatformNotSupportedException, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddBlobUTF8 = null;
        try {
            retObjectGetOrAddBlobUTF8 = classInstance.Invoke("GetOrAddBlobUTF8", value, allowUnpairedSurrogates);
            JCObject objGetOrAddBlobUTF8 = (JCObject)retObjectGetOrAddBlobUTF8;
            return new BlobHandle(objGetOrAddBlobUTF8);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddBlobUTF8 != null ? retObjectGetOrAddBlobUTF8.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddConstantBlob(NetObject value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.IndexOutOfRangeException, system.NullReferenceException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddConstantBlob = null;
        try {
            retObjectGetOrAddConstantBlob = classInstance.Invoke("GetOrAddConstantBlob", value == null ? null : value.getJCOInstance());
            JCObject objGetOrAddConstantBlob = (JCObject)retObjectGetOrAddConstantBlob;
            return new BlobHandle(objGetOrAddConstantBlob);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddConstantBlob != null ? retObjectGetOrAddConstantBlob.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BlobHandle GetOrAddDocumentName(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.NullReferenceException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddDocumentName = null;
        try {
            retObjectGetOrAddDocumentName = classInstance.Invoke("GetOrAddDocumentName", value);
            JCObject objGetOrAddDocumentName = (JCObject)retObjectGetOrAddDocumentName;
            return new BlobHandle(objGetOrAddDocumentName);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddDocumentName != null ? retObjectGetOrAddDocumentName.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConstantHandle AddConstant(EntityHandle parent, NetObject value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.NullReferenceException, system.NotSupportedException, system.ArrayTypeMismatchException, system.RankException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddConstant = null;
        try {
            retObjectAddConstant = classInstance.Invoke("AddConstant", parent == null ? null : parent.getJCOInstance(), value == null ? null : value.getJCOInstance());
            JCObject objAddConstant = (JCObject)retObjectAddConstant;
            return new ConstantHandle(objAddConstant);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddConstant != null ? retObjectAddConstant.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CustomAttributeHandle AddCustomAttribute(EntityHandle parent, EntityHandle constructor, BlobHandle value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddCustomAttribute = null;
        try {
            retObjectAddCustomAttribute = classInstance.Invoke("AddCustomAttribute", parent == null ? null : parent.getJCOInstance(), constructor == null ? null : constructor.getJCOInstance(), value == null ? null : value.getJCOInstance());
            JCObject objAddCustomAttribute = (JCObject)retObjectAddCustomAttribute;
            return new CustomAttributeHandle(objAddCustomAttribute);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddCustomAttribute != null ? retObjectAddCustomAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CustomDebugInformationHandle AddCustomDebugInformation(EntityHandle parent, GuidHandle kind, BlobHandle value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddCustomDebugInformation = null;
        try {
            retObjectAddCustomDebugInformation = classInstance.Invoke("AddCustomDebugInformation", parent == null ? null : parent.getJCOInstance(), kind == null ? null : kind.getJCOInstance(), value == null ? null : value.getJCOInstance());
            JCObject objAddCustomDebugInformation = (JCObject)retObjectAddCustomDebugInformation;
            return new CustomDebugInformationHandle(objAddCustomDebugInformation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddCustomDebugInformation != null ? retObjectAddCustomDebugInformation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DeclarativeSecurityAttributeHandle AddDeclarativeSecurityAttribute(EntityHandle parent, DeclarativeSecurityAction action, BlobHandle permissionSet) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddDeclarativeSecurityAttribute = null;
        try {
            retObjectAddDeclarativeSecurityAttribute = classInstance.Invoke("AddDeclarativeSecurityAttribute", parent == null ? null : parent.getJCOInstance(), action == null ? null : action.getJCOInstance(), permissionSet == null ? null : permissionSet.getJCOInstance());
            JCObject objAddDeclarativeSecurityAttribute = (JCObject)retObjectAddDeclarativeSecurityAttribute;
            return new DeclarativeSecurityAttributeHandle(objAddDeclarativeSecurityAttribute);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddDeclarativeSecurityAttribute != null ? retObjectAddDeclarativeSecurityAttribute.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DocumentHandle AddDocument(BlobHandle name, GuidHandle hashAlgorithm, BlobHandle hash, GuidHandle language) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddDocument = null;
        try {
            retObjectAddDocument = classInstance.Invoke("AddDocument", name == null ? null : name.getJCOInstance(), hashAlgorithm == null ? null : hashAlgorithm.getJCOInstance(), hash == null ? null : hash.getJCOInstance(), language == null ? null : language.getJCOInstance());
            JCObject objAddDocument = (JCObject)retObjectAddDocument;
            return new DocumentHandle(objAddDocument);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddDocument != null ? retObjectAddDocument.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EventDefinitionHandle AddEvent(EventAttributes attributes, StringHandle name, EntityHandle type) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddEvent = null;
        try {
            retObjectAddEvent = classInstance.Invoke("AddEvent", attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), type == null ? null : type.getJCOInstance());
            JCObject objAddEvent = (JCObject)retObjectAddEvent;
            return new EventDefinitionHandle(objAddEvent);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddEvent != null ? retObjectAddEvent.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExportedTypeHandle AddExportedType(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle implementation, int typeDefinitionId) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddExportedType = null;
        try {
            retObjectAddExportedType = classInstance.Invoke("AddExportedType", attributes == null ? null : attributes.getJCOInstance(), namespace == null ? null : namespace.getJCOInstance(), name == null ? null : name.getJCOInstance(), implementation == null ? null : implementation.getJCOInstance(), typeDefinitionId);
            JCObject objAddExportedType = (JCObject)retObjectAddExportedType;
            return new ExportedTypeHandle(objAddExportedType);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddExportedType != null ? retObjectAddExportedType.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FieldDefinitionHandle AddFieldDefinition(FieldAttributes attributes, StringHandle name, BlobHandle signature) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddFieldDefinition = null;
        try {
            retObjectAddFieldDefinition = classInstance.Invoke("AddFieldDefinition", attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), signature == null ? null : signature.getJCOInstance());
            JCObject objAddFieldDefinition = (JCObject)retObjectAddFieldDefinition;
            return new FieldDefinitionHandle(objAddFieldDefinition);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddFieldDefinition != null ? retObjectAddFieldDefinition.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GenericParameterConstraintHandle AddGenericParameterConstraint(GenericParameterHandle genericParameter, EntityHandle constraint) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddGenericParameterConstraint = null;
        try {
            retObjectAddGenericParameterConstraint = classInstance.Invoke("AddGenericParameterConstraint", genericParameter == null ? null : genericParameter.getJCOInstance(), constraint == null ? null : constraint.getJCOInstance());
            JCObject objAddGenericParameterConstraint = (JCObject)retObjectAddGenericParameterConstraint;
            return new GenericParameterConstraintHandle(objAddGenericParameterConstraint);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddGenericParameterConstraint != null ? retObjectAddGenericParameterConstraint.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GenericParameterHandle AddGenericParameter(EntityHandle parent, GenericParameterAttributes attributes, StringHandle name, int index) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddGenericParameter = null;
        try {
            retObjectAddGenericParameter = classInstance.Invoke("AddGenericParameter", parent == null ? null : parent.getJCOInstance(), attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), index);
            JCObject objAddGenericParameter = (JCObject)retObjectAddGenericParameter;
            return new GenericParameterHandle(objAddGenericParameter);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddGenericParameter != null ? retObjectAddGenericParameter.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GuidHandle GetOrAddGuid(Guid guid) throws Throwable, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddGuid = null;
        try {
            retObjectGetOrAddGuid = classInstance.Invoke("GetOrAddGuid", guid == null ? null : guid.getJCOInstance());
            JCObject objGetOrAddGuid = (JCObject)retObjectGetOrAddGuid;
            return new GuidHandle(objGetOrAddGuid);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddGuid != null ? retObjectGetOrAddGuid.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ImportScopeHandle AddImportScope(ImportScopeHandle parentScope, BlobHandle imports) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddImportScope = null;
        try {
            retObjectAddImportScope = classInstance.Invoke("AddImportScope", parentScope == null ? null : parentScope.getJCOInstance(), imports == null ? null : imports.getJCOInstance());
            JCObject objAddImportScope = (JCObject)retObjectAddImportScope;
            return new ImportScopeHandle(objAddImportScope);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddImportScope != null ? retObjectAddImportScope.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InterfaceImplementationHandle AddInterfaceImplementation(TypeDefinitionHandle type, EntityHandle implementedInterface) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddInterfaceImplementation = null;
        try {
            retObjectAddInterfaceImplementation = classInstance.Invoke("AddInterfaceImplementation", type == null ? null : type.getJCOInstance(), implementedInterface == null ? null : implementedInterface.getJCOInstance());
            JCObject objAddInterfaceImplementation = (JCObject)retObjectAddInterfaceImplementation;
            return new InterfaceImplementationHandle(objAddInterfaceImplementation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddInterfaceImplementation != null ? retObjectAddInterfaceImplementation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocalConstantHandle AddLocalConstant(StringHandle name, BlobHandle signature) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddLocalConstant = null;
        try {
            retObjectAddLocalConstant = classInstance.Invoke("AddLocalConstant", name == null ? null : name.getJCOInstance(), signature == null ? null : signature.getJCOInstance());
            JCObject objAddLocalConstant = (JCObject)retObjectAddLocalConstant;
            return new LocalConstantHandle(objAddLocalConstant);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddLocalConstant != null ? retObjectAddLocalConstant.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocalScopeHandle AddLocalScope(MethodDefinitionHandle method, ImportScopeHandle importScope, LocalVariableHandle variableList, LocalConstantHandle constantList, int startOffset, int length) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddLocalScope = null;
        try {
            retObjectAddLocalScope = classInstance.Invoke("AddLocalScope", method == null ? null : method.getJCOInstance(), importScope == null ? null : importScope.getJCOInstance(), variableList == null ? null : variableList.getJCOInstance(), constantList == null ? null : constantList.getJCOInstance(), startOffset, length);
            JCObject objAddLocalScope = (JCObject)retObjectAddLocalScope;
            return new LocalScopeHandle(objAddLocalScope);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddLocalScope != null ? retObjectAddLocalScope.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocalVariableHandle AddLocalVariable(LocalVariableAttributes attributes, int index, StringHandle name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddLocalVariable = null;
        try {
            retObjectAddLocalVariable = classInstance.Invoke("AddLocalVariable", attributes == null ? null : attributes.getJCOInstance(), index, name == null ? null : name.getJCOInstance());
            JCObject objAddLocalVariable = (JCObject)retObjectAddLocalVariable;
            return new LocalVariableHandle(objAddLocalVariable);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddLocalVariable != null ? retObjectAddLocalVariable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ManifestResourceHandle AddManifestResource(ManifestResourceAttributes attributes, StringHandle name, EntityHandle implementation, UInt32 offset) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddManifestResource = null;
        try {
            retObjectAddManifestResource = classInstance.Invoke("AddManifestResource", attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), implementation == null ? null : implementation.getJCOInstance(), offset == null ? null : offset.getJCOInstance());
            JCObject objAddManifestResource = (JCObject)retObjectAddManifestResource;
            return new ManifestResourceHandle(objAddManifestResource);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddManifestResource != null ? retObjectAddManifestResource.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MemberReferenceHandle AddMemberReference(EntityHandle parent, StringHandle name, BlobHandle signature) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddMemberReference = null;
        try {
            retObjectAddMemberReference = classInstance.Invoke("AddMemberReference", parent == null ? null : parent.getJCOInstance(), name == null ? null : name.getJCOInstance(), signature == null ? null : signature.getJCOInstance());
            JCObject objAddMemberReference = (JCObject)retObjectAddMemberReference;
            return new MemberReferenceHandle(objAddMemberReference);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddMemberReference != null ? retObjectAddMemberReference.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MethodDebugInformationHandle AddMethodDebugInformation(DocumentHandle document, BlobHandle sequencePoints) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddMethodDebugInformation = null;
        try {
            retObjectAddMethodDebugInformation = classInstance.Invoke("AddMethodDebugInformation", document == null ? null : document.getJCOInstance(), sequencePoints == null ? null : sequencePoints.getJCOInstance());
            JCObject objAddMethodDebugInformation = (JCObject)retObjectAddMethodDebugInformation;
            return new MethodDebugInformationHandle(objAddMethodDebugInformation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddMethodDebugInformation != null ? retObjectAddMethodDebugInformation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MethodDefinitionHandle AddMethodDefinition(MethodAttributes attributes, MethodImplAttributes implAttributes, StringHandle name, BlobHandle signature, int bodyOffset, ParameterHandle parameterList) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddMethodDefinition = null;
        try {
            retObjectAddMethodDefinition = classInstance.Invoke("AddMethodDefinition", attributes == null ? null : attributes.getJCOInstance(), implAttributes == null ? null : implAttributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), signature == null ? null : signature.getJCOInstance(), bodyOffset, parameterList == null ? null : parameterList.getJCOInstance());
            JCObject objAddMethodDefinition = (JCObject)retObjectAddMethodDefinition;
            return new MethodDefinitionHandle(objAddMethodDefinition);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddMethodDefinition != null ? retObjectAddMethodDefinition.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MethodImplementationHandle AddMethodImplementation(TypeDefinitionHandle type, EntityHandle methodBody, EntityHandle methodDeclaration) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddMethodImplementation = null;
        try {
            retObjectAddMethodImplementation = classInstance.Invoke("AddMethodImplementation", type == null ? null : type.getJCOInstance(), methodBody == null ? null : methodBody.getJCOInstance(), methodDeclaration == null ? null : methodDeclaration.getJCOInstance());
            JCObject objAddMethodImplementation = (JCObject)retObjectAddMethodImplementation;
            return new MethodImplementationHandle(objAddMethodImplementation);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddMethodImplementation != null ? retObjectAddMethodImplementation.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MethodSpecificationHandle AddMethodSpecification(EntityHandle method, BlobHandle instantiation) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddMethodSpecification = null;
        try {
            retObjectAddMethodSpecification = classInstance.Invoke("AddMethodSpecification", method == null ? null : method.getJCOInstance(), instantiation == null ? null : instantiation.getJCOInstance());
            JCObject objAddMethodSpecification = (JCObject)retObjectAddMethodSpecification;
            return new MethodSpecificationHandle(objAddMethodSpecification);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddMethodSpecification != null ? retObjectAddMethodSpecification.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ModuleDefinitionHandle AddModule(int generation, StringHandle moduleName, GuidHandle mvid, GuidHandle encId, GuidHandle encBaseId) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddModule = null;
        try {
            retObjectAddModule = classInstance.Invoke("AddModule", generation, moduleName == null ? null : moduleName.getJCOInstance(), mvid == null ? null : mvid.getJCOInstance(), encId == null ? null : encId.getJCOInstance(), encBaseId == null ? null : encBaseId.getJCOInstance());
            JCObject objAddModule = (JCObject)retObjectAddModule;
            return new ModuleDefinitionHandle(objAddModule);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddModule != null ? retObjectAddModule.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ModuleReferenceHandle AddModuleReference(StringHandle moduleName) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddModuleReference = null;
        try {
            retObjectAddModuleReference = classInstance.Invoke("AddModuleReference", moduleName == null ? null : moduleName.getJCOInstance());
            JCObject objAddModuleReference = (JCObject)retObjectAddModuleReference;
            return new ModuleReferenceHandle(objAddModuleReference);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddModuleReference != null ? retObjectAddModuleReference.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterHandle AddParameter(ParameterAttributes attributes, StringHandle name, int sequenceNumber) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddParameter = null;
        try {
            retObjectAddParameter = classInstance.Invoke("AddParameter", attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), sequenceNumber);
            JCObject objAddParameter = (JCObject)retObjectAddParameter;
            return new ParameterHandle(objAddParameter);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddParameter != null ? retObjectAddParameter.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyDefinitionHandle AddProperty(PropertyAttributes attributes, StringHandle name, BlobHandle signature) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddProperty = null;
        try {
            retObjectAddProperty = classInstance.Invoke("AddProperty", attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), signature == null ? null : signature.getJCOInstance());
            JCObject objAddProperty = (JCObject)retObjectAddProperty;
            return new PropertyDefinitionHandle(objAddProperty);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddProperty != null ? retObjectAddProperty.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StandaloneSignatureHandle AddStandaloneSignature(BlobHandle signature) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddStandaloneSignature = null;
        try {
            retObjectAddStandaloneSignature = classInstance.Invoke("AddStandaloneSignature", signature == null ? null : signature.getJCOInstance());
            JCObject objAddStandaloneSignature = (JCObject)retObjectAddStandaloneSignature;
            return new StandaloneSignatureHandle(objAddStandaloneSignature);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddStandaloneSignature != null ? retObjectAddStandaloneSignature.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringHandle GetOrAddString(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddString = null;
        try {
            retObjectGetOrAddString = classInstance.Invoke("GetOrAddString", value);
            JCObject objGetOrAddString = (JCObject)retObjectGetOrAddString;
            return new StringHandle(objGetOrAddString);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddString != null ? retObjectGetOrAddString.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TypeDefinitionHandle AddTypeDefinition(TypeAttributes attributes, StringHandle namespace, StringHandle name, EntityHandle baseType, FieldDefinitionHandle fieldList, MethodDefinitionHandle methodList) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddTypeDefinition = null;
        try {
            retObjectAddTypeDefinition = classInstance.Invoke("AddTypeDefinition", attributes == null ? null : attributes.getJCOInstance(), namespace == null ? null : namespace.getJCOInstance(), name == null ? null : name.getJCOInstance(), baseType == null ? null : baseType.getJCOInstance(), fieldList == null ? null : fieldList.getJCOInstance(), methodList == null ? null : methodList.getJCOInstance());
            JCObject objAddTypeDefinition = (JCObject)retObjectAddTypeDefinition;
            return new TypeDefinitionHandle(objAddTypeDefinition);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddTypeDefinition != null ? retObjectAddTypeDefinition.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TypeReferenceHandle AddTypeReference(EntityHandle resolutionScope, StringHandle namespace, StringHandle name) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddTypeReference = null;
        try {
            retObjectAddTypeReference = classInstance.Invoke("AddTypeReference", resolutionScope == null ? null : resolutionScope.getJCOInstance(), namespace == null ? null : namespace.getJCOInstance(), name == null ? null : name.getJCOInstance());
            JCObject objAddTypeReference = (JCObject)retObjectAddTypeReference;
            return new TypeReferenceHandle(objAddTypeReference);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddTypeReference != null ? retObjectAddTypeReference.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TypeSpecificationHandle AddTypeSpecification(BlobHandle signature) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddTypeSpecification = null;
        try {
            retObjectAddTypeSpecification = classInstance.Invoke("AddTypeSpecification", signature == null ? null : signature.getJCOInstance());
            JCObject objAddTypeSpecification = (JCObject)retObjectAddTypeSpecification;
            return new TypeSpecificationHandle(objAddTypeSpecification);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectAddTypeSpecification != null ? retObjectAddTypeSpecification.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UserStringHandle GetOrAddUserString(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.FormatException, system.reflection.metadata.ImageFormatLimitationException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGetOrAddUserString = null;
        try {
            retObjectGetOrAddUserString = classInstance.Invoke("GetOrAddUserString", value);
            JCObject objGetOrAddUserString = (JCObject)retObjectGetOrAddUserString;
            return new UserStringHandle(objGetOrAddUserString);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGetOrAddUserString != null ? retObjectGetOrAddUserString.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddEncLogEntry(EntityHandle entity, EditAndContinueOperation code) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddEncLogEntry", entity == null ? null : entity.getJCOInstance(), code == null ? null : code.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddEncMapEntry(EntityHandle entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddEncMapEntry", entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddEventMap(TypeDefinitionHandle declaringType, EventDefinitionHandle eventList) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddEventMap", declaringType == null ? null : declaringType.getJCOInstance(), eventList == null ? null : eventList.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFieldLayout(FieldDefinitionHandle field, int offset) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFieldLayout", field == null ? null : field.getJCOInstance(), offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFieldRelativeVirtualAddress(FieldDefinitionHandle field, int offset) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddFieldRelativeVirtualAddress", field == null ? null : field.getJCOInstance(), offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddMarshallingDescriptor(EntityHandle parent, BlobHandle descriptor) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddMarshallingDescriptor", parent == null ? null : parent.getJCOInstance(), descriptor == null ? null : descriptor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddMethodImport(MethodDefinitionHandle method, MethodImportAttributes attributes, StringHandle name, ModuleReferenceHandle module) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddMethodImport", method == null ? null : method.getJCOInstance(), attributes == null ? null : attributes.getJCOInstance(), name == null ? null : name.getJCOInstance(), module == null ? null : module.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddMethodSemantics(EntityHandle association, MethodSemanticsAttributes semantics, MethodDefinitionHandle methodDefinition) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddMethodSemantics", association == null ? null : association.getJCOInstance(), semantics == null ? null : semantics.getJCOInstance(), methodDefinition == null ? null : methodDefinition.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddNestedType(TypeDefinitionHandle type, TypeDefinitionHandle enclosingType) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddNestedType", type == null ? null : type.getJCOInstance(), enclosingType == null ? null : enclosingType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddPropertyMap(TypeDefinitionHandle declaringType, PropertyDefinitionHandle propertyList) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddPropertyMap", declaringType == null ? null : declaringType.getJCOInstance(), propertyList == null ? null : propertyList.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddStateMachineMethod(MethodDefinitionHandle moveNextMethod, MethodDefinitionHandle kickoffMethod) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddStateMachineMethod", moveNextMethod == null ? null : moveNextMethod.getJCOInstance(), kickoffMethod == null ? null : kickoffMethod.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddTypeLayout(TypeDefinitionHandle type, UInt16 packingSize, UInt32 size) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.InvalidCastException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddTypeLayout", type == null ? null : type.getJCOInstance(), packingSize == null ? null : packingSize.getJCOInstance(), size == null ? null : size.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCapacity(HeapIndex heap, int byteCount) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetCapacity", heap == null ? null : heap.getJCOInstance(), byteCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCapacity(TableIndex table, int rowCount) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetCapacity", table == null ? null : table.getJCOInstance(), rowCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}