/*
 *  MIT License
 *
 *  Copyright (c) 2020-2025 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector v. 1.16.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.reflection.portableexecutable;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.portableexecutable.DirectoryEntry;


/**
 * The base .NET class managing System.Reflection.PortableExecutable.PEDirectoriesBuilder, System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.
 * <p>
 * 
 * .NET documentation at <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEDirectoriesBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEDirectoriesBuilder</a>
 * <p>
 *
 * Powered by JCOBridge: more info at <a href="https://www.jcobridge.com" target="_top">https://www.jcobridge.com</a>
 *
 * @author  MASES s.r.l https://masesgroup.com
 * @version 1.16.0.0
 */
public class PEDirectoriesBuilder extends NetObject  {
    /**
     * Fully assembly qualified name: System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
     */
    public static final String assemblyFullName = "System.Reflection.Metadata, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
    /**
     * Assembly name: System.Reflection.Metadata
     */
    public static final String assemblyShortName = "System.Reflection.Metadata";
    /**
     * Qualified class name: System.Reflection.PortableExecutable.PEDirectoriesBuilder
     */
    public static final String className = "System.Reflection.PortableExecutable.PEDirectoriesBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PEDirectoriesBuilder(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PEDirectoriesBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PEDirectoriesBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PEDirectoriesBuilder cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PEDirectoriesBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    public PEDirectoriesBuilder() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    

    
    // Properties section
    
    public int getAddressOfEntryPoint() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectAddressOfEntryPoint = null;
        try {
            retObjectAddressOfEntryPoint = classInstance.Get("AddressOfEntryPoint");
            return (int)retObjectAddressOfEntryPoint;
        } catch (java.lang.ClassCastException cce) {
            // https://github.com/masesgroup/JCOReflector/issues/246#issuecomment-3281199723
            try {
                java.lang.Number retObjectAddressOfEntryPointNumber = (java.lang.Number)retObjectAddressOfEntryPoint;
                return retObjectAddressOfEntryPointNumber.intValue();
            } catch (java.lang.ClassCastException cceInner) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed to convert %s into int and, as fallback solution, into java.lang.Number", retObjectAddressOfEntryPoint != null ? retObjectAddressOfEntryPoint.getClass() : "null"), cce);
            }
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAddressOfEntryPoint(int AddressOfEntryPoint) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AddressOfEntryPoint", AddressOfEntryPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getBaseRelocationTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBaseRelocationTable = null;
        try {
            retObjectBaseRelocationTable = classInstance.Get("BaseRelocationTable");
            JCObject val = (JCObject)retObjectBaseRelocationTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBaseRelocationTable != null ? retObjectBaseRelocationTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBaseRelocationTable(DirectoryEntry BaseRelocationTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BaseRelocationTable", BaseRelocationTable == null ? null : BaseRelocationTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getBoundImportTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectBoundImportTable = null;
        try {
            retObjectBoundImportTable = classInstance.Get("BoundImportTable");
            JCObject val = (JCObject)retObjectBoundImportTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectBoundImportTable != null ? retObjectBoundImportTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBoundImportTable(DirectoryEntry BoundImportTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BoundImportTable", BoundImportTable == null ? null : BoundImportTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getCopyrightTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCopyrightTable = null;
        try {
            retObjectCopyrightTable = classInstance.Get("CopyrightTable");
            JCObject val = (JCObject)retObjectCopyrightTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCopyrightTable != null ? retObjectCopyrightTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCopyrightTable(DirectoryEntry CopyrightTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CopyrightTable", CopyrightTable == null ? null : CopyrightTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getCorHeaderTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectCorHeaderTable = null;
        try {
            retObjectCorHeaderTable = classInstance.Get("CorHeaderTable");
            JCObject val = (JCObject)retObjectCorHeaderTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectCorHeaderTable != null ? retObjectCorHeaderTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCorHeaderTable(DirectoryEntry CorHeaderTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CorHeaderTable", CorHeaderTable == null ? null : CorHeaderTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getDebugTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDebugTable = null;
        try {
            retObjectDebugTable = classInstance.Get("DebugTable");
            JCObject val = (JCObject)retObjectDebugTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDebugTable != null ? retObjectDebugTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDebugTable(DirectoryEntry DebugTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DebugTable", DebugTable == null ? null : DebugTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getDelayImportTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectDelayImportTable = null;
        try {
            retObjectDelayImportTable = classInstance.Get("DelayImportTable");
            JCObject val = (JCObject)retObjectDelayImportTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectDelayImportTable != null ? retObjectDelayImportTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDelayImportTable(DirectoryEntry DelayImportTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DelayImportTable", DelayImportTable == null ? null : DelayImportTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getExceptionTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExceptionTable = null;
        try {
            retObjectExceptionTable = classInstance.Get("ExceptionTable");
            JCObject val = (JCObject)retObjectExceptionTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExceptionTable != null ? retObjectExceptionTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExceptionTable(DirectoryEntry ExceptionTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ExceptionTable", ExceptionTable == null ? null : ExceptionTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getExportTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectExportTable = null;
        try {
            retObjectExportTable = classInstance.Get("ExportTable");
            JCObject val = (JCObject)retObjectExportTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectExportTable != null ? retObjectExportTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExportTable(DirectoryEntry ExportTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ExportTable", ExportTable == null ? null : ExportTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getGlobalPointerTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectGlobalPointerTable = null;
        try {
            retObjectGlobalPointerTable = classInstance.Get("GlobalPointerTable");
            JCObject val = (JCObject)retObjectGlobalPointerTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectGlobalPointerTable != null ? retObjectGlobalPointerTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGlobalPointerTable(DirectoryEntry GlobalPointerTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("GlobalPointerTable", GlobalPointerTable == null ? null : GlobalPointerTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getImportAddressTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectImportAddressTable = null;
        try {
            retObjectImportAddressTable = classInstance.Get("ImportAddressTable");
            JCObject val = (JCObject)retObjectImportAddressTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectImportAddressTable != null ? retObjectImportAddressTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setImportAddressTable(DirectoryEntry ImportAddressTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ImportAddressTable", ImportAddressTable == null ? null : ImportAddressTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getImportTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectImportTable = null;
        try {
            retObjectImportTable = classInstance.Get("ImportTable");
            JCObject val = (JCObject)retObjectImportTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectImportTable != null ? retObjectImportTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setImportTable(DirectoryEntry ImportTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ImportTable", ImportTable == null ? null : ImportTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getLoadConfigTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectLoadConfigTable = null;
        try {
            retObjectLoadConfigTable = classInstance.Get("LoadConfigTable");
            JCObject val = (JCObject)retObjectLoadConfigTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectLoadConfigTable != null ? retObjectLoadConfigTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLoadConfigTable(DirectoryEntry LoadConfigTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LoadConfigTable", LoadConfigTable == null ? null : LoadConfigTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getResourceTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectResourceTable = null;
        try {
            retObjectResourceTable = classInstance.Get("ResourceTable");
            JCObject val = (JCObject)retObjectResourceTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectResourceTable != null ? retObjectResourceTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResourceTable(DirectoryEntry ResourceTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ResourceTable", ResourceTable == null ? null : ResourceTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getThreadLocalStorageTable() throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        java.lang.Object retObjectThreadLocalStorageTable = null;
        try {
            retObjectThreadLocalStorageTable = classInstance.Get("ThreadLocalStorageTable");
            JCObject val = (JCObject)retObjectThreadLocalStorageTable;
            return new DirectoryEntry(val);
        } catch (java.lang.ClassCastException cce) {
            throw new java.lang.IllegalStateException(java.lang.String.format("Failed to cast %s into JCObject", retObjectThreadLocalStorageTable != null ? retObjectThreadLocalStorageTable.getClass() : "null"), cce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setThreadLocalStorageTable(DirectoryEntry ThreadLocalStorageTable) throws Throwable {
        if (classInstance == null)
            throw new java.lang.UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ThreadLocalStorageTable", ThreadLocalStorageTable == null ? null : ThreadLocalStorageTable.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}